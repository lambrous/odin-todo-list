(()=>{"use strict";let t=(t=21)=>{let e="",n=crypto.getRandomValues(new Uint8Array(t));for(;t--;)e+="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[63&n[t]];return e};function e(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function n(t){if(!(n=t,n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)||"number"==typeof t))return!1;var n;const o=e(t);return!isNaN(Number(o))}function o(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function r(t){return o(t,Date.now())}function a(t){const n=e(t);return n.setHours(0,0,0,0),n}function i(t){return e=t,n=r(t),+a(e)==+a(n);var e,n}class s{#t;#e;#n;static MIN_PRIORITY=0;static MAX_PRIORITY=3;static#o=new Map;constructor({title:e,description:n,dueDate:o,priority:r,id:a,isComplete:i,completedDate:c},d=null){this.title=e||"New Todo",this.description=n,this.dueDate=o,this.priority=r,this.isComplete=i??!1,this.id=a??t(8),this.completedDate=c??null,this.project=null===d?{id:null}:d,s.#o.set(this.id,this)}get id(){return this.#t}set id(t){this.#t=t}markComplete(){this.isComplete=!0,this.completedDate=(new Date).toDateString()}markIncomplete(){this.isComplete=!1,this.completedDate=null}toggleCompletion(){this.isComplete=!this.isComplete}updateProperty(t,e){t in this&&(this[t]=e)}get priority(){return this.#e}set priority(t=0){const e=+t;(Number.isNaN(e)||e<s.MIN_PRIORITY||e>s.MAX_PRIORITY)&&(this.#e=0),this.#e=e}get dueDate(){return this.#n}set dueDate(t){const e=new Date(t);this.#n=n(e)?t:null}static get todos(){return Array.from(s.#o.values())}static getTodoByID(t){return s.#o.get(t)}static removeTodo(t){s.#o.delete(t)}static getTodosForProject(t){return s.todos.filter((e=>e.project.id===t))}static getCompletedTodosForProject(t){return s.todos.filter((e=>e.project.id===t&&e.isComplete))}static getIncompleteTodosForProject(t){return s.todos.filter((e=>e.project.id===t&&!e.isComplete))}static get incompleteTodosToday(){return s.todos.filter((t=>!t.isComplete&&i(t.dueDate)))}static get incompleteHighPriorityTodos(){return s.todos.filter((t=>!t.isComplete&&t.priority===s.MAX_PRIORITY))}}class c{#t;static#r=new Map;constructor(e,n){this.name=e,this.id=n??`${t(6)}`,c.#r.set(this.id,this)}get id(){return this.#t}set id(t){this.#t=t}static get projects(){return Array.from(c.#r.values())}static get projectNames(){return c.projects.map((t=>t.name))}static getProjectByID(t){return c.#r.get(t)}static removeProject(t){const e=s.getTodosForProject(t);if(e)for(const t of e)s.removeTodo(t.id);c.#r.delete(t)}}const d={todo:document.querySelector("#todo-form"),project:document.querySelector("#project-form")},u={sidebar:document.querySelector("#sidebar"),todoList:document.querySelector("#todos"),projectList:document.querySelector("#projects-list"),projectHeading:document.querySelector(".project-heading"),inboxItem:document.querySelector("#inbox-nav-item"),inboxButton:document.querySelector("#inbox-nav-item .project-btn"),todayNavButton:document.querySelector("#today-nav-item .project-btn"),priorityNavButton:document.querySelector("#priority-nav-item .project-btn"),projectInput:d.project.querySelector("input"),addTodoButton:document.querySelector("#add-todo-btn"),confirmDialog:document.querySelector("dialog#confirm-dialog"),completedContainer:document.querySelector("section.completed-section"),completedList:document.querySelector("#completed-todos")};function l(t,e){return(n,o,r)=>{t.replaceChildren();for(const a of n){const n=e(a,o,r);t.append(n)}}}function m(t=""){const e=document.createElement("span");return e.classList.add("icon","material-symbols-outlined"),e.textContent=t,e}const h=l(u.projectList,(function(t,e){const n=document.createElement("li");n.classList.add("nav-item"),n.dataset.id=t.id;const o=m("tag"),r=document.createElement("span");r.classList.add("text"),r.textContent=t.name;const a=document.createElement("button");a.classList.add("project-btn"),a.addEventListener("click",(()=>{e.onClick(t)})),a.append(o,r);const i=document.createElement("button");i.id="delete-project-btn";const s=m("delete");return i.append(s),i.addEventListener("click",(()=>{e.onDelete(t.id)})),n.append(a,i),n}));function f(t){const e=document.querySelector(".nav-item.active");e?.classList.remove("active");const n=document.querySelector(`.nav-item[data-id="${t}"]`);n?.classList.add("active")}function g(t){"Escape"===t.key&&t.target.blur()}u.projectInput.addEventListener("blur",(t=>{t.target.value=null,document.removeEventListener("keydown",g)})),u.projectInput.addEventListener("focus",(()=>{document.addEventListener("keydown",g)})),Math.pow(10,8);const p=6048e5,w=864e5;function y(t){const n=e(t),o=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return o.setUTCFullYear(n.getFullYear()),+t-+o}function b(t,e){const n=a(t),o=a(e),r=+n-y(n),i=+o-y(o);return Math.round((r-i)/w)}function v(t,e){const n=t.getFullYear()-e.getFullYear()||t.getMonth()-e.getMonth()||t.getDate()-e.getDate()||t.getHours()-e.getHours()||t.getMinutes()-e.getMinutes()||t.getSeconds()-e.getSeconds()||t.getMilliseconds()-e.getMilliseconds();return n<0?-1:n>0?1:n}function D(t){return function(t,n){const o=e(t),r=e(n);return o.getFullYear()===r.getFullYear()}(t,r(t))}const M={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function k(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const S={date:k({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:k({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:k({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},L={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function T(t){return(e,n)=>{let o;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,r=n?.width?String(n.width):e;o=t.formattingValues[r]||t.formattingValues[e]}else{const e=t.defaultWidth,r=n?.width?String(n.width):t.defaultWidth;o=t.values[r]||t.values[e]}return o[t.argumentCallback?t.argumentCallback(e):e]}}function x(t){return(e,n={})=>{const o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=e.match(r);if(!a)return null;const i=a[0],s=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(s);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(i.length)}}}var j;const C={code:"en-US",formatDistance:(t,e,n)=>{let o;const r=M[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:S,formatRelative:(t,e,n,o)=>L[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:T({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:T({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:T({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:T({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:T({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(j={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(j.matchPattern);if(!n)return null;const o=n[0],r=t.match(j.parsePattern);if(!r)return null;let a=j.valueCallback?j.valueCallback(r[0]):r[0];return a=e.valueCallback?e.valueCallback(a):a,{value:a,rest:t.slice(o.length)}}),era:x({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:x({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:x({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:x({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:x({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let E={};function P(){return E}function q(t){const n=e(t);return b(n,function(t){const n=e(t),r=o(t,0);return r.setFullYear(n.getFullYear(),0,1),r.setHours(0,0,0,0),r}(n))+1}function W(t,n){const o=P(),r=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,a=e(t),i=a.getDay(),s=(i<r?7:0)+i-r;return a.setDate(a.getDate()-s),a.setHours(0,0,0,0),a}function Y(t){return W(t,{weekStartsOn:1})}function N(t){const n=e(t),r=n.getFullYear(),a=o(t,0);a.setFullYear(r+1,0,4),a.setHours(0,0,0,0);const i=Y(a),s=o(t,0);s.setFullYear(r,0,4),s.setHours(0,0,0,0);const c=Y(s);return n.getTime()>=i.getTime()?r+1:n.getTime()>=c.getTime()?r:r-1}function O(t){const n=e(t),r=+Y(n)-+function(t){const e=N(t),n=o(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),Y(n)}(n);return Math.round(r/p)+1}function F(t,n){const r=e(t),a=r.getFullYear(),i=P(),s=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??i.firstWeekContainsDate??i.locale?.options?.firstWeekContainsDate??1,c=o(t,0);c.setFullYear(a+1,0,s),c.setHours(0,0,0,0);const d=W(c,n),u=o(t,0);u.setFullYear(a,0,s),u.setHours(0,0,0,0);const l=W(u,n);return r.getTime()>=d.getTime()?a+1:r.getTime()>=l.getTime()?a:a-1}function I(t,n){const r=e(t),a=+W(r,n)-+function(t,e){const n=P(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,a=F(t,e),i=o(t,0);return i.setFullYear(a,0,r),i.setHours(0,0,0,0),W(i,e)}(r,n);return Math.round(a/p)+1}function H(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const B={y(t,e){const n=t.getFullYear(),o=n>0?n:1-n;return H("yy"===e?o%100:o,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):H(n+1,2)},d:(t,e)=>H(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>H(t.getHours()%12||12,e.length),H:(t,e)=>H(t.getHours(),e.length),m:(t,e)=>H(t.getMinutes(),e.length),s:(t,e)=>H(t.getSeconds(),e.length),S(t,e){const n=e.length,o=t.getMilliseconds();return H(Math.trunc(o*Math.pow(10,n-3)),e.length)}},A={G:function(t,e,n){const o=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),o=e>0?e:1-e;return n.ordinalNumber(o,{unit:"year"})}return B.y(t,e)},Y:function(t,e,n,o){const r=F(t,o),a=r>0?r:1-r;return"YY"===e?H(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):H(a,e.length)},R:function(t,e){return H(N(t),e.length)},u:function(t,e){return H(t.getFullYear(),e.length)},Q:function(t,e,n){const o=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return H(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){const o=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return H(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){const o=t.getMonth();switch(e){case"M":case"MM":return B.M(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){const o=t.getMonth();switch(e){case"L":return String(o+1);case"LL":return H(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,e,n,o){const r=I(t,o);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):H(r,e.length)},I:function(t,e,n){const o=O(t);return"Io"===e?n.ordinalNumber(o,{unit:"week"}):H(o,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):B.d(t,e)},D:function(t,e,n){const o=q(t);return"Do"===e?n.ordinalNumber(o,{unit:"dayOfYear"}):H(o,e.length)},E:function(t,e,n){const o=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return H(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return H(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){const o=t.getDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return H(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){const o=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){const o=t.getHours();let r;switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){const o=t.getHours();let r;switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return B.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):B.H(t,e)},K:function(t,e,n){const o=t.getHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):H(o,e.length)},k:function(t,e,n){let o=t.getHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):H(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):B.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):B.s(t,e)},S:function(t,e){return B.S(t,e)},X:function(t,e,n){const o=t.getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return X(o);case"XXXX":case"XX":return $(o);default:return $(o,":")}},x:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"x":return X(o);case"xxxx":case"xx":return $(o);default:return $(o,":")}},O:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+z(o,":");default:return"GMT"+$(o,":")}},z:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+z(o,":");default:return"GMT"+$(o,":")}},t:function(t,e,n){return H(Math.trunc(t.getTime()/1e3),e.length)},T:function(t,e,n){return H(t.getTime(),e.length)}};function z(t,e=""){const n=t>0?"-":"+",o=Math.abs(t),r=Math.trunc(o/60),a=o%60;return 0===a?n+String(r):n+String(r)+e+H(a,2)}function X(t,e){return t%60==0?(t>0?"-":"+")+H(Math.abs(t)/60,2):$(t,e)}function $(t,e=""){const n=t>0?"-":"+",o=Math.abs(t);return n+H(Math.trunc(o/60),2)+e+H(o%60,2)}const Q=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},R=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},G={p:R,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],o=n[1],r=n[2];if(!r)return Q(t,e);let a;switch(o){case"P":a=e.dateTime({width:"short"});break;case"PP":a=e.dateTime({width:"medium"});break;case"PPP":a=e.dateTime({width:"long"});break;default:a=e.dateTime({width:"full"})}return a.replace("{{date}}",Q(o,e)).replace("{{time}}",R(r,e))}},_=/^D+$/,J=/^Y+$/,U=["D","DD","YY","YYYY"],V=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,K=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Z=/^'([^]*?)'?$/,tt=/''/g,et=/[a-zA-Z]/;function nt(t,o,r){const a=P(),i=r?.locale??a.locale??C,s=r?.firstWeekContainsDate??r?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,c=r?.weekStartsOn??r?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,d=e(t);if(!n(d))throw new RangeError("Invalid time value");let u=o.match(K).map((t=>{const e=t[0];return"p"===e||"P"===e?(0,G[e])(t,i.formatLong):t})).join("").match(V).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const e=t[0];if("'"===e)return{isToken:!1,value:ot(t)};if(A[e])return{isToken:!0,value:t};if(e.match(et))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:t}}));i.localize.preprocessor&&(u=i.localize.preprocessor(d,u));const l={firstWeekContainsDate:s,weekStartsOn:c,locale:i};return u.map((e=>{if(!e.isToken)return e.value;const n=e.value;return(!r?.useAdditionalWeekYearTokens&&function(t){return J.test(t)}(n)||!r?.useAdditionalDayOfYearTokens&&function(t){return _.test(t)}(n))&&function(t,e,n){const o=function(t,e,n){const o="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${o} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,n);if(console.warn(o),U.includes(t))throw new RangeError(o)}(n,o,String(t)),(0,A[n[0]])(d,n,i.localize,l)})).join("")}function ot(t){const e=t.match(Z);return e?e[1].replace(tt,"'"):t}function rt(t,n=!1){const o=(new Date).toDateString(),r=function(t,n){const o=e(t),r=e(n),a=v(o,r),i=Math.abs(b(o,r));o.setDate(o.getDate()-a*i);const s=a*(i-Number(v(o,r)===-a));return 0===s?0:s}(new Date(t).toDateString(),o);let a;return a=0===r?"Today":1!==r||n?r>1&&r<15&&!n?`${r} days left`:-1!==r||n?r<-1&&r>-15&&!n?`${Math.abs(r)} days ago`:D(t)?nt(t,"MMM d"):nt(t,"MMM y"):"Yesterday":"Tomorrow",{daysDiff:r,relativeDateDescription:a}}function at(t,e,{showProject:n=!1,showPriority:o=!0,showDueDate:r=!0}={}){const a=document.createElement("li");a.classList.add("todo-item"),a.dataset.id=t.id;const i=document.createElement("div");i.classList.add("todo-header");const s=document.createElement("h3");s.classList.add("title"),s.textContent=t.title;const c=it(t.isComplete,t.id,e.onTodoComplete);if(i.append(c,s),o){const e=st(t.priority);i.append(e)}const u=dt(t.description),l=document.createElement("div");l.classList.add("info-container"),l.append(i,u);const h=document.createElement("div");if(h.classList.add("right-container"),n){const e=function(t){const e=document.createElement("div");e.classList.add("project");const n=m(t?.name?"tag":"inbox"),o=document.createElement("span");return o.classList.add("text"),o.textContent=t?.name??"Inbox",e.append(n,o),e}(t.project);h.append(e)}if(r){const e=ut(t.dueDate);h.append(e)}const f=function(t,e){const n=document.createElement("button");n.id="delete-todo-btn";const o=m("delete");return n.append(o),n.addEventListener("click",(()=>{e(t)})),n}(t.id,e.onTodoDelete);return a.append(l,h,f),a.addEventListener("click",(e=>{e.target.closest("button")||(mt(a,t),d.todo.removeEventListener("submit",ft.addTodo),d.todo.addEventListener("submit",ft.editTodo))})),a}const it=(t,e,n=null)=>{const o=document.createElement("button"),r=m(),a=t=>{r.textContent=t?"check_box":"check_box_outline_blank"};return a(t),o.replaceChildren(r),o.addEventListener("click",(()=>{n(e,a)})),o},st=t=>{const e=+t;if(!e)return"";const n=document.createElement("span");n.classList.add("priority",`priority-${t}`);const o=m("flag"),r=document.createElement("span");return r.classList.add("text"),r.textContent=ct(e),n.append(o,r),n},ct=t=>{switch(t){case 1:return"Low";case 2:return"Normal";case 3:return"High";default:return""}},dt=t=>{if(!t)return"";const e=document.createElement("p");return e.classList.add("description"),e.textContent=t,e},ut=t=>{if(!t)return"";const{daysDiff:e,relativeDateDescription:n}=rt(t),o=document.createElement("div");o.classList.add("date"),o.classList.toggle("due",e<1);const r=m("hourglass_"+(e<0?"bottom":"top")),a=document.createElement("span");return a.classList.add("text"),a.textContent=n,o.append(r,a),o};let lt=null;function mt(t=null,e=null){lt?.classList.remove("hidden"),d.todo.reset(),null===t?u.todoList.append(d.todo):(lt=t,t.classList.add("hidden"),t.insertAdjacentElement("afterend",d.todo)),d.todo.hidden=!1,t!==u.addTodoButton&&function(t){const e={title:d.todo.querySelector("#todo-title"),description:d.todo.querySelector("#todo-description"),dueDate:d.todo.querySelector("#todo-due-date"),priority:d.todo.querySelector("#todo-priority")};for(const n in e)(null!==t[n]||void 0!==t[n]||""!==t[n]||n in t)&&(e[n].value=t[n])}(e),d.todo.querySelector("input").focus(),d.todo.addEventListener("keydown",yt),document.addEventListener("click",bt)}function ht(){d.todo.removeEventListener("keydown",yt),document.removeEventListener("click",bt),d.todo.hidden=!0,lt?.classList.remove("hidden")}const ft={addTodo:null,editTodo:null};function gt(t,e){ft[t]=t=>{t.preventDefault();const n=new FormData(t.target),o=Object.fromEntries(n),r=function(t){return t&&t!==t.addTodoButton?{id:t.dataset.id,updateContent:pt}:null}(lt);e(o,r),ht()}}function pt(t,e){const n=at(t,e);lt.replaceChildren(...n.children)}function wt(t){const e=u.todoList?.querySelector(`[data-id="${t}"]`);e&&u.todoList.removeChild(e)}function yt(t){"Escape"===t.key&&ht()}const bt=t=>{const e=d.todo.getBoundingClientRect();(t.clientY<e.top||t.clientY>e.bottom||t.clientX<e.left||t.clientX>e.right)&&ht()},vt=l(u.todoList,at);u.addTodoButton.addEventListener("click",(()=>{mt(u.addTodoButton),d.todo.removeEventListener("submit",ft.editTodo),d.todo.addEventListener("submit",ft.addTodo)}));const Dt=(t,e=null)=>{if(!e)return void u.projectHeading.replaceChildren(t);const n=document.createElement("input");u.projectHeading.replaceChildren(n),n.value=t,n.addEventListener("blur",e),n.addEventListener("keydown",(t=>{"Enter"!==t.key&&"Escape"!==t.key||n.blur()}))},{confirmDialog:Mt}=u,kt=Mt.querySelector(".dialog-text"),St=Mt.querySelector("#confirm-btn");Mt.querySelector("#cancel-btn").addEventListener("click",(()=>{Mt.close()}));const{completedContainer:Lt,completedList:Tt}=u,xt=Lt.querySelector(".fold-btn");function jt(t,e){const n=document.createElement("li");n.classList.add("completed-item"),n.dataset.id=t.id;const o=it(t.isComplete,t.id,e);o.classList.add("completed-btn");const{relativeDateDescription:r}=rt(t.completedDate,!0),a=document.createElement("span");a.classList.add("completed-date"),a.textContent=r;const i=document.createElement("p");return i.classList.add("title"),i.textContent=t.title,n.append(o,a,i),n}function Ct(){Lt.classList.toggle("hidden",0===Tt.children.length)}xt.addEventListener("click",(()=>{Tt.classList.toggle("hidden"),xt.querySelector("span.icon").textContent=Tt.classList.contains("hidden")?"unfold_more":"unfold_less"}));const Et={name:"Inbox",id:null};let Pt=Et;u.inboxItem.dataset.id=Et.id;const qt={onTodoComplete:Nt(),onTodoDelete:Ot},Wt={onClick:Yt,onDelete:function(t,e={confirm:"Yes",message:"Confirm?"}){return kt.textContent=e.message,St.textContent=e.confirm,e=>{const n=()=>{t(e),Mt.close()};Mt.showModal(),St.addEventListener("click",n,{once:!0}),Mt.addEventListener("close",(()=>{St.removeEventListener("click",n)}))}}((function(t){c.removeProject(t),function(t){const e=u.projectList.querySelector(`[data-id="${t}"]`);e?.remove()}(t),t===Pt.id&&Yt()}),{message:"Are you sure you want to proceed?",confirm:"Delete"})};function Yt(t){Pt!==t&&(Pt=t||Et,Dt(Pt.name,Pt.id&&Ft),vt(s.getIncompleteTodosForProject(Pt.id),qt),((t,e)=>{if(0===t.length)return Tt.replaceChildren(),void Lt.classList.add("hidden");Lt.classList.remove("hidden"),l(Tt,jt)(t,e)})(s.getCompletedTodosForProject(Pt.id),It),f(Pt.id),ht(),u.addTodoButton.classList.remove("hidden"))}function Nt(t=!0){return e=>{const n=s.getTodoByID(e);n.markComplete(),wt(e),t&&function(t,e){const n=jt(t,e);Tt.prepend(n),Ct()}(n,It)}}function Ot(t){s.removeTodo(t),wt(t)}function Ft(t){const e=t.target.value;var n,o;Pt.name=e,n=Pt.id,o=Pt.name,u.projectList.querySelector(`.nav-item[data-id="${n}"]`).querySelector(".project-btn span.text").textContent=o}function It(t){s.getTodoByID(t).markIncomplete(),function(t){const e=Tt.querySelector(`.completed-item[data-id="${t}"]`);e?.remove(),Ct()}(t),vt(s.getIncompleteTodosForProject(Pt.id),qt)}function Ht(t,e,n){Pt={id:e.id},Dt(e.name),vt(t,{onTodoComplete:Nt(!1),onTodoDelete:Ot},n),f(Pt.id),ht(),u.addTodoButton.classList.add("hidden"),u.completedContainer.classList.add("hidden")}d.project.addEventListener("submit",(function(t){t.preventDefault();const e=new FormData(t.target).get("name"),n=new c(e);t.target.reset(),t.target.querySelector("input").blur(),n&&(h(c.projects,Wt),Yt(n))})),gt("addTodo",(function(t){!function(t,e){const n=at(t,e);u.todoList.append(n)}(new s(t,Pt),qt)})),gt("editTodo",(function(t,e){const n=s.getTodoByID(e.id);for(const e in t)n.updateProperty(e,t[e]);e.updateContent(n,qt)})),u.inboxButton.addEventListener("click",(()=>{Yt()})),u.todayNavButton.addEventListener("click",(()=>{Ht(s.incompleteTodosToday,{name:"Today",id:"today"},{showProject:!0,showDueDate:!1})})),u.priorityNavButton.addEventListener("click",(()=>{Ht(s.incompleteHighPriorityTodos,{name:"High Priority",id:"priority"},{showProject:!0,showPriority:!1})})),window.addEventListener("beforeunload",(()=>{localStorage.setItem("todos",(()=>{const t=s.todos.map((t=>({...t,id:t.id,priority:t.priority,dueDate:t.dueDate,project:{id:t.project.id}}))),e=c.projects.map((t=>({name:t.name,id:t.id})));return JSON.stringify({todos:t,projects:e})})()),localStorage.setItem("session",Pt.id)})),window.addEventListener("load",(()=>{const t=localStorage.getItem("todos");t&&(t=>{const{todos:e,projects:n}=JSON.parse(t);if(n)for(const t of n)new c(t.name,t.id);if(e)for(const t of e){const{project:e,...n}=t,o=c.getProjectByID(e.id)??null;new s(n,o)}})(t),h(c.projects,Wt);const e=localStorage.getItem("session");u.sidebar.querySelector(`.nav-item[data-id="${e}"] .project-btn`).click()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,