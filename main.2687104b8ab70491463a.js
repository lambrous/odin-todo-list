(()=>{"use strict";let t=(t=21)=>{let e="",n=crypto.getRandomValues(new Uint8Array(t));for(;t--;)e+="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict"[63&n[t]];return e};function e(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function n(t){if(!(n=t,n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)||"number"==typeof t))return!1;var n;const o=e(t);return!isNaN(Number(o))}function o(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function r(t){return o(t,Date.now())}function a(t){const n=e(t);return n.setHours(0,0,0,0),n}function i(t){return e=t,n=r(t),+a(e)==+a(n);var e,n}class s{#t;#e;#n;static MIN_PRIORITY=0;static MAX_PRIORITY=3;static#o=new Map;constructor({title:e,description:n,dueDate:o,priority:r,id:a,isComplete:i,completedDate:c},d=null){this.title=e||"New Todo",this.description=n,this.dueDate=o,this.priority=r,this.isComplete=i??!1,this.id=a??t(8),this.completedDate=c??null,this.project=null===d?{id:null}:d,s.#o.set(this.id,this)}get id(){return this.#t}set id(t){this.#t=t}markComplete(){this.isComplete=!0,this.completedDate=(new Date).toDateString()}markIncomplete(){this.isComplete=!1,this.completedDate=null}toggleCompletion(){this.isComplete=!this.isComplete}updateProperty(t,e){t in this&&(this[t]=e)}get priority(){return this.#e}set priority(t=0){const e=+t;(Number.isNaN(e)||e<s.MIN_PRIORITY||e>s.MAX_PRIORITY)&&(this.#e=0),this.#e=e}get dueDate(){return this.#n}set dueDate(t){const e=new Date(t);this.#n=n(e)?t:null}static get todos(){return Array.from(s.#o.values())}static getTodoByID(t){return s.#o.get(t)}static removeTodo(t){s.#o.delete(t)}static getTodosForProject(t){return s.todos.filter((e=>e.project.id===t))}static getCompletedTodosForProject(t){return s.todos.filter((e=>e.project.id===t&&e.isComplete))}static getIncompleteTodosForProject(t){return s.todos.filter((e=>e.project.id===t&&!e.isComplete))}static get incompleteTodosToday(){return s.todos.filter((t=>!t.isComplete&&i(t.dueDate)))}static get incompleteHighPriorityTodos(){return s.todos.filter((t=>!t.isComplete&&t.priority===s.MAX_PRIORITY))}}class c{#t;static#r=new Map;constructor(e,n){this.name=e,this.id=n??`${t(6)}`,c.#r.set(this.id,this)}get id(){return this.#t}set id(t){this.#t=t}static get projects(){return Array.from(c.#r.values())}static get projectNames(){return c.projects.map((t=>t.name))}static getProjectByID(t){return c.#r.get(t)}static removeProject(t){const e=s.getTodosForProject(t);if(e)for(const t of e)s.removeTodo(t.id);c.#r.delete(t)}}const d={todo:document.querySelector("#todo-form"),project:document.querySelector("#project-form")},u={sidebar:document.querySelector("#sidebar"),todoList:document.querySelector("#todos"),projectList:document.querySelector("#projects-list"),projectHeading:document.querySelector(".project-heading"),inboxItem:document.querySelector("#inbox-nav-item"),inboxButton:document.querySelector("#inbox-nav-item .project-btn"),todayNavButton:document.querySelector("#today-nav-item .project-btn"),priorityNavButton:document.querySelector("#priority-nav-item .project-btn"),projectInput:d.project.querySelector("input"),addTodoButton:document.querySelector("#add-todo-btn"),confirmDialog:document.querySelector("dialog#confirm-dialog"),completedContainer:document.querySelector("section.completed-section"),completedList:document.querySelector("#completed-todos"),themeSelector:document.querySelector("#theme-selector")};function l(t,e){return(n,o,r)=>{t.replaceChildren();for(const a of n){const n=e(a,o,r);t.append(n)}}}function m(t=""){const e=document.createElement("span");return e.classList.add("icon","material-symbols-outlined"),e.textContent=t,e}const h=(t,e)=>{let n=null;n=e||(()=>{const t=document.createElement("button"),e=m("more_vert");return t.classList.add("menu-btn"),t.append(e),t})();const o=document.createElement("ul");o.classList.add("dropdown-menu","hidden");for(const e of t){const t=document.createElement("li"),n=m(e.icon),r=document.createElement("span");r.classList.add("text"),r.textContent=e.text,t.append(n,r),t.addEventListener("click",(()=>{e.handler(t),a()})),o.append(t)}function r(t){n.contains(t.target)||o.contains(t.target)||a()}function a(){o.classList.toggle("hidden"),n.classList.toggle("active"),o.classList.contains("hidden")?document.removeEventListener("click",r):document.addEventListener("click",r)}return n.addEventListener("click",a),{button:n,menu:o}},f=l(u.projectList,(function(t,e){const n=document.createElement("li");n.classList.add("nav-item"),n.dataset.id=t.id;const o=m("tag"),r=document.createElement("span");r.classList.add("text"),r.textContent=t.name;const a=document.createElement("button");a.classList.add("project-btn"),a.addEventListener("click",(()=>{e.onClick(t)})),a.append(o,r);const i=h([{text:"Rename",icon:"edit",handler(){e.onClick(t),u.projectHeading.querySelector("input").focus()}},{text:"Delete",icon:"delete",handler(){e.onDelete(t.id)}}]);return n.append(a,i.button,i.menu),n}));function g(t){const e=document.querySelector(".nav-item.active");e?.classList.remove("active");const n=document.querySelector(`.nav-item[data-id="${t}"]`);n?.classList.add("active")}function p(t){"Escape"===t.key&&t.target.blur()}u.projectInput.addEventListener("blur",(t=>{t.target.value=null,document.removeEventListener("keydown",p)})),u.projectInput.addEventListener("focus",(()=>{document.addEventListener("keydown",p)})),Math.pow(10,8);const w=6048e5,y=864e5;function b(t){const n=e(t),o=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return o.setUTCFullYear(n.getFullYear()),+t-+o}function v(t,e){const n=a(t),o=a(e),r=+n-b(n),i=+o-b(o);return Math.round((r-i)/y)}function k(t,e){const n=t.getFullYear()-e.getFullYear()||t.getMonth()-e.getMonth()||t.getDate()-e.getDate()||t.getHours()-e.getHours()||t.getMinutes()-e.getMinutes()||t.getSeconds()-e.getSeconds()||t.getMilliseconds()-e.getMilliseconds();return n<0?-1:n>0?1:n}function D(t){return function(t,n){const o=e(t),r=e(n);return o.getFullYear()===r.getFullYear()}(t,r(t))}const M={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function S(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const L={date:S({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:S({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:S({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},x={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function E(t){return(e,n)=>{let o;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,r=n?.width?String(n.width):e;o=t.formattingValues[r]||t.formattingValues[e]}else{const e=t.defaultWidth,r=n?.width?String(n.width):t.defaultWidth;o=t.values[r]||t.values[e]}return o[t.argumentCallback?t.argumentCallback(e):e]}}function T(t){return(e,n={})=>{const o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=e.match(r);if(!a)return null;const i=a[0],s=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(s)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(s):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(s);let d;return d=t.valueCallback?t.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:e.slice(i.length)}}}var C;const j={code:"en-US",formatDistance:(t,e,n)=>{let o;const r=M[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:L,formatRelative:(t,e,n,o)=>x[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:E({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:E({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:E({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:E({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:E({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(C={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(C.matchPattern);if(!n)return null;const o=n[0],r=t.match(C.parsePattern);if(!r)return null;let a=C.valueCallback?C.valueCallback(r[0]):r[0];return a=e.valueCallback?e.valueCallback(a):a,{value:a,rest:t.slice(o.length)}}),era:T({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:T({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:T({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:T({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:T({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let P={};function q(){return P}function W(t){const n=e(t);return v(n,function(t){const n=e(t),r=o(t,0);return r.setFullYear(n.getFullYear(),0,1),r.setHours(0,0,0,0),r}(n))+1}function Y(t,n){const o=q(),r=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,a=e(t),i=a.getDay(),s=(i<r?7:0)+i-r;return a.setDate(a.getDate()-s),a.setHours(0,0,0,0),a}function N(t){return Y(t,{weekStartsOn:1})}function I(t){const n=e(t),r=n.getFullYear(),a=o(t,0);a.setFullYear(r+1,0,4),a.setHours(0,0,0,0);const i=N(a),s=o(t,0);s.setFullYear(r,0,4),s.setHours(0,0,0,0);const c=N(s);return n.getTime()>=i.getTime()?r+1:n.getTime()>=c.getTime()?r:r-1}function O(t){const n=e(t),r=+N(n)-+function(t){const e=I(t),n=o(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),N(n)}(n);return Math.round(r/w)+1}function F(t,n){const r=e(t),a=r.getFullYear(),i=q(),s=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??i.firstWeekContainsDate??i.locale?.options?.firstWeekContainsDate??1,c=o(t,0);c.setFullYear(a+1,0,s),c.setHours(0,0,0,0);const d=Y(c,n),u=o(t,0);u.setFullYear(a,0,s),u.setHours(0,0,0,0);const l=Y(u,n);return r.getTime()>=d.getTime()?a+1:r.getTime()>=l.getTime()?a:a-1}function H(t,n){const r=e(t),a=+Y(r,n)-+function(t,e){const n=q(),r=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,a=F(t,e),i=o(t,0);return i.setFullYear(a,0,r),i.setHours(0,0,0,0),Y(i,e)}(r,n);return Math.round(a/w)+1}function B(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const A={y(t,e){const n=t.getFullYear(),o=n>0?n:1-n;return B("yy"===e?o%100:o,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):B(n+1,2)},d:(t,e)=>B(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>B(t.getHours()%12||12,e.length),H:(t,e)=>B(t.getHours(),e.length),m:(t,e)=>B(t.getMinutes(),e.length),s:(t,e)=>B(t.getSeconds(),e.length),S(t,e){const n=e.length,o=t.getMilliseconds();return B(Math.trunc(o*Math.pow(10,n-3)),e.length)}},z={G:function(t,e,n){const o=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),o=e>0?e:1-e;return n.ordinalNumber(o,{unit:"year"})}return A.y(t,e)},Y:function(t,e,n,o){const r=F(t,o),a=r>0?r:1-r;return"YY"===e?B(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):B(a,e.length)},R:function(t,e){return B(I(t),e.length)},u:function(t,e){return B(t.getFullYear(),e.length)},Q:function(t,e,n){const o=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return B(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){const o=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return B(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){const o=t.getMonth();switch(e){case"M":case"MM":return A.M(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){const o=t.getMonth();switch(e){case"L":return String(o+1);case"LL":return B(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,e,n,o){const r=H(t,o);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):B(r,e.length)},I:function(t,e,n){const o=O(t);return"Io"===e?n.ordinalNumber(o,{unit:"week"}):B(o,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):A.d(t,e)},D:function(t,e,n){const o=W(t);return"Do"===e?n.ordinalNumber(o,{unit:"dayOfYear"}):B(o,e.length)},E:function(t,e,n){const o=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return B(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return B(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){const o=t.getDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return B(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){const o=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){const o=t.getHours();let r;switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){const o=t.getHours();let r;switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return A.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):A.H(t,e)},K:function(t,e,n){const o=t.getHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):B(o,e.length)},k:function(t,e,n){let o=t.getHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):B(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):A.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):A.s(t,e)},S:function(t,e){return A.S(t,e)},X:function(t,e,n){const o=t.getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return _(o);case"XXXX":case"XX":return $(o);default:return $(o,":")}},x:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"x":return _(o);case"xxxx":case"xx":return $(o);default:return $(o,":")}},O:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+X(o,":");default:return"GMT"+$(o,":")}},z:function(t,e,n){const o=t.getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+X(o,":");default:return"GMT"+$(o,":")}},t:function(t,e,n){return B(Math.trunc(t.getTime()/1e3),e.length)},T:function(t,e,n){return B(t.getTime(),e.length)}};function X(t,e=""){const n=t>0?"-":"+",o=Math.abs(t),r=Math.trunc(o/60),a=o%60;return 0===a?n+String(r):n+String(r)+e+B(a,2)}function _(t,e){return t%60==0?(t>0?"-":"+")+B(Math.abs(t)/60,2):$(t,e)}function $(t,e=""){const n=t>0?"-":"+",o=Math.abs(t);return n+B(Math.trunc(o/60),2)+e+B(o%60,2)}const Q=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},R=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},G={p:R,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],o=n[1],r=n[2];if(!r)return Q(t,e);let a;switch(o){case"P":a=e.dateTime({width:"short"});break;case"PP":a=e.dateTime({width:"medium"});break;case"PPP":a=e.dateTime({width:"long"});break;default:a=e.dateTime({width:"full"})}return a.replace("{{date}}",Q(o,e)).replace("{{time}}",R(r,e))}},J=/^D+$/,U=/^Y+$/,V=["D","DD","YY","YYYY"],K=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Z=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,tt=/^'([^]*?)'?$/,et=/''/g,nt=/[a-zA-Z]/;function ot(t,o,r){const a=q(),i=r?.locale??a.locale??j,s=r?.firstWeekContainsDate??r?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,c=r?.weekStartsOn??r?.locale?.options?.weekStartsOn??a.weekStartsOn??a.locale?.options?.weekStartsOn??0,d=e(t);if(!n(d))throw new RangeError("Invalid time value");let u=o.match(Z).map((t=>{const e=t[0];return"p"===e||"P"===e?(0,G[e])(t,i.formatLong):t})).join("").match(K).map((t=>{if("''"===t)return{isToken:!1,value:"'"};const e=t[0];if("'"===e)return{isToken:!1,value:rt(t)};if(z[e])return{isToken:!0,value:t};if(e.match(nt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+e+"`");return{isToken:!1,value:t}}));i.localize.preprocessor&&(u=i.localize.preprocessor(d,u));const l={firstWeekContainsDate:s,weekStartsOn:c,locale:i};return u.map((e=>{if(!e.isToken)return e.value;const n=e.value;return(!r?.useAdditionalWeekYearTokens&&function(t){return U.test(t)}(n)||!r?.useAdditionalDayOfYearTokens&&function(t){return J.test(t)}(n))&&function(t,e,n){const o=function(t,e,n){const o="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${o} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,n);if(console.warn(o),V.includes(t))throw new RangeError(o)}(n,o,String(t)),(0,z[n[0]])(d,n,i.localize,l)})).join("")}function rt(t){const e=t.match(tt);return e?e[1].replace(et,"'"):t}function at(t,n=!1){const o=(new Date).toDateString(),r=function(t,n){const o=e(t),r=e(n),a=k(o,r),i=Math.abs(v(o,r));o.setDate(o.getDate()-a*i);const s=a*(i-Number(k(o,r)===-a));return 0===s?0:s}(new Date(t).toDateString(),o);let a;return a=0===r?"Today":1!==r||n?r>1&&r<15&&!n?`${r} days left`:-1!==r||n?r<-1&&r>-15&&!n?`${Math.abs(r)} days ago`:D(t)?ot(t,"MMM d"):ot(t,"MMM y"):"Yesterday":"Tomorrow",{daysDiff:r,relativeDateDescription:a}}function it(t,e,{showProject:n=!1,showPriority:o=!0,showDueDate:r=!0}={}){const a=document.createElement("li");a.classList.add("todo-item"),a.dataset.id=t.id;const i=document.createElement("div");i.classList.add("todo-header");const s=document.createElement("h3");s.classList.add("title"),s.textContent=t.title;const c=st(t.isComplete,t.id,e.onTodoComplete);if(i.append(c,s),o){const e=ct(t.priority);i.append(e)}const u=ut(t.description),l=document.createElement("div");l.classList.add("info-container"),l.append(i,u);const f=document.createElement("div");if(f.classList.add("right-container"),n){const e=function(t){const e=document.createElement("div");e.classList.add("project");const n=m(t?.name?"tag":"inbox"),o=document.createElement("span");return o.classList.add("text"),o.textContent=t?.name??"Inbox",e.append(n,o),e}(t.project);f.append(e)}if(r){const e=lt(t.dueDate);f.append(e)}const g=()=>{ht(a,t),d.todo.removeEventListener("submit",gt.addTodo),d.todo.addEventListener("submit",gt.editTodo)},p=h([{text:"Edit",icon:"edit",handler:g},{text:"Delete",icon:"delete",handler(){e.onTodoDelete(t.id)}}]);return a.append(l,f,p.button,p.menu),a.addEventListener("click",(t=>{t.target.closest("button")||p.menu.contains(t.target)||g()})),a}const st=(t,e,n=null)=>{const o=document.createElement("button"),r=m(),a=t=>{r.textContent=t?"check_box":"check_box_outline_blank"};return a(t),o.replaceChildren(r),o.addEventListener("click",(()=>{n(e,a)})),o},ct=t=>{const e=+t;if(!e)return"";const n=document.createElement("span");n.classList.add("priority",`priority-${t}`);const o=m("flag"),r=document.createElement("span");return r.classList.add("text"),r.textContent=dt(e),n.append(o,r),n},dt=t=>{switch(t){case 1:return"Low";case 2:return"Normal";case 3:return"High";default:return""}},ut=t=>{if(!t)return"";const e=document.createElement("p");return e.classList.add("description"),e.textContent=t,e},lt=t=>{if(!t)return"";const{daysDiff:e,relativeDateDescription:n}=at(t),o=document.createElement("div");o.classList.add("date"),o.classList.toggle("due",e<1);const r=m("hourglass_"+(e<0?"bottom":"top")),a=document.createElement("span");return a.classList.add("text"),a.textContent=n,o.append(r,a),o};let mt=null;function ht(t=null,e=null){mt?.classList.remove("hidden"),d.todo.reset(),null===t?u.todoList.append(d.todo):(mt=t,t.classList.add("hidden"),t.insertAdjacentElement("afterend",d.todo)),d.todo.hidden=!1,t!==u.addTodoButton&&function(t){const e={title:d.todo.querySelector("#todo-title"),description:d.todo.querySelector("#todo-description"),dueDate:d.todo.querySelector("#todo-due-date"),priority:d.todo.querySelector("#todo-priority")};for(const n in e)(null!==t[n]||void 0!==t[n]||""!==t[n]||n in t)&&(e[n].value=t[n])}(e),d.todo.querySelector("input").focus(),d.todo.addEventListener("keydown",bt),document.addEventListener("click",vt)}function ft(){d.todo.removeEventListener("keydown",bt),document.removeEventListener("click",vt),d.todo.hidden=!0,mt?.classList.remove("hidden")}const gt={addTodo:null,editTodo:null};function pt(t,e){gt[t]=t=>{t.preventDefault();const n=new FormData(t.target),o=Object.fromEntries(n),r=function(t){return t&&t!==t.addTodoButton?{id:t.dataset.id,updateContent:wt}:null}(mt);e(o,r),ft()}}function wt(t,e){const n=it(t,e);mt.replaceChildren(...n.children)}function yt(t){const e=u.todoList?.querySelector(`[data-id="${t}"]`);e&&u.todoList.removeChild(e)}function bt(t){"Escape"===t.key&&ft()}const vt=t=>{const e=d.todo.getBoundingClientRect();(t.clientY<e.top||t.clientY>e.bottom||t.clientX<e.left||t.clientX>e.right)&&ft()},kt=l(u.todoList,it);u.addTodoButton.addEventListener("click",(()=>{ht(u.addTodoButton),d.todo.removeEventListener("submit",gt.editTodo),d.todo.addEventListener("submit",gt.addTodo)}));const Dt=(t,e=null)=>{if(!e)return void u.projectHeading.replaceChildren(t);const n=document.createElement("input");u.projectHeading.replaceChildren(n),n.value=t,n.addEventListener("blur",e),n.addEventListener("keydown",(t=>{"Enter"!==t.key&&"Escape"!==t.key||n.blur()}))},{confirmDialog:Mt}=u,St=Mt.querySelector(".dialog-text"),Lt=Mt.querySelector("#confirm-btn");Mt.querySelector("#cancel-btn").addEventListener("click",(()=>{Mt.close()}));const{completedContainer:xt,completedList:Et}=u,Tt=xt.querySelector(".fold-btn");function Ct(t,e){const n=document.createElement("li");n.classList.add("completed-item"),n.dataset.id=t.id;const o=st(t.isComplete,t.id,e);o.classList.add("completed-btn");const{relativeDateDescription:r}=at(t.completedDate,!0),a=document.createElement("span");a.classList.add("completed-date"),a.textContent=r;const i=document.createElement("p");return i.classList.add("title"),i.textContent=t.title,n.append(o,a,i),n}function jt(){xt.classList.toggle("hidden",0===Et.children.length)}Tt.addEventListener("click",(()=>{Et.classList.toggle("hidden"),Tt.querySelector("span.icon").textContent=Et.classList.contains("hidden")?"unfold_more":"unfold_less"}));const Pt=u.themeSelector.querySelector(".icon"),qt=window.matchMedia("(prefers-color-scheme: dark)"),Wt=()=>{const t=document.documentElement.dataset.theme;return t?"dark"===t:qt.matches},Yt=t=>{document.documentElement.dataset.theme=t,Pt.textContent="dark"===t?"dark_mode":"light_mode"},Nt=t=>{Yt(t.matches?"dark":"light"),Ft()},It=()=>{Yt(qt.matches?"dark":"light"),Ft()};let Ot=null;const Ft=(t=Ot)=>{if(!t)return;const e=t.querySelector(".icon"),n=t.querySelector(".text"),o=Wt();e.textContent=o?"light_mode":"dark_mode",n.textContent=o?"Light Mode":"Dark Mode"};window.addEventListener("load",(()=>{(()=>{const t=localStorage.getItem("color-theme");t?Yt(t):(It(),qt.addEventListener("change",Nt))})(),(()=>{const t=h([{text:Wt()?"Light Mode":"Dark Mode",icon:Wt()?"light_mode":"dark_mode",handler(){Yt(Wt()?"light":"dark"),Ft(),localStorage.setItem("color-theme",Wt()?"dark":"light"),qt.removeEventListener("change",Nt)}},{text:"System Theme",icon:"desktop_windows",handler(){localStorage.removeItem("color-theme"),It(),qt.addEventListener("change",Nt)}}],u.themeSelector);Ot=t.menu.firstElementChild,u.themeSelector.insertAdjacentElement("afterend",t.menu)})()}));const Ht={name:"Inbox",id:null};let Bt=Ht;u.inboxItem.dataset.id=Ht.id;const At={onTodoComplete:_t(),onTodoDelete:$t},zt={onClick:Xt,onDelete:function(t,e={confirm:"Yes",message:"Confirm?"}){return St.textContent=e.message,Lt.textContent=e.confirm,e=>{const n=()=>{t(e),Mt.close()};Mt.showModal(),Lt.addEventListener("click",n,{once:!0}),Mt.addEventListener("close",(()=>{Lt.removeEventListener("click",n)}))}}((function(t){c.removeProject(t),function(t){const e=u.projectList.querySelector(`[data-id="${t}"]`);e?.remove()}(t),t===Bt.id&&Xt()}),{message:"Are you sure you want to proceed?",confirm:"Delete"})};function Xt(t){Bt!==t&&(Bt=t||Ht,Dt(Bt.name,Bt.id&&Qt),kt(s.getIncompleteTodosForProject(Bt.id),At),((t,e)=>{if(0===t.length)return Et.replaceChildren(),void xt.classList.add("hidden");xt.classList.remove("hidden"),l(Et,Ct)(t,e)})(s.getCompletedTodosForProject(Bt.id),Rt),g(Bt.id),ft(),u.addTodoButton.classList.remove("hidden"))}function _t(t=!0){return e=>{const n=s.getTodoByID(e);n.markComplete(),yt(e),t&&function(t,e){const n=Ct(t,e);Et.prepend(n),jt()}(n,Rt)}}function $t(t){s.removeTodo(t),yt(t)}function Qt(t){const e=t.target.value;var n,o;Bt.name=e,n=Bt.id,o=Bt.name,u.projectList.querySelector(`.nav-item[data-id="${n}"]`).querySelector(".project-btn span.text").textContent=o}function Rt(t){s.getTodoByID(t).markIncomplete(),function(t){const e=Et.querySelector(`.completed-item[data-id="${t}"]`);e?.remove(),jt()}(t),kt(s.getIncompleteTodosForProject(Bt.id),At)}function Gt(t,e,n){Bt={id:e.id},Dt(e.name),kt(t,{onTodoComplete:_t(!1),onTodoDelete:$t},n),g(Bt.id),ft(),u.addTodoButton.classList.add("hidden"),u.completedContainer.classList.add("hidden")}d.project.addEventListener("submit",(function(t){t.preventDefault();const e=new FormData(t.target).get("name"),n=new c(e);t.target.reset(),t.target.querySelector("input").blur(),n&&(f(c.projects,zt),Xt(n))})),pt("addTodo",(function(t){!function(t,e){const n=it(t,e);u.todoList.append(n)}(new s(t,Bt),At)})),pt("editTodo",(function(t,e){const n=s.getTodoByID(e.id);for(const e in t)n.updateProperty(e,t[e]);e.updateContent(n,At)})),u.inboxButton.addEventListener("click",(()=>{Xt()})),u.todayNavButton.addEventListener("click",(()=>{Gt(s.incompleteTodosToday,{name:"Today",id:"today"},{showProject:!0,showDueDate:!1})})),u.priorityNavButton.addEventListener("click",(()=>{Gt(s.incompleteHighPriorityTodos,{name:"High Priority",id:"priority"},{showProject:!0,showPriority:!1})})),window.addEventListener("beforeunload",(()=>{localStorage.setItem("todos",(()=>{const t=s.todos.map((t=>({...t,id:t.id,priority:t.priority,dueDate:t.dueDate,project:{id:t.project.id}}))),e=c.projects.map((t=>({name:t.name,id:t.id})));return JSON.stringify({todos:t,projects:e})})()),localStorage.setItem("session",Bt.id)})),window.addEventListener("load",(()=>{const t=localStorage.getItem("todos");t&&(t=>{const{todos:e,projects:n}=JSON.parse(t);if(n)for(const t of n)new c(t.name,t.id);if(e)for(const t of e){const{project:e,...n}=t,o=c.getProjectByID(e.id)??null;new s(n,o)}})(t),f(c.projects,zt);const e=localStorage.getItem("session");u.sidebar.querySelector(`.nav-item[data-id="${e}"] .project-btn`).click()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNNGIsRUFBWXBDLGFBQWFDLFFBQVEsU0FDbkNtQyxHM0NySWEsQ0FBQ0MsSUFDbEIsTUFBTSxNQUFFaGdCLEVBQUssU0FBRWtCLEdBQWEwZSxLQUFLSyxNQUFNRCxHQUV2QyxHQUFJOWUsRUFDSCxJQUFLLE1BQU1oQyxLQUFXZ0MsRUFDckIsSUFBSUYsRUFBWTlCLEVBQVErQixLQUFNL0IsRUFBUXRDLElBSXhDLEdBQUlvRCxFQUNILElBQUssTUFBTVcsS0FBUVgsRUFBTyxDQUN6QixNQUFNLFFBQUVkLEtBQVlnaEIsR0FBYXZmLEVBQzNCaUIsRUFBY1osRUFBWUssZUFBZW5DLEVBQVF0QyxLQUFPLEtBQzlELElBQUk2QixFQUFTeWhCLEVBQVV0ZSxFQUN4QixDQUNELEUyQ3NIZWtlLENBQXNCQyxHQUVyQyxFQUF1Qi9lLEVBQVlFLFNBQVVxZCxJQUU3QyxNQUFNNEIsRUFBWXhDLGFBQWFDLFFBQVEsV0FDVixFQUFRbGMsUUFBUUQsY0FDNUMsc0JBQXNCMGUsb0JBRUZDLE9BQU8sRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9uYW5vaWQvaW5kZXguYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvbmFub2lkL3VybC1hbHBoYWJldC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvdG9EYXRlLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNWYWxpZC5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzRGF0ZS5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2NvbnN0cnVjdEZyb20ubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9jb25zdHJ1Y3ROb3cubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mRGF5Lm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNUb2RheS5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzU2FtZURheS5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3RvZG8tbWFuYWdlci90b2RvLWl0ZW0uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3RvZG8tbWFuYWdlci9wcm9qZWN0LWxpc3QuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3RvZG8tbWFuYWdlci9tYW5hZ2VyLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy91aS9iYXNlLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy91aS9kcm9wZG93bi1tZW51LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy91aS9zaWRlYmFyLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9jb25zdGFudHMubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9kaWZmZXJlbmNlSW5EYXlzLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvaXNUaGlzWWVhci5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2lzU2FtZVllYXIubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXREaXN0YW5jZS5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2RlZmF1bHRPcHRpb25zLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0RGF5T2ZZZWFyLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZlllYXIubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mV2Vlay5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3N0YXJ0T2ZJU09XZWVrLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0SVNPV2Vla1llYXIubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRJU09XZWVrLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZklTT1dlZWtZZWFyLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZ2V0V2Vla1llYXIubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9nZXRXZWVrLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvc3RhcnRPZldlZWtZZWFyLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9hZGRMZWFkaW5nWmVyb3MubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzLm1qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMubWpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3Byb3RlY3RlZFRva2Vucy5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2Zvcm1hdC5tanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3V0aWxzL2RhdGUuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3VpL3RvZG8tZWxlbWVudC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdWkvdG9kby1jb250ZW50LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy91aS9jb25maXJtLWRpYWxvZy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdWkvY29tcGxldGUtbGlzdC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvdWkvdGhlbWUtc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1cmxBbHBoYWJldCBhcyBzY29wZWRVcmxBbHBoYWJldCB9IGZyb20gJy4vdXJsLWFscGhhYmV0L2luZGV4LmpzJ1xuZXhwb3J0IHsgdXJsQWxwaGFiZXQgfSBmcm9tICcuL3VybC1hbHBoYWJldC9pbmRleC5qcydcbmV4cG9ydCBsZXQgcmFuZG9tID0gYnl0ZXMgPT4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShieXRlcykpXG5leHBvcnQgbGV0IGN1c3RvbVJhbmRvbSA9IChhbHBoYWJldCwgZGVmYXVsdFNpemUsIGdldFJhbmRvbSkgPT4ge1xuICBsZXQgbWFzayA9ICgyIDw8IChNYXRoLmxvZyhhbHBoYWJldC5sZW5ndGggLSAxKSAvIE1hdGguTE4yKSkgLSAxXG4gIGxldCBzdGVwID0gLX4oKDEuNiAqIG1hc2sgKiBkZWZhdWx0U2l6ZSkgLyBhbHBoYWJldC5sZW5ndGgpXG4gIHJldHVybiAoc2l6ZSA9IGRlZmF1bHRTaXplKSA9PiB7XG4gICAgbGV0IGlkID0gJydcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgbGV0IGJ5dGVzID0gZ2V0UmFuZG9tKHN0ZXApXG4gICAgICBsZXQgaiA9IHN0ZXBcbiAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgaWQgKz0gYWxwaGFiZXRbYnl0ZXNbal0gJiBtYXNrXSB8fCAnJ1xuICAgICAgICBpZiAoaWQubGVuZ3RoID09PSBzaXplKSByZXR1cm4gaWRcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBsZXQgY3VzdG9tQWxwaGFiZXQgPSAoYWxwaGFiZXQsIHNpemUgPSAyMSkgPT5cbiAgY3VzdG9tUmFuZG9tKGFscGhhYmV0LCBzaXplLCByYW5kb20pXG5leHBvcnQgbGV0IG5hbm9pZCA9IChzaXplID0gMjEpID0+IHtcbiAgbGV0IGlkID0gJydcbiAgbGV0IGJ5dGVzID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSlcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIGlkICs9IHNjb3BlZFVybEFscGhhYmV0W2J5dGVzW3NpemVdICYgNjNdXG4gIH1cbiAgcmV0dXJuIGlkXG59XG4iLCJleHBvcnQgY29uc3QgdXJsQWxwaGFiZXQgPVxuICAndXNlYW5kb20tMjZUMTk4MzQwUFg3NXB4SkFDS1ZFUllNSU5EQlVTSFdPTEZfR1FaYmZnaGprbHF2d3l6cmljdCdcbiIsIi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBhcmd1bWVudCAtIFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgY29uc3QgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTtcblxuICAvLyBDbG9uZSB0aGUgZGF0ZVxuICBpZiAoXG4gICAgYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8XG4gICAgKHR5cGVvZiBhcmd1bWVudCA9PT0gXCJvYmplY3RcIiAmJiBhcmdTdHIgPT09IFwiW29iamVjdCBEYXRlXVwiKVxuICApIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IGFyZ3VtZW50LmNvbnN0cnVjdG9yKCthcmd1bWVudCk7XG4gIH0gZWxzZSBpZiAoXG4gICAgdHlwZW9mIGFyZ3VtZW50ID09PSBcIm51bWJlclwiIHx8XG4gICAgYXJnU3RyID09PSBcIltvYmplY3QgTnVtYmVyXVwiIHx8XG4gICAgdHlwZW9mIGFyZ3VtZW50ID09PSBcInN0cmluZ1wiIHx8XG4gICAgYXJnU3RyID09PSBcIltvYmplY3QgU3RyaW5nXVwiXG4gICkge1xuICAgIC8vIFRPRE86IENhbiB3ZSBnZXQgcmlkIG9mIGFzP1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVE9ETzogQ2FuIHdlIGdldCByaWQgb2YgYXM/XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCB0b0RhdGU7XG4iLCJpbXBvcnQgeyBpc0RhdGUgfSBmcm9tIFwiLi9pc0RhdGUubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV0oaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGUpXG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBkYXRlIHRvIGNoZWNrXG4gKlxuICogQHJldHVybnMgVGhlIGRhdGUgaXMgdmFsaWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWQoZGF0ZSkge1xuICBpZiAoIWlzRGF0ZShkYXRlKSAmJiB0eXBlb2YgZGF0ZSAhPT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoX2RhdGUpKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBpc1ZhbGlkO1xuIiwiLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZSgpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoTmFOKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igc29tZSB2YWx1ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoe30pXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgfHxcbiAgICAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSBcIltvYmplY3QgRGF0ZV1cIilcbiAgKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBpc0RhdGU7XG4iLCIvKipcbiAqIEBuYW1lIGNvbnN0cnVjdEZyb21cbiAqIEBjYXRlZ29yeSBHZW5lcmljIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnN0cnVjdHMgYSBkYXRlIHVzaW5nIHRoZSByZWZlcmVuY2UgZGF0ZSBhbmQgdGhlIHZhbHVlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgZnVuY3Rpb24gY29uc3RydWN0cyBhIG5ldyBkYXRlIHVzaW5nIHRoZSBjb25zdHJ1Y3RvciBmcm9tIHRoZSByZWZlcmVuY2VcbiAqIGRhdGUgYW5kIHRoZSBnaXZlbiB2YWx1ZS4gSXQgaGVscHMgdG8gYnVpbGQgZ2VuZXJpYyBmdW5jdGlvbnMgdGhhdCBhY2NlcHRcbiAqIGRhdGUgZXh0ZW5zaW9ucy5cbiAqXG4gKiBJdCBkZWZhdWx0cyB0byBgRGF0ZWAgaWYgdGhlIHBhc3NlZCByZWZlcmVuY2UgZGF0ZSBpcyBhIG51bWJlciBvciBhIHN0cmluZy5cbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSByZWZlcmVuY2UgZGF0ZSB0byB0YWtlIGNvbnN0cnVjdG9yIGZyb21cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjcmVhdGUgdGhlIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBEYXRlIGluaXRpYWxpemVkIHVzaW5nIHRoZSBnaXZlbiBkYXRlIGFuZCB2YWx1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSAnZGF0ZS1mbnMnXG4gKlxuICogLy8gQSBmdW5jdGlvbiB0aGF0IGNsb25lcyBhIGRhdGUgcHJlc2VydmluZyB0aGUgb3JpZ2luYWwgdHlwZVxuICogZnVuY3Rpb24gY2xvbmVEYXRlPERhdGVUeXBlIGV4dGVuZHMgRGF0ZShkYXRlOiBEYXRlVHlwZSk6IERhdGVUeXBlIHtcbiAqICAgcmV0dXJuIGNvbnN0cnVjdEZyb20oXG4gKiAgICAgZGF0ZSwgLy8gVXNlIGNvbnRydXN0b3IgZnJvbSB0aGUgZ2l2ZW4gZGF0ZVxuICogICAgIGRhdGUuZ2V0VGltZSgpIC8vIFVzZSB0aGUgZGF0ZSB2YWx1ZSB0byBjcmVhdGUgYSBuZXcgZGF0ZVxuICogICApXG4gKiB9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25zdHJ1Y3RGcm9tKGRhdGUsIHZhbHVlKSB7XG4gIGlmIChkYXRlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiBuZXcgZGF0ZS5jb25zdHJ1Y3Rvcih2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlKTtcbiAgfVxufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGNvbnN0cnVjdEZyb207XG4iLCJpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBjb25zdHJ1Y3ROb3dcbiAqIEBjYXRlZ29yeSBHZW5lcmljIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnN0cnVjdHMgYSBuZXcgY3VycmVudCBkYXRlIHVzaW5nIHRoZSBwYXNzZWQgdmFsdWUgY29uc3RydWN0b3IuXG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGZ1bmN0aW9uIGNvbnN0cnVjdHMgYSBuZXcgY3VycmVudCBkYXRlIHVzaW5nIHRoZSBjb25zdHJ1Y3RvciBmcm9tXG4gKiB0aGUgcmVmZXJlbmNlIGRhdGUuIEl0IGhlbHBzIHRvIGJ1aWxkIGdlbmVyaWMgZnVuY3Rpb25zIHRoYXQgYWNjZXB0IGRhdGVcbiAqIGV4dGVuc2lvbnMgYW5kIHVzZSB0aGUgY3VycmVudCBkYXRlLlxuICpcbiAqIEl0IGRlZmF1bHRzIHRvIGBEYXRlYCBpZiB0aGUgcGFzc2VkIHJlZmVyZW5jZSBkYXRlIGlzIGEgbnVtYmVyIG9yIGEgc3RyaW5nLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIHJlZmVyZW5jZSBkYXRlIHRvIHRha2UgY29uc3RydWN0b3IgZnJvbVxuICpcbiAqIEByZXR1cm5zIEN1cnJlbnQgZGF0ZSBpbml0aWFsaXplZCB1c2luZyB0aGUgZ2l2ZW4gZGF0ZSBjb25zdHJ1Y3RvclxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBjb25zdHJ1Y3ROb3csIGlzU2FtZURheSB9IGZyb20gJ2RhdGUtZm5zJ1xuICpcbiAqIGZ1bmN0aW9uIGlzVG9kYXk8RGF0ZVR5cGUgZXh0ZW5kcyBEYXRlPihcbiAqICAgZGF0ZTogRGF0ZVR5cGUgfCBudW1iZXIgfCBzdHJpbmcsXG4gKiApOiBib29sZWFuIHtcbiAqICAgLy8gSWYgd2Ugd2VyZSB0byB1c2UgYG5ldyBEYXRlKClgIGRpcmVjdGx5LCB0aGUgZnVuY3Rpb24gd291bGQgIGJlaGF2ZVxuICogICAvLyBkaWZmZXJlbnRseSBpbiBkaWZmZXJlbnQgdGltZXpvbmVzIGFuZCByZXR1cm4gZmFsc2UgZm9yIHRoZSBzYW1lIGRhdGUuXG4gKiAgIHJldHVybiBpc1NhbWVEYXkoZGF0ZSwgY29uc3RydWN0Tm93KGRhdGUpKTtcbiAqIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnN0cnVjdE5vdyhkYXRlKSB7XG4gIHJldHVybiBjb25zdHJ1Y3RGcm9tKGRhdGUsIERhdGUubm93KCkpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGNvbnN0cnVjdE5vdztcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSBkYXlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGF0ZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgX2RhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mRGF5O1xuIiwiaW1wb3J0IHsgY29uc3RydWN0Tm93IH0gZnJvbSBcIi4vY29uc3RydWN0Tm93Lm1qc1wiO1xuaW1wb3J0IHsgaXNTYW1lRGF5IH0gZnJvbSBcIi4vaXNTYW1lRGF5Lm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGlzVG9kYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdG9kYXk/XG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgdG9kYXk/XG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIFRoZSBkYXRlIGlzIHRvZGF5XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDYgT2N0b2JlciAyMDE0LCBpcyA2IE9jdG9iZXIgMTQ6MDA6MDAgdG9kYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1RvZGF5KG5ldyBEYXRlKDIwMTQsIDksIDYsIDE0LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUb2RheShkYXRlKSB7XG4gIHJldHVybiBpc1NhbWVEYXkoZGF0ZSwgY29uc3RydWN0Tm93KGRhdGUpKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBpc1RvZGF5O1xuIiwiaW1wb3J0IHsgc3RhcnRPZkRheSB9IGZyb20gXCIuL3N0YXJ0T2ZEYXkubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgaXNTYW1lRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aCk/XG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGVMZWZ0IC0gVGhlIGZpcnN0IGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSBkYXRlUmlnaHQgLSBUaGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcblxuICogQHJldHVybnMgVGhlIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aClcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyIDA2OjAwOjAwIGFuZCA0IFNlcHRlbWJlciAxODowMDowMCBpbiB0aGUgc2FtZSBkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCwgNiwgMCksIG5ldyBEYXRlKDIwMTQsIDgsIDQsIDE4LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgYW5kIDQgT2N0b2JlciBpbiB0aGUgc2FtZSBkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCksIG5ldyBEYXRlKDIwMTQsIDksIDQpKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIsIDIwMTQgYW5kIDQgU2VwdGVtYmVyLCAyMDE1IGluIHRoZSBzYW1lIGRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0KSwgbmV3IERhdGUoMjAxNSwgOCwgNCkpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NhbWVEYXkoZGF0ZUxlZnQsIGRhdGVSaWdodCkge1xuICBjb25zdCBkYXRlTGVmdFN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGRhdGVMZWZ0KTtcbiAgY29uc3QgZGF0ZVJpZ2h0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGF0ZVJpZ2h0KTtcblxuICByZXR1cm4gK2RhdGVMZWZ0U3RhcnRPZkRheSA9PT0gK2RhdGVSaWdodFN0YXJ0T2ZEYXk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgaXNTYW1lRGF5O1xuIiwiaW1wb3J0IHsgbmFub2lkIH0gZnJvbSBcIm5hbm9pZFwiO1xuaW1wb3J0IHsgaXNWYWxpZCBhcyBpc0RhdGVWYWxpZCwgaXNUb2RheSB9IGZyb20gXCJkYXRlLWZuc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb2RvSXRlbSB7XG5cdCNpZDtcblx0I3ByaW9yaXR5O1xuXHQjZHVlRGF0ZTtcblx0c3RhdGljIE1JTl9QUklPUklUWSA9IDA7XG5cdHN0YXRpYyBNQVhfUFJJT1JJVFkgPSAzO1xuXHRzdGF0aWMgI3RvZG9zID0gbmV3IE1hcCgpO1xuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHsgdGl0bGUsIGRlc2NyaXB0aW9uLCBkdWVEYXRlLCBwcmlvcml0eSwgaWQsIGlzQ29tcGxldGUsIGNvbXBsZXRlZERhdGUgfSxcblx0XHRwcm9qZWN0ID0gbnVsbCxcblx0KSB7XG5cdFx0dGhpcy50aXRsZSA9IHRpdGxlIHx8IFwiTmV3IFRvZG9cIjtcblx0XHR0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG5cdFx0dGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcblx0XHR0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG5cdFx0dGhpcy5pc0NvbXBsZXRlID0gaXNDb21wbGV0ZSA/PyBmYWxzZTtcblx0XHR0aGlzLmlkID0gaWQgPz8gbmFub2lkKDgpO1xuXHRcdHRoaXMuY29tcGxldGVkRGF0ZSA9IGNvbXBsZXRlZERhdGUgPz8gbnVsbDtcblxuXHRcdGlmIChwcm9qZWN0ID09PSBudWxsKSB0aGlzLnByb2plY3QgPSB7IGlkOiBudWxsIH07XG5cdFx0ZWxzZSB0aGlzLnByb2plY3QgPSBwcm9qZWN0O1xuXG5cdFx0VG9kb0l0ZW0uI3RvZG9zLnNldCh0aGlzLmlkLCB0aGlzKTtcblx0fVxuXG5cdGdldCBpZCgpIHtcblx0XHRyZXR1cm4gdGhpcy4jaWQ7XG5cdH1cblxuXHRzZXQgaWQodmFsdWUpIHtcblx0XHR0aGlzLiNpZCA9IHZhbHVlO1xuXHR9XG5cblx0bWFya0NvbXBsZXRlKCkge1xuXHRcdHRoaXMuaXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0dGhpcy5jb21wbGV0ZWREYXRlID0gbmV3IERhdGUoKS50b0RhdGVTdHJpbmcoKTtcblx0fVxuXG5cdG1hcmtJbmNvbXBsZXRlKCkge1xuXHRcdHRoaXMuaXNDb21wbGV0ZSA9IGZhbHNlO1xuXHRcdHRoaXMuY29tcGxldGVkRGF0ZSA9IG51bGw7XG5cdH1cblxuXHR0b2dnbGVDb21wbGV0aW9uKCkge1xuXHRcdHRoaXMuaXNDb21wbGV0ZSA9ICF0aGlzLmlzQ29tcGxldGU7XG5cdH1cblxuXHR1cGRhdGVQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpIHtcblx0XHRpZiAocHJvcGVydHkgaW4gdGhpcykge1xuXHRcdFx0dGhpc1twcm9wZXJ0eV0gPSB2YWx1ZTtcblx0XHR9XG5cdH1cblxuXHRnZXQgcHJpb3JpdHkoKSB7XG5cdFx0cmV0dXJuIHRoaXMuI3ByaW9yaXR5O1xuXHR9XG5cblx0c2V0IHByaW9yaXR5KHZhbHVlID0gMCkge1xuXHRcdGNvbnN0IHByaW9yaXR5VmFsdWUgPSArdmFsdWU7XG5cdFx0aWYgKFxuXHRcdFx0TnVtYmVyLmlzTmFOKHByaW9yaXR5VmFsdWUpIHx8XG5cdFx0XHRwcmlvcml0eVZhbHVlIDwgVG9kb0l0ZW0uTUlOX1BSSU9SSVRZIHx8XG5cdFx0XHRwcmlvcml0eVZhbHVlID4gVG9kb0l0ZW0uTUFYX1BSSU9SSVRZXG5cdFx0KSB7XG5cdFx0XHR0aGlzLiNwcmlvcml0eSA9IDA7XG5cdFx0fVxuXHRcdHRoaXMuI3ByaW9yaXR5ID0gcHJpb3JpdHlWYWx1ZTtcblx0fVxuXG5cdGdldCBkdWVEYXRlKCkge1xuXHRcdHJldHVybiB0aGlzLiNkdWVEYXRlO1xuXHR9XG5cblx0c2V0IGR1ZURhdGUoZGF0ZVN0cikge1xuXHRcdGNvbnN0IHBhcnNlRGF0ZSA9IG5ldyBEYXRlKGRhdGVTdHIpO1xuXHRcdHRoaXMuI2R1ZURhdGUgPSBpc0RhdGVWYWxpZChwYXJzZURhdGUpID8gZGF0ZVN0ciA6IG51bGw7XG5cdH1cblxuXHRzdGF0aWMgZ2V0IHRvZG9zKCkge1xuXHRcdHJldHVybiBBcnJheS5mcm9tKFRvZG9JdGVtLiN0b2Rvcy52YWx1ZXMoKSk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0VG9kb0J5SUQoaWQpIHtcblx0XHRyZXR1cm4gVG9kb0l0ZW0uI3RvZG9zLmdldChpZCk7XG5cdH1cblxuXHRzdGF0aWMgcmVtb3ZlVG9kbyhpZCkge1xuXHRcdFRvZG9JdGVtLiN0b2Rvcy5kZWxldGUoaWQpO1xuXHR9XG5cblx0c3RhdGljIGdldFRvZG9zRm9yUHJvamVjdChwcm9qZWN0SUQpIHtcblx0XHRyZXR1cm4gVG9kb0l0ZW0udG9kb3MuZmlsdGVyKCh0b2RvKSA9PiB0b2RvLnByb2plY3QuaWQgPT09IHByb2plY3RJRCk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0Q29tcGxldGVkVG9kb3NGb3JQcm9qZWN0KHByb2plY3RJRCkge1xuXHRcdHJldHVybiBUb2RvSXRlbS50b2Rvcy5maWx0ZXIoXG5cdFx0XHQodG9kbykgPT4gdG9kby5wcm9qZWN0LmlkID09PSBwcm9qZWN0SUQgJiYgdG9kby5pc0NvbXBsZXRlLFxuXHRcdCk7XG5cdH1cblxuXHRzdGF0aWMgZ2V0SW5jb21wbGV0ZVRvZG9zRm9yUHJvamVjdChwcm9qZWN0SUQpIHtcblx0XHRyZXR1cm4gVG9kb0l0ZW0udG9kb3MuZmlsdGVyKFxuXHRcdFx0KHRvZG8pID0+IHRvZG8ucHJvamVjdC5pZCA9PT0gcHJvamVjdElEICYmICF0b2RvLmlzQ29tcGxldGUsXG5cdFx0KTtcblx0fVxuXG5cdHN0YXRpYyBnZXQgaW5jb21wbGV0ZVRvZG9zVG9kYXkoKSB7XG5cdFx0cmV0dXJuIFRvZG9JdGVtLnRvZG9zLmZpbHRlcihcblx0XHRcdCh0b2RvKSA9PiAhdG9kby5pc0NvbXBsZXRlICYmIGlzVG9kYXkodG9kby5kdWVEYXRlKSxcblx0XHQpO1xuXHR9XG5cblx0c3RhdGljIGdldCBpbmNvbXBsZXRlSGlnaFByaW9yaXR5VG9kb3MoKSB7XG5cdFx0cmV0dXJuIFRvZG9JdGVtLnRvZG9zLmZpbHRlcigodG9kbykgPT4ge1xuXHRcdFx0cmV0dXJuICF0b2RvLmlzQ29tcGxldGUgJiYgdG9kby5wcmlvcml0eSA9PT0gVG9kb0l0ZW0uTUFYX1BSSU9SSVRZO1xuXHRcdH0pO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBuYW5vaWQgfSBmcm9tIFwibmFub2lkXCI7XG5pbXBvcnQgVG9kb0l0ZW0gZnJvbSBcIi4vdG9kby1pdGVtXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2plY3RMaXN0IHtcblx0I2lkO1xuXHRzdGF0aWMgI3Byb2plY3RzID0gbmV3IE1hcCgpO1xuXG5cdGNvbnN0cnVjdG9yKG5hbWUsIGlkKSB7XG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHR0aGlzLmlkID0gaWQgPz8gYCR7bmFub2lkKDYpfWA7XG5cdFx0UHJvamVjdExpc3QuI3Byb2plY3RzLnNldCh0aGlzLmlkLCB0aGlzKTtcblx0fVxuXG5cdGdldCBpZCgpIHtcblx0XHRyZXR1cm4gdGhpcy4jaWQ7XG5cdH1cblxuXHRzZXQgaWQodmFsdWUpIHtcblx0XHR0aGlzLiNpZCA9IHZhbHVlO1xuXHR9XG5cblx0c3RhdGljIGdldCBwcm9qZWN0cygpIHtcblx0XHRyZXR1cm4gQXJyYXkuZnJvbShQcm9qZWN0TGlzdC4jcHJvamVjdHMudmFsdWVzKCkpO1xuXHR9XG5cblx0c3RhdGljIGdldCBwcm9qZWN0TmFtZXMoKSB7XG5cdFx0cmV0dXJuIFByb2plY3RMaXN0LnByb2plY3RzLm1hcCgocHJvamVjdCkgPT4gcHJvamVjdC5uYW1lKTtcblx0fVxuXG5cdHN0YXRpYyBnZXRQcm9qZWN0QnlJRChpZCkge1xuXHRcdHJldHVybiBQcm9qZWN0TGlzdC4jcHJvamVjdHMuZ2V0KGlkKTtcblx0fVxuXG5cdHN0YXRpYyByZW1vdmVQcm9qZWN0KGlkKSB7XG5cdFx0Y29uc3QgdG9kb3NUb1JlbW92ZSA9IFRvZG9JdGVtLmdldFRvZG9zRm9yUHJvamVjdChpZCk7XG5cdFx0aWYgKHRvZG9zVG9SZW1vdmUpXG5cdFx0XHRmb3IgKGNvbnN0IHRvZG8gb2YgdG9kb3NUb1JlbW92ZSkgVG9kb0l0ZW0ucmVtb3ZlVG9kbyh0b2RvLmlkKTtcblx0XHRQcm9qZWN0TGlzdC4jcHJvamVjdHMuZGVsZXRlKGlkKTtcblx0fVxufVxuIiwiaW1wb3J0IFRvZG9JdGVtIGZyb20gXCIuL3RvZG8taXRlbVwiO1xuaW1wb3J0IFByb2plY3RMaXN0IGZyb20gXCIuL3Byb2plY3QtbGlzdFwiO1xuXG5leHBvcnQgeyBUb2RvSXRlbSwgUHJvamVjdExpc3QgfTtcblxuY29uc3QgZ2V0SnNvbkRhdGEgPSAoKSA9PiB7XG5cdGNvbnN0IHRvZG9zID0gVG9kb0l0ZW0udG9kb3MubWFwKCh0b2RvKSA9PiB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLnRvZG8sXG5cdFx0XHRpZDogdG9kby5pZCxcblx0XHRcdHByaW9yaXR5OiB0b2RvLnByaW9yaXR5LFxuXHRcdFx0ZHVlRGF0ZTogdG9kby5kdWVEYXRlLFxuXHRcdFx0cHJvamVjdDoge1xuXHRcdFx0XHRpZDogdG9kby5wcm9qZWN0LmlkLFxuXHRcdFx0fSxcblx0XHR9O1xuXHR9KTtcblxuXHRjb25zdCBwcm9qZWN0cyA9IFByb2plY3RMaXN0LnByb2plY3RzLm1hcCgocHJvamVjdCkgPT4ge1xuXHRcdHJldHVybiB7XG5cdFx0XHRuYW1lOiBwcm9qZWN0Lm5hbWUsXG5cdFx0XHRpZDogcHJvamVjdC5pZCxcblx0XHR9O1xuXHR9KTtcblxuXHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkoeyB0b2RvcywgcHJvamVjdHMgfSk7XG59O1xuXG5jb25zdCBsb2FkVG9kb3MgPSAoanNvbkRhdGEpID0+IHtcblx0Y29uc3QgeyB0b2RvcywgcHJvamVjdHMgfSA9IEpTT04ucGFyc2UoanNvbkRhdGEpO1xuXG5cdGlmIChwcm9qZWN0cykge1xuXHRcdGZvciAoY29uc3QgcHJvamVjdCBvZiBwcm9qZWN0cykge1xuXHRcdFx0bmV3IFByb2plY3RMaXN0KHByb2plY3QubmFtZSwgcHJvamVjdC5pZCk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHRvZG9zKSB7XG5cdFx0Zm9yIChjb25zdCB0b2RvIG9mIHRvZG9zKSB7XG5cdFx0XHRjb25zdCB7IHByb2plY3QsIC4uLnRvZG9EYXRhIH0gPSB0b2RvO1xuXHRcdFx0Y29uc3QgcHJvamVjdExpc3QgPSBQcm9qZWN0TGlzdC5nZXRQcm9qZWN0QnlJRChwcm9qZWN0LmlkKSA/PyBudWxsO1xuXHRcdFx0bmV3IFRvZG9JdGVtKHRvZG9EYXRhLCBwcm9qZWN0TGlzdCk7XG5cdFx0fVxuXHR9XG59O1xuXG5leHBvcnQgY29uc3QgdG9kb01hbmFnZXIgPSB7XG5cdGdldEpzb25EYXRhLFxuXHRsb2FkVG9kb3MsXG59O1xuIiwiZXhwb3J0IGNvbnN0IGZvcm0gPSB7XG5cdHRvZG86IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdG9kby1mb3JtXCIpLFxuXHRwcm9qZWN0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Byb2plY3QtZm9ybVwiKSxcbn07XG5cbmV4cG9ydCBjb25zdCBlbGVtZW50ID0ge1xuXHRzaWRlYmFyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NpZGViYXJcIiksXG5cdHRvZG9MaXN0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3RvZG9zXCIpLFxuXHRwcm9qZWN0TGlzdDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0cy1saXN0XCIpLFxuXHRwcm9qZWN0SGVhZGluZzogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0LWhlYWRpbmdcIiksXG5cdGluYm94SXRlbTogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNpbmJveC1uYXYtaXRlbVwiKSxcblx0aW5ib3hCdXR0b246IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaW5ib3gtbmF2LWl0ZW0gLnByb2plY3QtYnRuXCIpLFxuXHR0b2RheU5hdkJ1dHRvbjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0b2RheS1uYXYtaXRlbSAucHJvamVjdC1idG5cIiksXG5cdHByaW9yaXR5TmF2QnV0dG9uOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByaW9yaXR5LW5hdi1pdGVtIC5wcm9qZWN0LWJ0blwiKSxcblx0cHJvamVjdElucHV0OiBmb3JtLnByb2plY3QucXVlcnlTZWxlY3RvcihcImlucHV0XCIpLFxuXHRhZGRUb2RvQnV0dG9uOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC10b2RvLWJ0blwiKSxcblx0Y29uZmlybURpYWxvZzogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImRpYWxvZyNjb25maXJtLWRpYWxvZ1wiKSxcblx0Y29tcGxldGVkQ29udGFpbmVyOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic2VjdGlvbi5jb21wbGV0ZWQtc2VjdGlvblwiKSxcblx0Y29tcGxldGVkTGlzdDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb21wbGV0ZWQtdG9kb3NcIiksXG5cdHRoZW1lU2VsZWN0b3I6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGhlbWUtc2VsZWN0b3JcIiksXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyTGlzdChjb250YWluZXIsIGNyZWF0ZUl0ZW0pIHtcblx0cmV0dXJuIChsaXN0LCBoYW5kbGVyLCBvcHRpb25zKSA9PiB7XG5cdFx0Y29udGFpbmVyLnJlcGxhY2VDaGlsZHJlbigpO1xuXHRcdGZvciAoY29uc3QgaXRlbSBvZiBsaXN0KSB7XG5cdFx0XHRjb25zdCBpdGVtRWxlbWVudCA9IGNyZWF0ZUl0ZW0oaXRlbSwgaGFuZGxlciwgb3B0aW9ucyk7XG5cdFx0XHRjb250YWluZXIuYXBwZW5kKGl0ZW1FbGVtZW50KTtcblx0XHR9XG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJY29uKHN5bWJvbCA9IFwiXCIpIHtcblx0Y29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRpY29uLmNsYXNzTGlzdC5hZGQoXCJpY29uXCIsIFwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZFwiKTtcblx0aWNvbi50ZXh0Q29udGVudCA9IHN5bWJvbDtcblx0cmV0dXJuIGljb247XG59XG4iLCJpbXBvcnQgeyBjcmVhdGVJY29uIH0gZnJvbSBcIi4vYmFzZVwiO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlRHJvcGRvd25NZW51QnV0dG9uID0gKCkgPT4ge1xuXHRjb25zdCBtZW51QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcblx0Y29uc3QgbWVudUJ1dHRvbkljb24gPSBjcmVhdGVJY29uKFwibW9yZV92ZXJ0XCIpO1xuXHRtZW51QnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJtZW51LWJ0blwiKTtcblx0bWVudUJ1dHRvbi5hcHBlbmQobWVudUJ1dHRvbkljb24pO1xuXHRyZXR1cm4gbWVudUJ1dHRvbjtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVEcm9wZG93bk1lbnUgPSAob3B0aW9ucywgdGFyZ2V0QnV0dG9uKSA9PiB7XG5cdGxldCBtZW51QnV0dG9uID0gbnVsbDtcblx0aWYgKCF0YXJnZXRCdXR0b24pIG1lbnVCdXR0b24gPSBjcmVhdGVEcm9wZG93bk1lbnVCdXR0b24oKTtcblx0ZWxzZSBtZW51QnV0dG9uID0gdGFyZ2V0QnV0dG9uO1xuXG5cdGNvbnN0IG1lbnVMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuXHRtZW51TGlzdC5jbGFzc0xpc3QuYWRkKFwiZHJvcGRvd24tbWVudVwiLCBcImhpZGRlblwiKTtcblxuXHRmb3IgKGNvbnN0IG9wdGlvbiBvZiBvcHRpb25zKSB7XG5cdFx0Y29uc3QgbWVudUl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG5cblx0XHRjb25zdCBpY29uID0gY3JlYXRlSWNvbihvcHRpb24uaWNvbik7XG5cdFx0Y29uc3QgdGV4dFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0XHR0ZXh0U3Bhbi5jbGFzc0xpc3QuYWRkKFwidGV4dFwiKTtcblx0XHR0ZXh0U3Bhbi50ZXh0Q29udGVudCA9IG9wdGlvbi50ZXh0O1xuXG5cdFx0bWVudUl0ZW0uYXBwZW5kKGljb24sIHRleHRTcGFuKTtcblx0XHRtZW51SXRlbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuXHRcdFx0b3B0aW9uLmhhbmRsZXIobWVudUl0ZW0pO1xuXHRcdFx0dG9nZ2xlTWVudSgpO1xuXHRcdH0pO1xuXHRcdG1lbnVMaXN0LmFwcGVuZChtZW51SXRlbSk7XG5cdH1cblxuXHRmdW5jdGlvbiBoaWRlTWVudU9uT3V0c2lkZUNsaWNrKGV2ZW50KSB7XG5cdFx0aWYgKFxuXHRcdFx0IW1lbnVCdXR0b24uY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJlxuXHRcdFx0IW1lbnVMaXN0LmNvbnRhaW5zKGV2ZW50LnRhcmdldClcblx0XHQpIHtcblx0XHRcdHRvZ2dsZU1lbnUoKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiB0b2dnbGVNZW51KCkge1xuXHRcdG1lbnVMaXN0LmNsYXNzTGlzdC50b2dnbGUoXCJoaWRkZW5cIik7XG5cdFx0bWVudUJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKFwiYWN0aXZlXCIpO1xuXG5cdFx0aWYgKG1lbnVMaXN0LmNsYXNzTGlzdC5jb250YWlucyhcImhpZGRlblwiKSkge1xuXHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhpZGVNZW51T25PdXRzaWRlQ2xpY2spO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGlkZU1lbnVPbk91dHNpZGVDbGljayk7XG5cdFx0fVxuXHR9XG5cblx0bWVudUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdG9nZ2xlTWVudSk7XG5cblx0cmV0dXJuIHsgYnV0dG9uOiBtZW51QnV0dG9uLCBtZW51OiBtZW51TGlzdCB9O1xufTtcbiIsImltcG9ydCB7IGVsZW1lbnQsIHJlbmRlckxpc3QsIGNyZWF0ZUljb24gfSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgeyBjcmVhdGVEcm9wZG93bk1lbnUgfSBmcm9tIFwiLi9kcm9wZG93bi1tZW51XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0TmF2SXRlbShwcm9qZWN0LCBoYW5kbGVyKSB7XG5cdGNvbnN0IG5hdkl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG5cdG5hdkl0ZW0uY2xhc3NMaXN0LmFkZChcIm5hdi1pdGVtXCIpO1xuXHRuYXZJdGVtLmRhdGFzZXQuaWQgPSBwcm9qZWN0LmlkO1xuXG5cdGNvbnN0IGljb24gPSBjcmVhdGVJY29uKFwidGFnXCIpO1xuXG5cdGNvbnN0IG5hbWVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdG5hbWVTcGFuLmNsYXNzTGlzdC5hZGQoXCJ0ZXh0XCIpO1xuXHRuYW1lU3Bhbi50ZXh0Q29udGVudCA9IHByb2plY3QubmFtZTtcblxuXHRjb25zdCBuYXZCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXHRuYXZCdXR0b24uY2xhc3NMaXN0LmFkZChcInByb2plY3QtYnRuXCIpO1xuXHRuYXZCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0XHRoYW5kbGVyLm9uQ2xpY2socHJvamVjdCk7XG5cdH0pO1xuXHRuYXZCdXR0b24uYXBwZW5kKGljb24sIG5hbWVTcGFuKTtcblxuXHRjb25zdCBkcm9wZG93bk1lbnUgPSBjcmVhdGVEcm9wZG93bk1lbnUoW1xuXHRcdHtcblx0XHRcdHRleHQ6IFwiUmVuYW1lXCIsXG5cdFx0XHRpY29uOiBcImVkaXRcIixcblx0XHRcdGhhbmRsZXIoKSB7XG5cdFx0XHRcdGhhbmRsZXIub25DbGljayhwcm9qZWN0KTtcblx0XHRcdFx0ZWxlbWVudC5wcm9qZWN0SGVhZGluZy5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIikuZm9jdXMoKTtcblx0XHRcdH0sXG5cdFx0fSxcblx0XHR7XG5cdFx0XHR0ZXh0OiBcIkRlbGV0ZVwiLFxuXHRcdFx0aWNvbjogXCJkZWxldGVcIixcblx0XHRcdGhhbmRsZXIoKSB7XG5cdFx0XHRcdGhhbmRsZXIub25EZWxldGUocHJvamVjdC5pZCk7XG5cdFx0XHR9LFxuXHRcdH0sXG5cdF0pO1xuXG5cdG5hdkl0ZW0uYXBwZW5kKG5hdkJ1dHRvbiwgZHJvcGRvd25NZW51LmJ1dHRvbiwgZHJvcGRvd25NZW51Lm1lbnUpO1xuXHRyZXR1cm4gbmF2SXRlbTtcbn1cblxuZXhwb3J0IGNvbnN0IHJlbmRlclByb2plY3RzID0gcmVuZGVyTGlzdChcblx0ZWxlbWVudC5wcm9qZWN0TGlzdCxcblx0Y3JlYXRlUHJvamVjdE5hdkl0ZW0sXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlQWN0aXZlTmF2SXRlbShpdGVtSUQpIHtcblx0Y29uc3QgYWN0aXZlTmF2SXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2LWl0ZW0uYWN0aXZlXCIpO1xuXHRhY3RpdmVOYXZJdGVtPy5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuXG5cdGNvbnN0IHNlbGVjdGVkTmF2SXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG5cdFx0YC5uYXYtaXRlbVtkYXRhLWlkPVwiJHtpdGVtSUR9XCJdYCxcblx0KTtcblx0c2VsZWN0ZWROYXZJdGVtPy5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xufVxuXG5mdW5jdGlvbiBibHVyT25Fc2NhcGVQcmVzcyhldmVudCkge1xuXHRpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSBldmVudC50YXJnZXQuYmx1cigpO1xufVxuXG5lbGVtZW50LnByb2plY3RJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCAoZXZlbnQpID0+IHtcblx0ZXZlbnQudGFyZ2V0LnZhbHVlID0gbnVsbDtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgYmx1ck9uRXNjYXBlUHJlc3MpO1xufSk7XG5cbmVsZW1lbnQucHJvamVjdElucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiB7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGJsdXJPbkVzY2FwZVByZXNzKTtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUHJvamVjdE5hbWUocHJvamVjdElELCBuZXdQcm9qZWN0TmFtZSkge1xuXHRjb25zdCBwcm9qZWN0TmF2SXRlbSA9IGVsZW1lbnQucHJvamVjdExpc3QucXVlcnlTZWxlY3Rvcihcblx0XHRgLm5hdi1pdGVtW2RhdGEtaWQ9XCIke3Byb2plY3RJRH1cIl1gLFxuXHQpO1xuXHRjb25zdCBwcm9qZWN0VGV4dFNwYW4gPSBwcm9qZWN0TmF2SXRlbS5xdWVyeVNlbGVjdG9yKFxuXHRcdFwiLnByb2plY3QtYnRuIHNwYW4udGV4dFwiLFxuXHQpO1xuXHRwcm9qZWN0VGV4dFNwYW4udGV4dENvbnRlbnQgPSBuZXdQcm9qZWN0TmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVByb2plY3RJdGVtKHByb2plY3RJRCkge1xuXHRjb25zdCBuYXZJdGVtVG9SZW1vdmUgPSBlbGVtZW50LnByb2plY3RMaXN0LnF1ZXJ5U2VsZWN0b3IoXG5cdFx0YFtkYXRhLWlkPVwiJHtwcm9qZWN0SUR9XCJdYCxcblx0KTtcblx0bmF2SXRlbVRvUmVtb3ZlPy5yZW1vdmUoKTtcbn1cbiIsIi8qKlxuICogQG1vZHVsZSBjb25zdGFudHNcbiAqIEBzdW1tYXJ5IFVzZWZ1bCBjb25zdGFudHNcbiAqIEBkZXNjcmlwdGlvblxuICogQ29sbGVjdGlvbiBvZiB1c2VmdWwgZGF0ZSBjb25zdGFudHMuXG4gKlxuICogVGhlIGNvbnN0YW50cyBjb3VsZCBiZSBpbXBvcnRlZCBmcm9tIGBkYXRlLWZucy9jb25zdGFudHNgOlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBtYXhUaW1lLCBtaW5UaW1lIH0gZnJvbSBcIi4vY29uc3RhbnRzL2RhdGUtZm5zL2NvbnN0YW50c1wiO1xuICpcbiAqIGZ1bmN0aW9uIGlzQWxsb3dlZFRpbWUodGltZSkge1xuICogICByZXR1cm4gdGltZSA8PSBtYXhUaW1lICYmIHRpbWUgPj0gbWluVGltZTtcbiAqIH1cbiAqIGBgYFxuICovXG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBkYXlzSW5XZWVrXG4gKiBAc3VtbWFyeSBEYXlzIGluIDEgd2Vlay5cbiAqL1xuZXhwb3J0IGNvbnN0IGRheXNJbldlZWsgPSA3O1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgZGF5c0luWWVhclxuICogQHN1bW1hcnkgRGF5cyBpbiAxIHllYXIuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIb3cgbWFueSBkYXlzIGluIGEgeWVhci5cbiAqXG4gKiBPbmUgeWVhcnMgZXF1YWxzIDM2NS4yNDI1IGRheXMgYWNjb3JkaW5nIHRvIHRoZSBmb3JtdWxhOlxuICpcbiAqID4gTGVhcCB5ZWFyIG9jY3VyZXMgZXZlcnkgNCB5ZWFycywgZXhjZXB0IGZvciB5ZWFycyB0aGF0IGFyZSBkaXZpc2FibGUgYnkgMTAwIGFuZCBub3QgZGl2aXNhYmxlIGJ5IDQwMC5cbiAqID4gMSBtZWFuIHllYXIgPSAoMzY1KzEvNC0xLzEwMCsxLzQwMCkgZGF5cyA9IDM2NS4yNDI1IGRheXNcbiAqL1xuZXhwb3J0IGNvbnN0IGRheXNJblllYXIgPSAzNjUuMjQyNTtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1heFRpbWVcbiAqIEBzdW1tYXJ5IE1heGltdW0gYWxsb3dlZCB0aW1lLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBtYXhUaW1lIH0gZnJvbSBcIi4vY29uc3RhbnRzL2RhdGUtZm5zL2NvbnN0YW50c1wiO1xuICpcbiAqIGNvbnN0IGlzVmFsaWQgPSA4NjQwMDAwMDAwMDAwMDAxIDw9IG1heFRpbWU7XG4gKiAvLz0+IGZhbHNlXG4gKlxuICogbmV3IERhdGUoODY0MDAwMDAwMDAwMDAwMSk7XG4gKiAvLz0+IEludmFsaWQgRGF0ZVxuICovXG5leHBvcnQgY29uc3QgbWF4VGltZSA9IE1hdGgucG93KDEwLCA4KSAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtaW5UaW1lXG4gKiBAc3VtbWFyeSBNaW5pbXVtIGFsbG93ZWQgdGltZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgbWluVGltZSB9IGZyb20gXCIuL2NvbnN0YW50cy9kYXRlLWZucy9jb25zdGFudHNcIjtcbiAqXG4gKiBjb25zdCBpc1ZhbGlkID0gLTg2NDAwMDAwMDAwMDAwMDEgPj0gbWluVGltZTtcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBuZXcgRGF0ZSgtODY0MDAwMDAwMDAwMDAwMSlcbiAqIC8vPT4gSW52YWxpZCBEYXRlXG4gKi9cbmV4cG9ydCBjb25zdCBtaW5UaW1lID0gLW1heFRpbWU7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJbldlZWtcbiAqIEBzdW1tYXJ5IE1pbGxpc2Vjb25kcyBpbiAxIHdlZWsuXG4gKi9cbmV4cG9ydCBjb25zdCBtaWxsaXNlY29uZHNJbldlZWsgPSA2MDQ4MDAwMDA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJbkRheVxuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgZGF5LlxuICovXG5leHBvcnQgY29uc3QgbWlsbGlzZWNvbmRzSW5EYXkgPSA4NjQwMDAwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luTWludXRlXG4gKiBAc3VtbWFyeSBNaWxsaXNlY29uZHMgaW4gMSBtaW51dGVcbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luTWludXRlID0gNjAwMDA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJbkhvdXJcbiAqIEBzdW1tYXJ5IE1pbGxpc2Vjb25kcyBpbiAxIGhvdXJcbiAqL1xuZXhwb3J0IGNvbnN0IG1pbGxpc2Vjb25kc0luSG91ciA9IDM2MDAwMDA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtaWxsaXNlY29uZHNJblNlY29uZFxuICogQHN1bW1hcnkgTWlsbGlzZWNvbmRzIGluIDEgc2Vjb25kXG4gKi9cbmV4cG9ydCBjb25zdCBtaWxsaXNlY29uZHNJblNlY29uZCA9IDEwMDA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtaW51dGVzSW5ZZWFyXG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgeWVhci5cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbnV0ZXNJblllYXIgPSA1MjU2MDA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtaW51dGVzSW5Nb250aFxuICogQHN1bW1hcnkgTWludXRlcyBpbiAxIG1vbnRoLlxuICovXG5leHBvcnQgY29uc3QgbWludXRlc0luTW9udGggPSA0MzIwMDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1pbnV0ZXNJbkRheVxuICogQHN1bW1hcnkgTWludXRlcyBpbiAxIGRheS5cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbnV0ZXNJbkRheSA9IDE0NDA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtaW51dGVzSW5Ib3VyXG4gKiBAc3VtbWFyeSBNaW51dGVzIGluIDEgaG91ci5cbiAqL1xuZXhwb3J0IGNvbnN0IG1pbnV0ZXNJbkhvdXIgPSA2MDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIG1vbnRoc0luUXVhcnRlclxuICogQHN1bW1hcnkgTW9udGhzIGluIDEgcXVhcnRlci5cbiAqL1xuZXhwb3J0IGNvbnN0IG1vbnRoc0luUXVhcnRlciA9IDM7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBtb250aHNJblllYXJcbiAqIEBzdW1tYXJ5IE1vbnRocyBpbiAxIHllYXIuXG4gKi9cbmV4cG9ydCBjb25zdCBtb250aHNJblllYXIgPSAxMjtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHF1YXJ0ZXJzSW5ZZWFyXG4gKiBAc3VtbWFyeSBRdWFydGVycyBpbiAxIHllYXJcbiAqL1xuZXhwb3J0IGNvbnN0IHF1YXJ0ZXJzSW5ZZWFyID0gNDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJbkhvdXJcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSBob3VyLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luSG91ciA9IDM2MDA7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5NaW51dGVcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSBtaW51dGUuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNvbmRzSW5NaW51dGUgPSA2MDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJbkRheVxuICogQHN1bW1hcnkgU2Vjb25kcyBpbiAxIGRheS5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJbkRheSA9IHNlY29uZHNJbkhvdXIgKiAyNDtcblxuLyoqXG4gKiBAY29uc3RhbnRcbiAqIEBuYW1lIHNlY29uZHNJbldlZWtcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSB3ZWVrLlxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luV2VlayA9IHNlY29uZHNJbkRheSAqIDc7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5ZZWFyXG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgeWVhci5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJblllYXIgPSBzZWNvbmRzSW5EYXkgKiBkYXlzSW5ZZWFyO1xuXG4vKipcbiAqIEBjb25zdGFudFxuICogQG5hbWUgc2Vjb25kc0luTW9udGhcbiAqIEBzdW1tYXJ5IFNlY29uZHMgaW4gMSBtb250aFxuICovXG5leHBvcnQgY29uc3Qgc2Vjb25kc0luTW9udGggPSBzZWNvbmRzSW5ZZWFyIC8gMTI7XG5cbi8qKlxuICogQGNvbnN0YW50XG4gKiBAbmFtZSBzZWNvbmRzSW5RdWFydGVyXG4gKiBAc3VtbWFyeSBTZWNvbmRzIGluIDEgcXVhcnRlci5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlY29uZHNJblF1YXJ0ZXIgPSBzZWNvbmRzSW5Nb250aCAqIDM7XG4iLCJpbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi4vdG9EYXRlLm1qc1wiO1xuXG4vKipcbiAqIEdvb2dsZSBDaHJvbWUgYXMgb2YgNjcuMC4zMzk2Ljg3IGludHJvZHVjZWQgdGltZXpvbmVzIHdpdGggb2Zmc2V0IHRoYXQgaW5jbHVkZXMgc2Vjb25kcy5cbiAqIFRoZXkgdXN1YWxseSBhcHBlYXIgZm9yIGRhdGVzIHRoYXQgZGVub3RlIHRpbWUgYmVmb3JlIHRoZSB0aW1lem9uZXMgd2VyZSBpbnRyb2R1Y2VkXG4gKiAoZS5nLiBmb3IgJ0V1cm9wZS9QcmFndWUnIHRpbWV6b25lIHRoZSBvZmZzZXQgaXMgR01UKzAwOjU3OjQ0IGJlZm9yZSAxIE9jdG9iZXIgMTg5MVxuICogYW5kIEdNVCswMTowMDowMCBhZnRlciB0aGF0IGRhdGUpXG4gKlxuICogRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIHRoZSBvZmZzZXQgaW4gbWludXRlcyBhbmQgd291bGQgcmV0dXJuIDU3IGZvciB0aGUgZXhhbXBsZSBhYm92ZSxcbiAqIHdoaWNoIHdvdWxkIGxlYWQgdG8gaW5jb3JyZWN0IGNhbGN1bGF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHRpbWV6b25lIG9mZnNldCBpbiBtaWxsaXNlY29uZHMgdGhhdCB0YWtlcyBzZWNvbmRzIGluIGFjY291bnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IHV0Y0RhdGUgPSBuZXcgRGF0ZShcbiAgICBEYXRlLlVUQyhcbiAgICAgIF9kYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICBfZGF0ZS5nZXRNb250aCgpLFxuICAgICAgX2RhdGUuZ2V0RGF0ZSgpLFxuICAgICAgX2RhdGUuZ2V0SG91cnMoKSxcbiAgICAgIF9kYXRlLmdldE1pbnV0ZXMoKSxcbiAgICAgIF9kYXRlLmdldFNlY29uZHMoKSxcbiAgICAgIF9kYXRlLmdldE1pbGxpc2Vjb25kcygpLFxuICAgICksXG4gICk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoX2RhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiArZGF0ZSAtICt1dGNEYXRlO1xufVxuIiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5EYXkgfSBmcm9tIFwiLi9jb25zdGFudHMubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mRGF5IH0gZnJvbSBcIi4vc3RhcnRPZkRheS5tanNcIjtcbmltcG9ydCB7IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgfSBmcm9tIFwiLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLiBUaGlzIG1lYW5zIHRoYXQgdGhlIHRpbWVzIGFyZSByZW1vdmVkXG4gKiBmcm9tIHRoZSBkYXRlcyBhbmQgdGhlbiB0aGUgZGlmZmVyZW5jZSBpbiBkYXlzIGlzIGNhbGN1bGF0ZWQuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGVMZWZ0IC0gVGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSBkYXRlUmlnaHQgLSBUaGUgZWFybGllciBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjAwOjAwIGFuZCAyIEp1bHkgMjAxMiAwMDowMDowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMiwgNiwgMiwgMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCAwKVxuICogKVxuICogLy89PiAzNjZcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjU5OjAwIGFuZCAzIEp1bHkgMjAxMSAwMDowMTowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMywgMCwgMSksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCA1OSlcbiAqIClcbiAqIC8vPT4gMVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGRhdGVMZWZ0LCBkYXRlUmlnaHQpIHtcbiAgY29uc3Qgc3RhcnRPZkRheUxlZnQgPSBzdGFydE9mRGF5KGRhdGVMZWZ0KTtcbiAgY29uc3Qgc3RhcnRPZkRheVJpZ2h0ID0gc3RhcnRPZkRheShkYXRlUmlnaHQpO1xuXG4gIGNvbnN0IHRpbWVzdGFtcExlZnQgPVxuICAgICtzdGFydE9mRGF5TGVmdCAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheUxlZnQpO1xuICBjb25zdCB0aW1lc3RhbXBSaWdodCA9XG4gICAgK3N0YXJ0T2ZEYXlSaWdodCAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheVJpZ2h0KTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlciBiZWNhdXNlIHRoZSBudW1iZXIgb2ZcbiAgLy8gbWlsbGlzZWNvbmRzIGluIGEgZGF5IGlzIG5vdCBjb25zdGFudCAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZlxuICAvLyB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpLlxuICByZXR1cm4gTWF0aC5yb3VuZCgodGltZXN0YW1wTGVmdCAtIHRpbWVzdGFtcFJpZ2h0KSAvIG1pbGxpc2Vjb25kc0luRGF5KTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXM7XG4iLCJpbXBvcnQgeyBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMgfSBmcm9tIFwiLi9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBmdWxsIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBmdWxsIGRheSBwZXJpb2RzIGJldHdlZW4gdHdvIGRhdGVzLiBGcmFjdGlvbmFsIGRheXMgYXJlXG4gKiB0cnVuY2F0ZWQgdG93YXJkcyB6ZXJvLlxuICpcbiAqIE9uZSBcImZ1bGwgZGF5XCIgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gYSBsb2NhbCB0aW1lIGluIG9uZSBkYXkgdG8gdGhlIHNhbWVcbiAqIGxvY2FsIHRpbWUgb24gdGhlIG5leHQgb3IgcHJldmlvdXMgZGF5LiBBIGZ1bGwgZGF5IGNhbiBzb21ldGltZXMgYmUgbGVzcyB0aGFuXG4gKiBvciBtb3JlIHRoYW4gMjQgaG91cnMgaWYgYSBkYXlsaWdodCBzYXZpbmdzIGNoYW5nZSBoYXBwZW5zIGJldHdlZW4gdHdvIGRhdGVzLlxuICpcbiAqIFRvIGlnbm9yZSBEU1QgYW5kIG9ubHkgbWVhc3VyZSBleGFjdCAyNC1ob3VyIHBlcmlvZHMsIHVzZSB0aGlzIGluc3RlYWQ6XG4gKiBgTWF0aC50cnVuYyhkaWZmZXJlbmNlSW5Ib3VycyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KS8yNCl8MGAuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGVMZWZ0IC0gVGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSBkYXRlUmlnaHQgLSBUaGUgZWFybGllciBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIG51bWJlciBvZiBmdWxsIGRheXMgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbCB0aW1lem9uZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBmdWxsIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjAwOjAwIGFuZCAyIEp1bHkgMjAxMiAwMDowMDowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTIsIDYsIDIsIDAsIDApLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgMClcbiAqIClcbiAqIC8vPT4gMzY1XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGZ1bGwgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6NTk6MDAgYW5kIDMgSnVseSAyMDExIDAwOjAxOjAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMywgMCwgMSksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCA1OSlcbiAqIClcbiAqIC8vPT4gMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBmdWxsIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDEgTWFyY2ggMjAyMCAwOjAwIGFuZCAxIEp1bmUgMjAyMCAwOjAwID9cbiAqIC8vIE5vdGU6IGJlY2F1c2UgbG9jYWwgdGltZSBpcyB1c2VkLCB0aGVcbiAqIC8vIHJlc3VsdCB3aWxsIGFsd2F5cyBiZSA5MiBkYXlzLCBldmVuIGluXG4gKiAvLyB0aW1lIHpvbmVzIHdoZXJlIERTVCBzdGFydHMgYW5kIHRoZVxuICogLy8gcGVyaW9kIGhhcyBvbmx5IDkyKjI0LTEgaG91cnMuXG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5EYXlzKFxuICogICBuZXcgRGF0ZSgyMDIwLCA1LCAxKSxcbiAqICAgbmV3IERhdGUoMjAyMCwgMiwgMSlcbiAqIClcbiAqIC8vPT4gOTJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbkRheXMoZGF0ZUxlZnQsIGRhdGVSaWdodCkge1xuICBjb25zdCBfZGF0ZUxlZnQgPSB0b0RhdGUoZGF0ZUxlZnQpO1xuICBjb25zdCBfZGF0ZVJpZ2h0ID0gdG9EYXRlKGRhdGVSaWdodCk7XG5cbiAgY29uc3Qgc2lnbiA9IGNvbXBhcmVMb2NhbEFzYyhfZGF0ZUxlZnQsIF9kYXRlUmlnaHQpO1xuICBjb25zdCBkaWZmZXJlbmNlID0gTWF0aC5hYnMoZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKF9kYXRlTGVmdCwgX2RhdGVSaWdodCkpO1xuXG4gIF9kYXRlTGVmdC5zZXREYXRlKF9kYXRlTGVmdC5nZXREYXRlKCkgLSBzaWduICogZGlmZmVyZW5jZSk7XG5cbiAgLy8gTWF0aC5hYnMoZGlmZiBpbiBmdWxsIGRheXMgLSBkaWZmIGluIGNhbGVuZGFyIGRheXMpID09PSAxIGlmIGxhc3QgY2FsZW5kYXIgZGF5IGlzIG5vdCBmdWxsXG4gIC8vIElmIHNvLCByZXN1bHQgbXVzdCBiZSBkZWNyZWFzZWQgYnkgMSBpbiBhYnNvbHV0ZSB2YWx1ZVxuICBjb25zdCBpc0xhc3REYXlOb3RGdWxsID0gTnVtYmVyKFxuICAgIGNvbXBhcmVMb2NhbEFzYyhfZGF0ZUxlZnQsIF9kYXRlUmlnaHQpID09PSAtc2lnbixcbiAgKTtcbiAgY29uc3QgcmVzdWx0ID0gc2lnbiAqIChkaWZmZXJlbmNlIC0gaXNMYXN0RGF5Tm90RnVsbCk7XG4gIC8vIFByZXZlbnQgbmVnYXRpdmUgemVyb1xuICByZXR1cm4gcmVzdWx0ID09PSAwID8gMCA6IHJlc3VsdDtcbn1cblxuLy8gTGlrZSBgY29tcGFyZUFzY2AgYnV0IHVzZXMgbG9jYWwgdGltZSBub3QgVVRDLCB3aGljaCBpcyBuZWVkZWRcbi8vIGZvciBhY2N1cmF0ZSBlcXVhbGl0eSBjb21wYXJpc29ucyBvZiBVVEMgdGltZXN0YW1wcyB0aGF0IGVuZCB1cFxuLy8gaGF2aW5nIHRoZSBzYW1lIHJlcHJlc2VudGF0aW9uIGluIGxvY2FsIHRpbWUsIGUuZy4gb25lIGhvdXIgYmVmb3JlXG4vLyBEU1QgZW5kcyB2cy4gdGhlIGluc3RhbnQgdGhhdCBEU1QgZW5kcy5cbmZ1bmN0aW9uIGNvbXBhcmVMb2NhbEFzYyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSB7XG4gIGNvbnN0IGRpZmYgPVxuICAgIGRhdGVMZWZ0LmdldEZ1bGxZZWFyKCkgLSBkYXRlUmlnaHQuZ2V0RnVsbFllYXIoKSB8fFxuICAgIGRhdGVMZWZ0LmdldE1vbnRoKCkgLSBkYXRlUmlnaHQuZ2V0TW9udGgoKSB8fFxuICAgIGRhdGVMZWZ0LmdldERhdGUoKSAtIGRhdGVSaWdodC5nZXREYXRlKCkgfHxcbiAgICBkYXRlTGVmdC5nZXRIb3VycygpIC0gZGF0ZVJpZ2h0LmdldEhvdXJzKCkgfHxcbiAgICBkYXRlTGVmdC5nZXRNaW51dGVzKCkgLSBkYXRlUmlnaHQuZ2V0TWludXRlcygpIHx8XG4gICAgZGF0ZUxlZnQuZ2V0U2Vjb25kcygpIC0gZGF0ZVJpZ2h0LmdldFNlY29uZHMoKSB8fFxuICAgIGRhdGVMZWZ0LmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZVJpZ2h0LmdldE1pbGxpc2Vjb25kcygpO1xuXG4gIGlmIChkaWZmIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChkaWZmID4gMCkge1xuICAgIHJldHVybiAxO1xuICAgIC8vIFJldHVybiAwIGlmIGRpZmYgaXMgMDsgcmV0dXJuIE5hTiBpZiBkaWZmIGlzIE5hTlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkaWZmO1xuICB9XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZGlmZmVyZW5jZUluRGF5cztcbiIsImltcG9ydCB7IGNvbnN0cnVjdE5vdyB9IGZyb20gXCIuL2NvbnN0cnVjdE5vdy5tanNcIjtcbmltcG9ydCB7IGlzU2FtZVllYXIgfSBmcm9tIFwiLi9pc1NhbWVZZWFyLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGlzVGhpc1llYXJcbiAqIEBjYXRlZ29yeSBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBzYW1lIHllYXIgYXMgdGhlIGN1cnJlbnQgZGF0ZT9cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgc2FtZSB5ZWFyIGFzIHRoZSBjdXJyZW50IGRhdGU/XG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZGF0ZSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIFRoZSBkYXRlIGlzIGluIHRoaXMgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAyNSBTZXB0ZW1iZXIgMjAxNCwgaXMgMiBKdWx5IDIwMTQgaW4gdGhpcyB5ZWFyP1xuICogY29uc3QgcmVzdWx0ID0gaXNUaGlzWWVhcihuZXcgRGF0ZSgyMDE0LCA2LCAyKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUaGlzWWVhcihkYXRlKSB7XG4gIHJldHVybiBpc1NhbWVZZWFyKGRhdGUsIGNvbnN0cnVjdE5vdyhkYXRlKSk7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgaXNUaGlzWWVhcjtcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBpc1NhbWVZZWFyXG4gKiBAY2F0ZWdvcnkgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIHllYXI/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIHllYXI/XG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGVMZWZ0IC0gVGhlIGZpcnN0IGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSBkYXRlUmlnaHQgLSBUaGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyBUaGUgZGF0ZXMgYXJlIGluIHRoZSBzYW1lIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDIgU2VwdGVtYmVyIDIwMTQgYW5kIDI1IFNlcHRlbWJlciAyMDE0IGluIHRoZSBzYW1lIHllYXI/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVZZWFyKG5ldyBEYXRlKDIwMTQsIDgsIDIpLCBuZXcgRGF0ZSgyMDE0LCA4LCAyNSkpXG4gKiAvLz0+IHRydWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZVllYXIoZGF0ZUxlZnQsIGRhdGVSaWdodCkge1xuICBjb25zdCBfZGF0ZUxlZnQgPSB0b0RhdGUoZGF0ZUxlZnQpO1xuICBjb25zdCBfZGF0ZVJpZ2h0ID0gdG9EYXRlKGRhdGVSaWdodCk7XG4gIHJldHVybiBfZGF0ZUxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gX2RhdGVSaWdodC5nZXRGdWxsWWVhcigpO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGlzU2FtZVllYXI7XG4iLCJjb25zdCBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogXCJsZXNzIHRoYW4gYSBzZWNvbmRcIixcbiAgICBvdGhlcjogXCJsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHNcIixcbiAgfSxcblxuICB4U2Vjb25kczoge1xuICAgIG9uZTogXCIxIHNlY29uZFwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBzZWNvbmRzXCIsXG4gIH0sXG5cbiAgaGFsZkFNaW51dGU6IFwiaGFsZiBhIG1pbnV0ZVwiLFxuXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6IFwibGVzcyB0aGFuIGEgbWludXRlXCIsXG4gICAgb3RoZXI6IFwibGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzXCIsXG4gIH0sXG5cbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6IFwiMSBtaW51dGVcIixcbiAgICBvdGhlcjogXCJ7e2NvdW50fX0gbWludXRlc1wiLFxuICB9LFxuXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiBcImFib3V0IDEgaG91clwiLFxuICAgIG90aGVyOiBcImFib3V0IHt7Y291bnR9fSBob3Vyc1wiLFxuICB9LFxuXG4gIHhIb3Vyczoge1xuICAgIG9uZTogXCIxIGhvdXJcIixcbiAgICBvdGhlcjogXCJ7e2NvdW50fX0gaG91cnNcIixcbiAgfSxcblxuICB4RGF5czoge1xuICAgIG9uZTogXCIxIGRheVwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBkYXlzXCIsXG4gIH0sXG5cbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6IFwiYWJvdXQgMSB3ZWVrXCIsXG4gICAgb3RoZXI6IFwiYWJvdXQge3tjb3VudH19IHdlZWtzXCIsXG4gIH0sXG5cbiAgeFdlZWtzOiB7XG4gICAgb25lOiBcIjEgd2Vla1wiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSB3ZWVrc1wiLFxuICB9LFxuXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogXCJhYm91dCAxIG1vbnRoXCIsXG4gICAgb3RoZXI6IFwiYWJvdXQge3tjb3VudH19IG1vbnRoc1wiLFxuICB9LFxuXG4gIHhNb250aHM6IHtcbiAgICBvbmU6IFwiMSBtb250aFwiLFxuICAgIG90aGVyOiBcInt7Y291bnR9fSBtb250aHNcIixcbiAgfSxcblxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogXCJhYm91dCAxIHllYXJcIixcbiAgICBvdGhlcjogXCJhYm91dCB7e2NvdW50fX0geWVhcnNcIixcbiAgfSxcblxuICB4WWVhcnM6IHtcbiAgICBvbmU6IFwiMSB5ZWFyXCIsXG4gICAgb3RoZXI6IFwie3tjb3VudH19IHllYXJzXCIsXG4gIH0sXG5cbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogXCJvdmVyIDEgeWVhclwiLFxuICAgIG90aGVyOiBcIm92ZXIge3tjb3VudH19IHllYXJzXCIsXG4gIH0sXG5cbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiBcImFsbW9zdCAxIHllYXJcIixcbiAgICBvdGhlcjogXCJhbG1vc3Qge3tjb3VudH19IHllYXJzXCIsXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0RGlzdGFuY2UgPSAodG9rZW4sIGNvdW50LCBvcHRpb25zKSA9PiB7XG4gIGxldCByZXN1bHQ7XG5cbiAgY29uc3QgdG9rZW5WYWx1ZSA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZTtcbiAgfSBlbHNlIGlmIChjb3VudCA9PT0gMSkge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWUub3RoZXIucmVwbGFjZShcInt7Y291bnR9fVwiLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zPy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uICYmIG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiBcImluIFwiICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgXCIgYWdvXCI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJleHBvcnQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gKG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIGNvbnN0IGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufVxuIiwiaW1wb3J0IHsgYnVpbGRGb3JtYXRMb25nRm4gfSBmcm9tIFwiLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi5tanNcIjtcblxuY29uc3QgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwiRUVFRSwgTU1NTSBkbywgeVwiLFxuICBsb25nOiBcIk1NTU0gZG8sIHlcIixcbiAgbWVkaXVtOiBcIk1NTSBkLCB5XCIsXG4gIHNob3J0OiBcIk1NL2RkL3l5eXlcIixcbn07XG5cbmNvbnN0IHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcImg6bW06c3MgYSB6enp6XCIsXG4gIGxvbmc6IFwiaDptbTpzcyBhIHpcIixcbiAgbWVkaXVtOiBcImg6bW06c3MgYVwiLFxuICBzaG9ydDogXCJoOm1tIGFcIixcbn07XG5cbmNvbnN0IGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06IFwie3tkYXRlfX0sIHt7dGltZX19XCIsXG4gIHNob3J0OiBcInt7ZGF0ZX19LCB7e3RpbWV9fVwiLFxufTtcblxuZXhwb3J0IGNvbnN0IGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6IFwiZnVsbFwiLFxuICB9KSxcblxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiBcImZ1bGxcIixcbiAgfSksXG5cbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiBcImZ1bGxcIixcbiAgfSksXG59O1xuIiwiY29uc3QgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiBcIlBcIixcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRSZWxhdGl2ZSA9ICh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpID0+XG4gIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogVGhlIGxvY2FsaXplIGZ1bmN0aW9uIGFyZ3VtZW50IGNhbGxiYWNrIHdoaWNoIGFsbG93cyB0byBjb252ZXJ0IHJhdyB2YWx1ZSB0b1xuICogdGhlIGFjdHVhbCB0eXBlLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKlxuICogQHJldHVybnMgVGhlIGNvbnZlcnRlZCB2YWx1ZVxuICovXG5cbi8qKlxuICogVGhlIG1hcCBvZiBsb2NhbGl6ZWQgdmFsdWVzIGZvciBlYWNoIHdpZHRoLlxuICovXG5cbi8qKlxuICogVGhlIGluZGV4IHR5cGUgb2YgdGhlIGxvY2FsZSB1bml0IHZhbHVlLiBJdCB0eXBlcyBjb252ZXJzaW9uIG9mIHVuaXRzIG9mXG4gKiB2YWx1ZXMgdGhhdCBkb24ndCBzdGFydCBhdCAwIChpLmUuIHF1YXJ0ZXJzKS5cbiAqL1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSB1bml0IHZhbHVlIHRvIHRoZSB0dXBsZSBvZiB2YWx1ZXMuXG4gKi9cblxuLyoqXG4gKiBUaGUgdHVwbGUgb2YgbG9jYWxpemVkIGVyYSB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgQkMsXG4gKiB0aGUgc2Vjb25kIGVsZW1lbnQgcmVwcmVzZW50cyBBRC5cbiAqL1xuXG4vKipcbiAqIFRoZSB0dXBsZSBvZiBsb2NhbGl6ZWQgcXVhcnRlciB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgUTEuXG4gKi9cblxuLyoqXG4gKiBUaGUgdHVwbGUgb2YgbG9jYWxpemVkIGRheSB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgU3VuZGF5LlxuICovXG5cbi8qKlxuICogVGhlIHR1cGxlIG9mIGxvY2FsaXplZCBtb250aCB2YWx1ZXMuIFRoZSBmaXJzdCBlbGVtZW50IHJlcHJlc2VudHMgSmFudWFyeS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRMb2NhbGl6ZUZuKGFyZ3MpIHtcbiAgcmV0dXJuICh2YWx1ZSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSBvcHRpb25zPy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiBcInN0YW5kYWxvbmVcIjtcblxuICAgIGxldCB2YWx1ZXNBcnJheTtcbiAgICBpZiAoY29udGV4dCA9PT0gXCJmb3JtYXR0aW5nXCIgJiYgYXJncy5mb3JtYXR0aW5nVmFsdWVzKSB7XG4gICAgICBjb25zdCBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICBjb25zdCB3aWR0aCA9IG9wdGlvbnM/LndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9XG4gICAgICAgIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgY29uc3Qgd2lkdGggPSBvcHRpb25zPy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IGFyZ3MuYXJndW1lbnRDYWxsYmFjayA/IGFyZ3MuYXJndW1lbnRDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIChzdHJpbmcsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHdpZHRoID0gb3B0aW9ucy53aWR0aDtcblxuICAgIGNvbnN0IG1hdGNoUGF0dGVybiA9XG4gICAgICAod2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSkgfHxcbiAgICAgIGFyZ3MubWF0Y2hQYXR0ZXJuc1thcmdzLmRlZmF1bHRNYXRjaFdpZHRoXTtcbiAgICBjb25zdCBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcblxuICAgIGNvbnN0IHBhcnNlUGF0dGVybnMgPVxuICAgICAgKHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0pIHx8XG4gICAgICBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG5cbiAgICBjb25zdCBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpXG4gICAgICA/IGZpbmRJbmRleChwYXJzZVBhdHRlcm5zLCAocGF0dGVybikgPT4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpKVxuICAgICAgOiAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAtLSBJIGNoYWxsYW5nZSB5b3UgdG8gZml4IHRoZSB0eXBlXG4gICAgICAgIGZpbmRLZXkocGFyc2VQYXR0ZXJucywgKHBhdHRlcm4pID0+IHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKSk7XG5cbiAgICBsZXQgdmFsdWU7XG5cbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrXG4gICAgICA/IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55IC0tIEkgY2hhbGxhbmdlIHlvdSB0byBmaXggdGhlIHR5cGVcbiAgICAgICAgb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKVxuICAgICAgOiB2YWx1ZTtcblxuICAgIGNvbnN0IHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHsgdmFsdWUsIHJlc3QgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoXG4gICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmXG4gICAgICBwcmVkaWNhdGUob2JqZWN0W2tleV0pXG4gICAgKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKGxldCBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBidWlsZE1hdGNoUGF0dGVybkZuKGFyZ3MpIHtcbiAgcmV0dXJuIChzdHJpbmcsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MubWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICBjb25zdCBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG5cbiAgICBjb25zdCBwYXJzZVJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLnBhcnNlUGF0dGVybik7XG4gICAgaWYgKCFwYXJzZVJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgbGV0IHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrXG4gICAgICA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSlcbiAgICAgIDogcGFyc2VSZXN1bHRbMF07XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAtLSBJIGNoYWxsYW5nZSB5b3UgdG8gZml4IHRoZSB0eXBlXG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG5cbiAgICBjb25zdCByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcblxuICAgIHJldHVybiB7IHZhbHVlLCByZXN0IH07XG4gIH07XG59XG4iLCJpbXBvcnQgeyBmb3JtYXREaXN0YW5jZSB9IGZyb20gXCIuL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UubWpzXCI7XG5pbXBvcnQgeyBmb3JtYXRMb25nIH0gZnJvbSBcIi4vZW4tVVMvX2xpYi9mb3JtYXRMb25nLm1qc1wiO1xuaW1wb3J0IHsgZm9ybWF0UmVsYXRpdmUgfSBmcm9tIFwiLi9lbi1VUy9fbGliL2Zvcm1hdFJlbGF0aXZlLm1qc1wiO1xuaW1wb3J0IHsgbG9jYWxpemUgfSBmcm9tIFwiLi9lbi1VUy9fbGliL2xvY2FsaXplLm1qc1wiO1xuaW1wb3J0IHsgbWF0Y2ggfSBmcm9tIFwiLi9lbi1VUy9fbGliL21hdGNoLm1qc1wiO1xuXG4vKipcbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBdKGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwKVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXShodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzKVxuICovXG5leHBvcnQgY29uc3QgZW5VUyA9IHtcbiAgY29kZTogXCJlbi1VU1wiLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDAgLyogU3VuZGF5ICovLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMSxcbiAgfSxcbn07XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZW5VUztcbiIsImltcG9ydCB7IGJ1aWxkTG9jYWxpemVGbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi5tanNcIjtcblxuY29uc3QgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFtcIkJcIiwgXCJBXCJdLFxuICBhYmJyZXZpYXRlZDogW1wiQkNcIiwgXCJBRFwiXSxcbiAgd2lkZTogW1wiQmVmb3JlIENocmlzdFwiLCBcIkFubm8gRG9taW5pXCJdLFxufTtcblxuY29uc3QgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbXCIxXCIsIFwiMlwiLCBcIjNcIiwgXCI0XCJdLFxuICBhYmJyZXZpYXRlZDogW1wiUTFcIiwgXCJRMlwiLCBcIlEzXCIsIFwiUTRcIl0sXG4gIHdpZGU6IFtcIjFzdCBxdWFydGVyXCIsIFwiMm5kIHF1YXJ0ZXJcIiwgXCIzcmQgcXVhcnRlclwiLCBcIjR0aCBxdWFydGVyXCJdLFxufTtcblxuLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4vLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbi8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuY29uc3QgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogW1wiSlwiLCBcIkZcIiwgXCJNXCIsIFwiQVwiLCBcIk1cIiwgXCJKXCIsIFwiSlwiLCBcIkFcIiwgXCJTXCIsIFwiT1wiLCBcIk5cIiwgXCJEXCJdLFxuICBhYmJyZXZpYXRlZDogW1xuICAgIFwiSmFuXCIsXG4gICAgXCJGZWJcIixcbiAgICBcIk1hclwiLFxuICAgIFwiQXByXCIsXG4gICAgXCJNYXlcIixcbiAgICBcIkp1blwiLFxuICAgIFwiSnVsXCIsXG4gICAgXCJBdWdcIixcbiAgICBcIlNlcFwiLFxuICAgIFwiT2N0XCIsXG4gICAgXCJOb3ZcIixcbiAgICBcIkRlY1wiLFxuICBdLFxuXG4gIHdpZGU6IFtcbiAgICBcIkphbnVhcnlcIixcbiAgICBcIkZlYnJ1YXJ5XCIsXG4gICAgXCJNYXJjaFwiLFxuICAgIFwiQXByaWxcIixcbiAgICBcIk1heVwiLFxuICAgIFwiSnVuZVwiLFxuICAgIFwiSnVseVwiLFxuICAgIFwiQXVndXN0XCIsXG4gICAgXCJTZXB0ZW1iZXJcIixcbiAgICBcIk9jdG9iZXJcIixcbiAgICBcIk5vdmVtYmVyXCIsXG4gICAgXCJEZWNlbWJlclwiLFxuICBdLFxufTtcblxuY29uc3QgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFtcIlNcIiwgXCJNXCIsIFwiVFwiLCBcIldcIiwgXCJUXCIsIFwiRlwiLCBcIlNcIl0sXG4gIHNob3J0OiBbXCJTdVwiLCBcIk1vXCIsIFwiVHVcIiwgXCJXZVwiLCBcIlRoXCIsIFwiRnJcIiwgXCJTYVwiXSxcbiAgYWJicmV2aWF0ZWQ6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgd2lkZTogW1xuICAgIFwiU3VuZGF5XCIsXG4gICAgXCJNb25kYXlcIixcbiAgICBcIlR1ZXNkYXlcIixcbiAgICBcIldlZG5lc2RheVwiLFxuICAgIFwiVGh1cnNkYXlcIixcbiAgICBcIkZyaWRheVwiLFxuICAgIFwiU2F0dXJkYXlcIixcbiAgXSxcbn07XG5cbmNvbnN0IGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06IFwiYVwiLFxuICAgIHBtOiBcInBcIixcbiAgICBtaWRuaWdodDogXCJtaVwiLFxuICAgIG5vb246IFwiblwiLFxuICAgIG1vcm5pbmc6IFwibW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImV2ZW5pbmdcIixcbiAgICBuaWdodDogXCJuaWdodFwiLFxuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiBcIkFNXCIsXG4gICAgcG06IFwiUE1cIixcbiAgICBtaWRuaWdodDogXCJtaWRuaWdodFwiLFxuICAgIG5vb246IFwibm9vblwiLFxuICAgIG1vcm5pbmc6IFwibW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImV2ZW5pbmdcIixcbiAgICBuaWdodDogXCJuaWdodFwiLFxuICB9LFxuICB3aWRlOiB7XG4gICAgYW06IFwiYS5tLlwiLFxuICAgIHBtOiBcInAubS5cIixcbiAgICBtaWRuaWdodDogXCJtaWRuaWdodFwiLFxuICAgIG5vb246IFwibm9vblwiLFxuICAgIG1vcm5pbmc6IFwibW9ybmluZ1wiLFxuICAgIGFmdGVybm9vbjogXCJhZnRlcm5vb25cIixcbiAgICBldmVuaW5nOiBcImV2ZW5pbmdcIixcbiAgICBuaWdodDogXCJuaWdodFwiLFxuICB9LFxufTtcblxuY29uc3QgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06IFwiYVwiLFxuICAgIHBtOiBcInBcIixcbiAgICBtaWRuaWdodDogXCJtaVwiLFxuICAgIG5vb246IFwiblwiLFxuICAgIG1vcm5pbmc6IFwiaW4gdGhlIG1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiaW4gdGhlIGFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiaW4gdGhlIGV2ZW5pbmdcIixcbiAgICBuaWdodDogXCJhdCBuaWdodFwiLFxuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiBcIkFNXCIsXG4gICAgcG06IFwiUE1cIixcbiAgICBtaWRuaWdodDogXCJtaWRuaWdodFwiLFxuICAgIG5vb246IFwibm9vblwiLFxuICAgIG1vcm5pbmc6IFwiaW4gdGhlIG1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiaW4gdGhlIGFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiaW4gdGhlIGV2ZW5pbmdcIixcbiAgICBuaWdodDogXCJhdCBuaWdodFwiLFxuICB9LFxuICB3aWRlOiB7XG4gICAgYW06IFwiYS5tLlwiLFxuICAgIHBtOiBcInAubS5cIixcbiAgICBtaWRuaWdodDogXCJtaWRuaWdodFwiLFxuICAgIG5vb246IFwibm9vblwiLFxuICAgIG1vcm5pbmc6IFwiaW4gdGhlIG1vcm5pbmdcIixcbiAgICBhZnRlcm5vb246IFwiaW4gdGhlIGFmdGVybm9vblwiLFxuICAgIGV2ZW5pbmc6IFwiaW4gdGhlIGV2ZW5pbmdcIixcbiAgICBuaWdodDogXCJhdCBuaWdodFwiLFxuICB9LFxufTtcblxuY29uc3Qgb3JkaW5hbE51bWJlciA9IChkaXJ0eU51bWJlciwgX29wdGlvbnMpID0+IHtcbiAgY29uc3QgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIGNvbnN0IHJlbTEwMCA9IG51bWJlciAlIDEwMDtcbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgXCJzdFwiO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgXCJuZFwiO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgXCJyZFwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVtYmVyICsgXCJ0aFwiO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyLFxuXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6IFwid2lkZVwiLFxuICB9KSxcblxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6IFwid2lkZVwiLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IChxdWFydGVyKSA9PiBxdWFydGVyIC0gMSxcbiAgfSksXG5cbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6IFwid2lkZVwiLFxuICB9KSxcblxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiBcIndpZGVcIixcbiAgfSksXG5cbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogXCJ3aWRlXCIsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiBcIndpZGVcIixcbiAgfSksXG59O1xuIiwiaW1wb3J0IHsgYnVpbGRNYXRjaEZuIH0gZnJvbSBcIi4uLy4uL19saWIvYnVpbGRNYXRjaEZuLm1qc1wiO1xuaW1wb3J0IHsgYnVpbGRNYXRjaFBhdHRlcm5GbiB9IGZyb20gXCIuLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4ubWpzXCI7XG5cbmNvbnN0IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG5jb25zdCBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcblxuY29uc3QgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pLFxufTtcbmNvbnN0IHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldLFxufTtcblxuY29uc3QgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaSxcbn07XG5jb25zdCBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV0sXG59O1xuXG5jb25zdCBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaSxcbn07XG5jb25zdCBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogW1xuICAgIC9eai9pLFxuICAgIC9eZi9pLFxuICAgIC9ebS9pLFxuICAgIC9eYS9pLFxuICAgIC9ebS9pLFxuICAgIC9eai9pLFxuICAgIC9eai9pLFxuICAgIC9eYS9pLFxuICAgIC9ecy9pLFxuICAgIC9eby9pLFxuICAgIC9ebi9pLFxuICAgIC9eZC9pLFxuICBdLFxuXG4gIGFueTogW1xuICAgIC9eamEvaSxcbiAgICAvXmYvaSxcbiAgICAvXm1hci9pLFxuICAgIC9eYXAvaSxcbiAgICAvXm1heS9pLFxuICAgIC9eanVuL2ksXG4gICAgL15qdWwvaSxcbiAgICAvXmF1L2ksXG4gICAgL15zL2ksXG4gICAgL15vL2ksXG4gICAgL15uL2ksXG4gICAgL15kL2ksXG4gIF0sXG59O1xuXG5jb25zdCBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pLFxufTtcbmNvbnN0IHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXSxcbn07XG5cbmNvbnN0IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxufTtcbmNvbnN0IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaSxcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiAodmFsdWUpID0+IHBhcnNlSW50KHZhbHVlLCAxMCksXG4gIH0pLFxuXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcIndpZGVcIixcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICB9KSxcblxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcIndpZGVcIixcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogXCJhbnlcIixcbiAgICB2YWx1ZUNhbGxiYWNrOiAoaW5kZXgpID0+IGluZGV4ICsgMSxcbiAgfSksXG5cbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcIndpZGVcIixcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6IFwiYW55XCIsXG4gIH0pLFxuXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiBcIndpZGVcIixcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICB9KSxcblxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogXCJhbnlcIixcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiBcImFueVwiLFxuICB9KSxcbn07XG4iLCJsZXQgZGVmYXVsdE9wdGlvbnMgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhuZXdPcHRpb25zKSB7XG4gIGRlZmF1bHRPcHRpb25zID0gbmV3T3B0aW9ucztcbn1cbiIsImltcG9ydCB7IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyB9IGZyb20gXCIuL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cy5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZZZWFyIH0gZnJvbSBcIi4vc3RhcnRPZlllYXIubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZ2V0RGF5T2ZZZWFyXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGF5IG9mIHRoZSB5ZWFyIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBkYXkgb2YgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBkYXkgb2YgdGhlIHllYXIgaXMgMiBKdWx5IDIwMTQ/XG4gKiBjb25zdCByZXN1bHQgPSBnZXREYXlPZlllYXIobmV3IERhdGUoMjAxNCwgNiwgMikpXG4gKiAvLz0+IDE4M1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF5T2ZZZWFyKGRhdGUpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRpZmYgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoX2RhdGUsIHN0YXJ0T2ZZZWFyKF9kYXRlKSk7XG4gIGNvbnN0IGRheU9mWWVhciA9IGRpZmYgKyAxO1xuICByZXR1cm4gZGF5T2ZZZWFyO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldERheU9mWWVhcjtcbiIsImltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcbmltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZZZWFyXG4gKiBAY2F0ZWdvcnkgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgeWVhciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgeWVhciBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYSB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIHllYXIgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mWWVhcihuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDAwKSlcbiAqIC8vPT4gV2VkIEphbiAwMSAyMDE0IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mWWVhcihkYXRlKSB7XG4gIGNvbnN0IGNsZWFuRGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgX2RhdGUgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBfZGF0ZS5zZXRGdWxsWWVhcihjbGVhbkRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gIF9kYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gX2RhdGU7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgc3RhcnRPZlllYXI7XG4iLCJpbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL19saWIvZGVmYXVsdE9wdGlvbnMubWpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBzdGFydE9mV2Vla30gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFN1biBBdWcgMzEgMjAxNCAwMDowMDowMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0aGUgd2VlayBzdGFydHMgb24gTW9uZGF5LCB0aGUgc3RhcnQgb2YgdGhlIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApLCB7IHdlZWtTdGFydHNPbjogMSB9KVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZXZWVrKGRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICBjb25zdCB3ZWVrU3RhcnRzT24gPVxuICAgIG9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIG9wdGlvbnM/LmxvY2FsZT8ub3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uID8/XG4gICAgZGVmYXVsdE9wdGlvbnMubG9jYWxlPy5vcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICAwO1xuXG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICBjb25zdCBkYXkgPSBfZGF0ZS5nZXREYXkoKTtcbiAgY29uc3QgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG5cbiAgX2RhdGUuc2V0RGF0ZShfZGF0ZS5nZXREYXRlKCkgLSBkaWZmKTtcbiAgX2RhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBfZGF0ZTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mV2VlaztcbiIsImltcG9ydCB7IHN0YXJ0T2ZXZWVrIH0gZnJvbSBcIi4vc3RhcnRPZldlZWsubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgc3RhcnRPZklTT1dlZWtcbiAqIEBjYXRlZ29yeSBJU08gV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgb3JpZ2luYWwgZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhbiBJU08gd2Vla1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mSVNPV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZJU09XZWVrKGRhdGUpIHtcbiAgcmV0dXJuIHN0YXJ0T2ZXZWVrKGRhdGUsIHsgd2Vla1N0YXJ0c09uOiAxIH0pO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZJU09XZWVrO1xuIiwiaW1wb3J0IHsgY29uc3RydWN0RnJvbSB9IGZyb20gXCIuL2NvbnN0cnVjdEZyb20ubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mSVNPV2VlayB9IGZyb20gXCIuL3N0YXJ0T2ZJU09XZWVrLm1qc1wiO1xuaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuXG4vKipcbiAqIEBuYW1lIGdldElTT1dlZWtZZWFyXG4gKiBAY2F0ZWdvcnkgSVNPIFdlZWstTnVtYmVyaW5nIFllYXIgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhciBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUsXG4gKiB3aGljaCBhbHdheXMgc3RhcnRzIDMgZGF5cyBiZWZvcmUgdGhlIHllYXIncyBmaXJzdCBUaHVyc2RheS5cbiAqXG4gKiBJU08gd2Vlay1udW1iZXJpbmcgeWVhcjogaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICpcbiAqIEByZXR1cm5zIFRoZSBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBJU08td2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNT9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldElTT1dlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDAsIDIpKVxuICogLy89PiAyMDA0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJU09XZWVrWWVhcihkYXRlKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICBjb25zdCB5ZWFyID0gX2RhdGUuZ2V0RnVsbFllYXIoKTtcblxuICBjb25zdCBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyID0gY29uc3RydWN0RnJvbShkYXRlLCAwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIGNvbnN0IHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuXG4gIGNvbnN0IGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldEZ1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICBjb25zdCBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcblxuICBpZiAoX2RhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoX2RhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRJU09XZWVrWWVhcjtcbiIsImltcG9ydCB7IG1pbGxpc2Vjb25kc0luV2VlayB9IGZyb20gXCIuL2NvbnN0YW50cy5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZJU09XZWVrIH0gZnJvbSBcIi4vc3RhcnRPZklTT1dlZWsubWpzXCI7XG5pbXBvcnQgeyBzdGFydE9mSVNPV2Vla1llYXIgfSBmcm9tIFwiLi9zdGFydE9mSVNPV2Vla1llYXIubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5cbi8qKlxuICogQG5hbWUgZ2V0SVNPV2Vla1xuICogQGNhdGVnb3J5IElTTyBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgSVNPIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIElTTyB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT193ZWVrX2RhdGVcbiAqXG4gKiBAdHlwZVBhcmFtIERhdGVUeXBlIC0gVGhlIGBEYXRlYCB0eXBlLCB0aGUgZnVuY3Rpb24gb3BlcmF0ZXMgb24uIEdldHMgaW5mZXJyZWQgZnJvbSBwYXNzZWQgYXJndW1lbnRzLiBBbGxvd3MgdG8gdXNlIGV4dGVuc2lvbnMgbGlrZSBbYFVUQ0RhdGVgXShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvdXRjKS5cbiAqXG4gKiBAcGFyYW0gZGF0ZSAtIFRoZSBnaXZlbiBkYXRlXG4gKlxuICogQHJldHVybnMgVGhlIElTTyB3ZWVrXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHdlZWsgb2YgdGhlIElTTy13ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDIgSmFudWFyeSAyMDA1P1xuICogY29uc3QgcmVzdWx0ID0gZ2V0SVNPV2VlayhuZXcgRGF0ZSgyMDA1LCAwLCAyKSlcbiAqIC8vPT4gNTNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldElTT1dlZWsoZGF0ZSkge1xuICBjb25zdCBfZGF0ZSA9IHRvRGF0ZShkYXRlKTtcbiAgY29uc3QgZGlmZiA9ICtzdGFydE9mSVNPV2VlayhfZGF0ZSkgLSArc3RhcnRPZklTT1dlZWtZZWFyKF9kYXRlKTtcblxuICAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIHdlZWtzIHRvIHRoZSBuZWFyZXN0IGludGVnZXIgYmVjYXVzZSB0aGUgbnVtYmVyIG9mXG4gIC8vIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50IChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mXG4gIC8vIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdCkuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBtaWxsaXNlY29uZHNJbldlZWspICsgMTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBnZXRJU09XZWVrO1xuIiwiaW1wb3J0IHsgZ2V0SVNPV2Vla1llYXIgfSBmcm9tIFwiLi9nZXRJU09XZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZJU09XZWVrIH0gZnJvbSBcIi4vc3RhcnRPZklTT1dlZWsubWpzXCI7XG5pbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5tanNcIjtcblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mSVNPV2Vla1llYXJcbiAqIEBjYXRlZ29yeSBJU08gV2Vlay1OdW1iZXJpbmcgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsXG4gKiB3aGljaCBhbHdheXMgc3RhcnRzIDMgZGF5cyBiZWZvcmUgdGhlIHllYXIncyBmaXJzdCBUaHVyc2RheS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogSVNPIHdlZWstbnVtYmVyaW5nIHllYXI6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqXG4gKiBAcmV0dXJucyBUaGUgc3RhcnQgb2YgYW4gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGFuIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyIGZvciAyIEp1bHkgMjAwNTpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZJU09XZWVrWWVhcihuZXcgRGF0ZSgyMDA1LCA2LCAyKSlcbiAqIC8vPT4gTW9uIEphbiAwMyAyMDA1IDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mSVNPV2Vla1llYXIoZGF0ZSkge1xuICBjb25zdCB5ZWFyID0gZ2V0SVNPV2Vla1llYXIoZGF0ZSk7XG4gIGNvbnN0IGZvdXJ0aE9mSmFudWFyeSA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gc3RhcnRPZklTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBzdGFydE9mSVNPV2Vla1llYXI7XG4iLCJpbXBvcnQgeyBjb25zdHJ1Y3RGcm9tIH0gZnJvbSBcIi4vY29uc3RydWN0RnJvbS5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZXZWVrIH0gZnJvbSBcIi4vc3RhcnRPZldlZWsubWpzXCI7XG5pbXBvcnQgeyB0b0RhdGUgfSBmcm9tIFwiLi90b0RhdGUubWpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL19saWIvZGVmYXVsdE9wdGlvbnMubWpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBnZXRXZWVrWWVhcn0gZnVuY3Rpb24gb3B0aW9ucy5cbiAqL1xuXG4vKipcbiAqIEBuYW1lIGdldFdlZWtZZWFyXG4gKiBAY2F0ZWdvcnkgV2Vlay1OdW1iZXJpbmcgWWVhciBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgZXhhY3QgY2FsY3VsYXRpb24gZGVwZW5kcyBvbiB0aGUgdmFsdWVzIG9mXG4gKiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gICh3aGljaCBpcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaylcbiAqIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgICh3aGljaCBpcyB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzIGFsd2F5cyBpblxuICogdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIpXG4gKlxuICogV2VlayBudW1iZXJpbmc6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dlZWsjVGhlX0lTT193ZWVrX2RhdGVfc3lzdGVtXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICpcbiAqIEByZXR1cm5zIFRoZSBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMjYgRGVjZW1iZXIgMjAwNCB3aXRoIHRoZSBkZWZhdWx0IHNldHRpbmdzP1xuICogY29uc3QgcmVzdWx0ID0gZ2V0V2Vla1llYXIobmV3IERhdGUoMjAwNCwgMTEsIDI2KSlcbiAqIC8vPT4gMjAwNVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCB3ZWVrIG51bWJlcmluZyB5ZWFyIGlzIDI2IERlY2VtYmVyIDIwMDQgaWYgd2VlayBzdGFydHMgb24gU2F0dXJkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRXZWVrWWVhcihuZXcgRGF0ZSgyMDA0LCAxMSwgMjYpLCB7IHdlZWtTdGFydHNPbjogNiB9KVxuICogLy89PiAyMDA0XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHdlZWsgbnVtYmVyaW5nIHllYXIgaXMgMjYgRGVjZW1iZXIgMjAwNCBpZiB0aGUgZmlyc3Qgd2VlayBjb250YWlucyA0IEphbnVhcnk/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRXZWVrWWVhcihuZXcgRGF0ZSgyMDA0LCAxMSwgMjYpLCB7IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogNCB9KVxuICogLy89PiAyMDA0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrWWVhcihkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IF9kYXRlID0gdG9EYXRlKGRhdGUpO1xuICBjb25zdCB5ZWFyID0gX2RhdGUuZ2V0RnVsbFllYXIoKTtcblxuICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIGNvbnN0IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9XG4gICAgb3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgb3B0aW9ucz8ubG9jYWxlPy5vcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBkZWZhdWx0T3B0aW9ucy5sb2NhbGU/Lm9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIDE7XG5cbiAgY29uc3QgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0RnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIGNvbnN0IHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZXZWVrKGZpcnN0V2Vla09mTmV4dFllYXIsIG9wdGlvbnMpO1xuXG4gIGNvbnN0IGZpcnN0V2Vla09mVGhpc1llYXIgPSBjb25zdHJ1Y3RGcm9tKGRhdGUsIDApO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldEZ1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIGNvbnN0IHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIG9wdGlvbnMpO1xuXG4gIGlmIChfZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChfZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IGdldFdlZWtZZWFyO1xuIiwiaW1wb3J0IHsgbWlsbGlzZWNvbmRzSW5XZWVrIH0gZnJvbSBcIi4vY29uc3RhbnRzLm1qc1wiO1xuaW1wb3J0IHsgc3RhcnRPZldlZWsgfSBmcm9tIFwiLi9zdGFydE9mV2Vlay5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZXZWVrWWVhciB9IGZyb20gXCIuL3N0YXJ0T2ZXZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IHRvRGF0ZSB9IGZyb20gXCIuL3RvRGF0ZS5tanNcIjtcblxuLyoqXG4gKiBUaGUge0BsaW5rIGdldFdlZWt9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBnZXRXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIGxvY2FsIHdlZWsgaW5kZXggb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIGxvY2FsIHdlZWsgaW5kZXggb2YgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgZXhhY3QgY2FsY3VsYXRpb24gZGVwZW5kcyBvbiB0aGUgdmFsdWVzIG9mXG4gKiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gICh3aGljaCBpcyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlaylcbiAqIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgICh3aGljaCBpcyB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzIGFsd2F5cyBpblxuICogdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIpXG4gKlxuICogV2VlayBudW1iZXJpbmc6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dlZWsjVGhlX0lTT193ZWVrX2RhdGVfc3lzdGVtXG4gKlxuICogQHR5cGVQYXJhbSBEYXRlVHlwZSAtIFRoZSBgRGF0ZWAgdHlwZSwgdGhlIGZ1bmN0aW9uIG9wZXJhdGVzIG9uLiBHZXRzIGluZmVycmVkIGZyb20gcGFzc2VkIGFyZ3VtZW50cy4gQWxsb3dzIHRvIHVzZSBleHRlbnNpb25zIGxpa2UgW2BVVENEYXRlYF0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL3V0YykuXG4gKlxuICogQHBhcmFtIGRhdGUgLSBUaGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIHdlZWtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgbG9jYWwgd2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNSB3aXRoIGRlZmF1bHQgb3B0aW9ucz9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldFdlZWsobmV3IERhdGUoMjAwNSwgMCwgMikpXG4gKiAvLz0+IDJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hpY2ggd2VlayBvZiB0aGUgbG9jYWwgd2VlayBudW1iZXJpbmcgeWVhciBpcyAyIEphbnVhcnkgMjAwNSxcbiAqIC8vIGlmIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLFxuICogLy8gYW5kIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyIGFsd2F5cyBjb250YWlucyA0IEphbnVhcnk/XG4gKiBjb25zdCByZXN1bHQgPSBnZXRXZWVrKG5ldyBEYXRlKDIwMDUsIDAsIDIpLCB7XG4gKiAgIHdlZWtTdGFydHNPbjogMSxcbiAqICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gKiB9KVxuICogLy89PiA1M1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrKGRhdGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgX2RhdGUgPSB0b0RhdGUoZGF0ZSk7XG4gIGNvbnN0IGRpZmYgPSArc3RhcnRPZldlZWsoX2RhdGUsIG9wdGlvbnMpIC0gK3N0YXJ0T2ZXZWVrWWVhcihfZGF0ZSwgb3B0aW9ucyk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiB3ZWVrcyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyIGJlY2F1c2UgdGhlIG51bWJlciBvZlxuICAvLyBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudCAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZlxuICAvLyB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpLlxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gbWlsbGlzZWNvbmRzSW5XZWVrKSArIDE7XG59XG5cbi8vIEZhbGxiYWNrIGZvciBtb2R1bGFyaXplZCBpbXBvcnRzOlxuZXhwb3J0IGRlZmF1bHQgZ2V0V2VlaztcbiIsImltcG9ydCB7IGNvbnN0cnVjdEZyb20gfSBmcm9tIFwiLi9jb25zdHJ1Y3RGcm9tLm1qc1wiO1xuaW1wb3J0IHsgZ2V0V2Vla1llYXIgfSBmcm9tIFwiLi9nZXRXZWVrWWVhci5tanNcIjtcbmltcG9ydCB7IHN0YXJ0T2ZXZWVrIH0gZnJvbSBcIi4vc3RhcnRPZldlZWsubWpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuL19saWIvZGVmYXVsdE9wdGlvbnMubWpzXCI7XG5cbi8qKlxuICogVGhlIHtAbGluayBzdGFydE9mV2Vla1llYXJ9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mV2Vla1llYXJcbiAqIEBjYXRlZ29yeSBXZWVrLU51bWJlcmluZyBZZWFyIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogVGhlIGV4YWN0IGNhbGN1bGF0aW9uIGRlcGVuZHMgb24gdGhlIHZhbHVlcyBvZlxuICogYG9wdGlvbnMud2Vla1N0YXJ0c09uYCAod2hpY2ggaXMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWspXG4gKiBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAod2hpY2ggaXMgdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpcyBhbHdheXMgaW5cbiAqIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyKVxuICpcbiAqIFdlZWsgbnVtYmVyaW5nOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9XZWVrI1RoZV9JU09fd2Vla19kYXRlX3N5c3RlbVxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSBvcHRpb25zIC0gQW4gb2JqZWN0IHdpdGggb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIFRoZSBzdGFydCBvZiBhIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGFuIGEgd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgMiBKdWx5IDIwMDUgd2l0aCBkZWZhdWx0IHNldHRpbmdzOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDYsIDIpKVxuICogLy89PiBTdW4gRGVjIDI2IDIwMDQgMDA6MDA6MDBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgd2Vlay1udW1iZXJpbmcgeWVhciBmb3IgMiBKdWx5IDIwMDVcbiAqIC8vIGlmIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHdlZWtcbiAqIC8vIGFuZCA0IEphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWtZZWFyKG5ldyBEYXRlKDIwMDUsIDYsIDIpLCB7XG4gKiAgIHdlZWtTdGFydHNPbjogMSxcbiAqICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiA0XG4gKiB9KVxuICogLy89PiBNb24gSmFuIDAzIDIwMDUgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0T2ZXZWVrWWVhcihkYXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgY29uc3QgZmlyc3RXZWVrQ29udGFpbnNEYXRlID1cbiAgICBvcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBvcHRpb25zPy5sb2NhbGU/Lm9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgMTtcblxuICBjb25zdCB5ZWFyID0gZ2V0V2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7XG4gIGNvbnN0IGZpcnN0V2VlayA9IGNvbnN0cnVjdEZyb20oZGF0ZSwgMCk7XG4gIGZpcnN0V2Vlay5zZXRGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIGNvbnN0IF9kYXRlID0gc3RhcnRPZldlZWsoZmlyc3RXZWVrLCBvcHRpb25zKTtcbiAgcmV0dXJuIF9kYXRlO1xufVxuXG4vLyBGYWxsYmFjayBmb3IgbW9kdWxhcml6ZWQgaW1wb3J0czpcbmV4cG9ydCBkZWZhdWx0IHN0YXJ0T2ZXZWVrWWVhcjtcbiIsImV4cG9ydCBmdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgY29uc3Qgc2lnbiA9IG51bWJlciA8IDAgPyBcIi1cIiA6IFwiXCI7XG4gIGNvbnN0IG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKS5wYWRTdGFydCh0YXJnZXRMZW5ndGgsIFwiMFwiKTtcbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59XG4iLCJpbXBvcnQgeyBhZGRMZWFkaW5nWmVyb3MgfSBmcm9tIFwiLi4vYWRkTGVhZGluZ1plcm9zLm1qc1wiO1xuXG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG5leHBvcnQgY29uc3QgbGlnaHRGb3JtYXR0ZXJzID0ge1xuICAvLyBZZWFyXG4gIHkoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcblxuICAgIGNvbnN0IHNpZ25lZFllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICBjb25zdCB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gXCJ5eVwiID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gTW9udGhcbiAgTShkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IG1vbnRoID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHJldHVybiB0b2tlbiA9PT0gXCJNXCIgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXREYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gQU0gb3IgUE1cbiAgYShkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0SG91cnMoKSAvIDEyID49IDEgPyBcInBtXCIgOiBcImFtXCI7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlIFwiYVwiOlxuICAgICAgY2FzZSBcImFhXCI6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcbiAgICAgIGNhc2UgXCJhYWFcIjpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZTtcbiAgICAgIGNhc2UgXCJhYWFhYVwiOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuICAgICAgY2FzZSBcImFhYWFcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09IFwiYW1cIiA/IFwiYS5tLlwiIDogXCJwLm0uXCI7XG4gICAgfVxuICB9LFxuXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0SG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBNaW51dGVcbiAgbShkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gU2Vjb25kXG4gIHMoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0U2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTKGRhdGUsIHRva2VuKSB7XG4gICAgY29uc3QgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgY29uc3QgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICBjb25zdCBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGgudHJ1bmMoXG4gICAgICBtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSxcbiAgICApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG59O1xuIiwiaW1wb3J0IHsgZ2V0RGF5T2ZZZWFyIH0gZnJvbSBcIi4uLy4uL2dldERheU9mWWVhci5tanNcIjtcbmltcG9ydCB7IGdldElTT1dlZWsgfSBmcm9tIFwiLi4vLi4vZ2V0SVNPV2Vlay5tanNcIjtcbmltcG9ydCB7IGdldElTT1dlZWtZZWFyIH0gZnJvbSBcIi4uLy4uL2dldElTT1dlZWtZZWFyLm1qc1wiO1xuaW1wb3J0IHsgZ2V0V2VlayB9IGZyb20gXCIuLi8uLi9nZXRXZWVrLm1qc1wiO1xuaW1wb3J0IHsgZ2V0V2Vla1llYXIgfSBmcm9tIFwiLi4vLi4vZ2V0V2Vla1llYXIubWpzXCI7XG5pbXBvcnQgeyBhZGRMZWFkaW5nWmVyb3MgfSBmcm9tIFwiLi4vYWRkTGVhZGluZ1plcm9zLm1qc1wiO1xuaW1wb3J0IHsgbGlnaHRGb3JtYXR0ZXJzIH0gZnJvbSBcIi4vbGlnaHRGb3JtYXR0ZXJzLm1qc1wiO1xuXG5jb25zdCBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogXCJhbVwiLFxuICBwbTogXCJwbVwiLFxuICBtaWRuaWdodDogXCJtaWRuaWdodFwiLFxuICBub29uOiBcIm5vb25cIixcbiAgbW9ybmluZzogXCJtb3JuaW5nXCIsXG4gIGFmdGVybm9vbjogXCJhZnRlcm5vb25cIixcbiAgZXZlbmluZzogXCJldmVuaW5nXCIsXG4gIG5pZ2h0OiBcIm5pZ2h0XCIsXG59O1xuXG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cblxuZXhwb3J0IGNvbnN0IGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgZXJhID0gZGF0ZS5nZXRGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSBcIkdcIjpcbiAgICAgIGNhc2UgXCJHR1wiOlxuICAgICAgY2FzZSBcIkdHR1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwgeyB3aWR0aDogXCJhYmJyZXZpYXRlZFwiIH0pO1xuICAgICAgLy8gQSwgQlxuICAgICAgY2FzZSBcIkdHR0dHXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7IHdpZHRoOiBcIm5hcnJvd1wiIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcbiAgICAgIGNhc2UgXCJHR0dHXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwgeyB3aWR0aDogXCJ3aWRlXCIgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSBcInlvXCIpIHtcbiAgICAgIGNvbnN0IHNpZ25lZFllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuICAgICAgY29uc3QgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwgeyB1bml0OiBcInllYXJcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHNpZ25lZFdlZWtZZWFyID0gZ2V0V2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICBjb25zdCB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyO1xuXG4gICAgLy8gVHdvIGRpZ2l0IHllYXJcbiAgICBpZiAodG9rZW4gPT09IFwiWVlcIikge1xuICAgICAgY29uc3QgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfVxuXG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09IFwiWW9cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHsgdW5pdDogXCJ5ZWFyXCIgfSk7XG4gICAgfVxuXG4gICAgLy8gUGFkZGluZ1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgY29uc3QgaXNvV2Vla1llYXIgPSBnZXRJU09XZWVrWWVhcihkYXRlKTtcblxuICAgIC8vIFBhZGRpbmdcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0TW9udGgoKSArIDEpIC8gMyk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSBcIlFcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlIFwiUVFcIjpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuICAgICAgY2FzZSBcIlFvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHsgdW5pdDogXCJxdWFydGVyXCIgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuICAgICAgY2FzZSBcIlFRUVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcbiAgICAgIGNhc2UgXCJRUVFRUVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwibmFycm93XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgXCJRUVFRXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRNb250aCgpICsgMSkgLyAzKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlIFwicVwiOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcbiAgICAgIGNhc2UgXCJxcVwiOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG4gICAgICBjYXNlIFwicW9cIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwgeyB1bml0OiBcInF1YXJ0ZXJcIiB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG4gICAgICBjYXNlIFwicXFxXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuICAgICAgY2FzZSBcInFxcXFxXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuICAgICAgY2FzZSBcInFxcXFcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogXCJ3aWRlXCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBcIk1cIjpcbiAgICAgIGNhc2UgXCJNTVwiOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuICAgICAgY2FzZSBcIk1vXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwgeyB1bml0OiBcIm1vbnRoXCIgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcbiAgICAgIGNhc2UgXCJNTU1cIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcbiAgICAgIGNhc2UgXCJNTU1NTVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuICAgICAgY2FzZSBcIk1NTU1cIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwgeyB3aWR0aDogXCJ3aWRlXCIsIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgbW9udGggPSBkYXRlLmdldE1vbnRoKCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSBcIkxcIjpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG4gICAgICBjYXNlIFwiTExcIjpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuICAgICAgY2FzZSBcIkxvXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwgeyB1bml0OiBcIm1vbnRoXCIgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcbiAgICAgIGNhc2UgXCJMTExcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcbiAgICAgIGNhc2UgXCJMTExMTFwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuICAgICAgY2FzZSBcIkxMTExcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwgeyB3aWR0aDogXCJ3aWRlXCIsIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHdlZWsgPSBnZXRXZWVrKGRhdGUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHRva2VuID09PSBcIndvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHsgdW5pdDogXCJ3ZWVrXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGlzb1dlZWsgPSBnZXRJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSBcIklvXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb1dlZWssIHsgdW5pdDogXCJ3ZWVrXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gXCJkb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldERhdGUoKSwgeyB1bml0OiBcImRhdGVcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmQoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBkYXlPZlllYXIgPSBnZXREYXlPZlllYXIoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09IFwiRG9cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF5T2ZZZWFyLCB7IHVuaXQ6IFwiZGF5T2ZZZWFyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGRheU9mV2VlayA9IGRhdGUuZ2V0RGF5KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlIFwiRVwiOlxuICAgICAgY2FzZSBcIkVFXCI6XG4gICAgICBjYXNlIFwiRUVFXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlIFwiRUVFRUVcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSBcIkVFRUVFRVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcInNob3J0XCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuICAgICAgY2FzZSBcIkVFRUVcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwid2lkZVwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRheU9mV2VlayA9IGRhdGUuZ2V0RGF5KCk7XG4gICAgY29uc3QgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgXCJlXCI6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuICAgICAgY2FzZSBcImVlXCI6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG4gICAgICBjYXNlIFwiZW9cIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHsgdW5pdDogXCJkYXlcIiB9KTtcbiAgICAgIGNhc2UgXCJlZWVcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgXCJlZWVlZVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcIm5hcnJvd1wiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlIFwiZWVlZWVlXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwic2hvcnRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlIFwiZWVlZVwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJ3aWRlXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZGF5T2ZXZWVrID0gZGF0ZS5nZXREYXkoKTtcbiAgICBjb25zdCBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlIFwiY1wiOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgXCJjY1wiOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG4gICAgICBjYXNlIFwiY29cIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHsgdW5pdDogXCJkYXlcIiB9KTtcbiAgICAgIGNhc2UgXCJjY2NcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgXCJjY2NjY1wiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcIm5hcnJvd1wiLFxuICAgICAgICAgIGNvbnRleHQ6IFwic3RhbmRhbG9uZVwiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlIFwiY2NjY2NjXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwic2hvcnRcIixcbiAgICAgICAgICBjb250ZXh0OiBcInN0YW5kYWxvbmVcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlIFwiY2NjY1wiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJ3aWRlXCIsXG4gICAgICAgICAgY29udGV4dDogXCJzdGFuZGFsb25lXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGRheU9mV2VlayA9IGRhdGUuZ2V0RGF5KCk7XG4gICAgY29uc3QgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlIFwiaVwiOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGlzb0RheU9mV2Vlayk7XG4gICAgICAvLyAwMlxuICAgICAgY2FzZSBcImlpXCI6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG4gICAgICBjYXNlIFwiaW9cIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7IHVuaXQ6IFwiZGF5XCIgfSk7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgXCJpaWlcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIFRcbiAgICAgIGNhc2UgXCJpaWlpaVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiBcIm5hcnJvd1wiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlIFwiaWlpaWlpXCI6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6IFwic2hvcnRcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlIFwiaWlpaVwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogXCJ3aWRlXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgY29uc3QgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gXCJwbVwiIDogXCJhbVwiO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBcImFcIjpcbiAgICAgIGNhc2UgXCJhYVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBcImFhYVwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemVcbiAgICAgICAgICAuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYXNlIFwiYWFhYWFcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICBjYXNlIFwiYWFhYVwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJ3aWRlXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICBsZXQgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyBcInBtXCIgOiBcImFtXCI7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSBcImJcIjpcbiAgICAgIGNhc2UgXCJiYlwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiBcImFiYnJldmlhdGVkXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSBcImJiYlwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemVcbiAgICAgICAgICAuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgICAgd2lkdGg6IFwiYWJicmV2aWF0ZWRcIixcbiAgICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjYXNlIFwiYmJiYmJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJuYXJyb3dcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgICBjYXNlIFwiYmJiYlwiOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJ3aWRlXCIsXG4gICAgICAgICAgY29udGV4dDogXCJmb3JtYXR0aW5nXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBjb25zdCBob3VycyA9IGRhdGUuZ2V0SG91cnMoKTtcbiAgICBsZXQgZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgXCJCXCI6XG4gICAgICBjYXNlIFwiQkJcIjpcbiAgICAgIGNhc2UgXCJCQkJcIjpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogXCJhYmJyZXZpYXRlZFwiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJCQkJCQlwiOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiBcIm5hcnJvd1wiLFxuICAgICAgICAgIGNvbnRleHQ6IFwiZm9ybWF0dGluZ1wiLFxuICAgICAgICB9KTtcbiAgICAgIGNhc2UgXCJCQkJCXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiBcIndpZGVcIixcbiAgICAgICAgICBjb250ZXh0OiBcImZvcm1hdHRpbmdcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09IFwiaG9cIikge1xuICAgICAgbGV0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3VycywgeyB1bml0OiBcImhvdXJcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09IFwiSG9cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRIb3VycygpLCB7IHVuaXQ6IFwiaG91clwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG5cbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGNvbnN0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09IFwiS29cIikge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHsgdW5pdDogXCJob3VyXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcblxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgbGV0IGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAyNDtcblxuICAgIGlmICh0b2tlbiA9PT0gXCJrb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3VycywgeyB1bml0OiBcImhvdXJcIiB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSBcIm1vXCIpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0TWludXRlcygpLCB7IHVuaXQ6IFwibWludXRlXCIgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcblxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gXCJzb1wiKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFNlY29uZHMoKSwgeyB1bml0OiBcInNlY29uZFwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG5cbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuUyhkYXRlLCB0b2tlbik7XG4gIH0sXG5cbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUpIHtcbiAgICBjb25zdCB0aW1lem9uZU9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFwiWlwiO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlIFwiWFwiOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG4gICAgICBjYXNlIFwiWFhYWFwiOlxuICAgICAgY2FzZSBcIlhYXCI6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG4gICAgICBjYXNlIFwiWFhYWFhcIjpcbiAgICAgIGNhc2UgXCJYWFhcIjogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUpIHtcbiAgICBjb25zdCB0aW1lem9uZU9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlIFwieFwiOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHhgXG4gICAgICBjYXNlIFwieHh4eFwiOlxuICAgICAgY2FzZSBcInh4XCI6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG4gICAgICBjYXNlIFwieHh4eHhcIjpcbiAgICAgIGNhc2UgXCJ4eHhcIjogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUpIHtcbiAgICBjb25zdCB0aW1lem9uZU9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlIFwiT1wiOlxuICAgICAgY2FzZSBcIk9PXCI6XG4gICAgICBjYXNlIFwiT09PXCI6XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgXCI6XCIpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSBcIk9PT09cIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUpIHtcbiAgICBjb25zdCB0aW1lem9uZU9mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlIFwielwiOlxuICAgICAgY2FzZSBcInp6XCI6XG4gICAgICBjYXNlIFwienp6XCI6XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgXCI6XCIpO1xuICAgICAgLy8gTG9uZ1xuICAgICAgY2FzZSBcInp6enpcIjpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsIFwiOlwiKTtcbiAgICB9XG4gIH0sXG5cbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUpIHtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBNYXRoLnRydW5jKGRhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG5cbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSkge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxufTtcblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRlbGltaXRlciA9IFwiXCIpIHtcbiAgY29uc3Qgc2lnbiA9IG9mZnNldCA+IDAgPyBcIi1cIiA6IFwiK1wiO1xuICBjb25zdCBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICBjb25zdCBob3VycyA9IE1hdGgudHJ1bmMoYWJzT2Zmc2V0IC8gNjApO1xuICBjb25zdCBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG4gIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpO1xuICB9XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIGNvbnN0IHNpZ24gPSBvZmZzZXQgPiAwID8gXCItXCIgOiBcIitcIjtcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGVsaW1pdGVyID0gXCJcIikge1xuICBjb25zdCBzaWduID0gb2Zmc2V0ID4gMCA/IFwiLVwiIDogXCIrXCI7XG4gIGNvbnN0IGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIGNvbnN0IGhvdXJzID0gYWRkTGVhZGluZ1plcm9zKE1hdGgudHJ1bmMoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgY29uc3QgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuIiwiY29uc3QgZGF0ZUxvbmdGb3JtYXR0ZXIgPSAocGF0dGVybiwgZm9ybWF0TG9uZykgPT4ge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlIFwiUFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiBcInNob3J0XCIgfSk7XG4gICAgY2FzZSBcIlBQXCI6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHsgd2lkdGg6IFwibWVkaXVtXCIgfSk7XG4gICAgY2FzZSBcIlBQUFwiOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7IHdpZHRoOiBcImxvbmdcIiB9KTtcbiAgICBjYXNlIFwiUFBQUFwiOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHsgd2lkdGg6IFwiZnVsbFwiIH0pO1xuICB9XG59O1xuXG5jb25zdCB0aW1lTG9uZ0Zvcm1hdHRlciA9IChwYXR0ZXJuLCBmb3JtYXRMb25nKSA9PiB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgXCJwXCI6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHsgd2lkdGg6IFwic2hvcnRcIiB9KTtcbiAgICBjYXNlIFwicHBcIjpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoeyB3aWR0aDogXCJtZWRpdW1cIiB9KTtcbiAgICBjYXNlIFwicHBwXCI6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHsgd2lkdGg6IFwibG9uZ1wiIH0pO1xuICAgIGNhc2UgXCJwcHBwXCI6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoeyB3aWR0aDogXCJmdWxsXCIgfSk7XG4gIH1cbn07XG5cbmNvbnN0IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlciA9IChwYXR0ZXJuLCBmb3JtYXRMb25nKSA9PiB7XG4gIGNvbnN0IG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/LykgfHwgW107XG4gIGNvbnN0IGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIGNvbnN0IHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG5cbiAgaWYgKCF0aW1lUGF0dGVybikge1xuICAgIHJldHVybiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKTtcbiAgfVxuXG4gIGxldCBkYXRlVGltZUZvcm1hdDtcblxuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSBcIlBcIjpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7IHdpZHRoOiBcInNob3J0XCIgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiUFBcIjpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7IHdpZHRoOiBcIm1lZGl1bVwiIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlBQUFwiOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHsgd2lkdGg6IFwibG9uZ1wiIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIlBQUFBcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHsgd2lkdGg6IFwiZnVsbFwiIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gZGF0ZVRpbWVGb3JtYXRcbiAgICAucmVwbGFjZShcInt7ZGF0ZX19XCIsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSlcbiAgICAucmVwbGFjZShcInt7dGltZX19XCIsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59O1xuXG5leHBvcnQgY29uc3QgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIsXG59O1xuIiwiY29uc3QgZGF5T2ZZZWFyVG9rZW5SRSA9IC9eRCskLztcbmNvbnN0IHdlZWtZZWFyVG9rZW5SRSA9IC9eWSskLztcblxuY29uc3QgdGhyb3dUb2tlbnMgPSBbXCJEXCIsIFwiRERcIiwgXCJZWVwiLCBcIllZWVlcIl07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBkYXlPZlllYXJUb2tlblJFLnRlc3QodG9rZW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiB3ZWVrWWVhclRva2VuUkUudGVzdCh0b2tlbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXJuT3JUaHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGNvbnN0IF9tZXNzYWdlID0gbWVzc2FnZSh0b2tlbiwgZm9ybWF0LCBpbnB1dCk7XG4gIGNvbnNvbGUud2FybihfbWVzc2FnZSk7XG4gIGlmICh0aHJvd1Rva2Vucy5pbmNsdWRlcyh0b2tlbikpIHRocm93IG5ldyBSYW5nZUVycm9yKF9tZXNzYWdlKTtcbn1cblxuZnVuY3Rpb24gbWVzc2FnZSh0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBjb25zdCBzdWJqZWN0ID0gdG9rZW5bMF0gPT09IFwiWVwiID8gXCJ5ZWFyc1wiIDogXCJkYXlzIG9mIHRoZSBtb250aFwiO1xuICByZXR1cm4gYFVzZSBcXGAke3Rva2VuLnRvTG93ZXJDYXNlKCl9XFxgIGluc3RlYWQgb2YgXFxgJHt0b2tlbn1cXGAgKGluIFxcYCR7Zm9ybWF0fVxcYCkgZm9yIGZvcm1hdHRpbmcgJHtzdWJqZWN0fSB0byB0aGUgaW5wdXQgXFxgJHtpbnB1dH1cXGA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZGA7XG59XG4iLCJpbXBvcnQgeyBkZWZhdWx0TG9jYWxlIH0gZnJvbSBcIi4vX2xpYi9kZWZhdWx0TG9jYWxlLm1qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi9fbGliL2RlZmF1bHRPcHRpb25zLm1qc1wiO1xuaW1wb3J0IHsgZm9ybWF0dGVycyB9IGZyb20gXCIuL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMubWpzXCI7XG5pbXBvcnQgeyBsb25nRm9ybWF0dGVycyB9IGZyb20gXCIuL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzLm1qc1wiO1xuaW1wb3J0IHtcbiAgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbixcbiAgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLFxuICB3YXJuT3JUaHJvd1Byb3RlY3RlZEVycm9yLFxufSBmcm9tIFwiLi9fbGliL3Byb3RlY3RlZFRva2Vucy5tanNcIjtcbmltcG9ydCB7IGlzVmFsaWQgfSBmcm9tIFwiLi9pc1ZhbGlkLm1qc1wiO1xuaW1wb3J0IHsgdG9EYXRlIH0gZnJvbSBcIi4vdG9EYXRlLm1qc1wiO1xuXG4vLyBSZXhwb3J0cyBvZiBpbnRlcm5hbCBmb3IgbGlicmFyaWVzIHRvIHVzZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNjM4I2lzc3VlY29tbWVudC0xODc3MDgyODc0XG5leHBvcnQgeyBmb3JtYXR0ZXJzLCBsb25nRm9ybWF0dGVycyB9O1xuXG4vLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcbmNvbnN0IGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPVxuICAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG5cbi8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcbmNvbnN0IGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG5cbmNvbnN0IGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbmNvbnN0IGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG5jb25zdCB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG5cbmV4cG9ydCB7IGZvcm1hdCBhcyBmb3JtYXREYXRlIH07XG5cbi8qKlxuICogVGhlIHtAbGluayBmb3JtYXR9IGZ1bmN0aW9uIG9wdGlvbnMuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBhbGlhcyBmb3JtYXREYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWEgICAgIHwgYW0sIHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYiAgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiICAgICB8IGFtLCBwbSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNC8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgQXByIDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA0LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBBcHIgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJdKGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXIpXG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXShodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyKSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3VycmVudGx5IHVuYXZhaWxhYmxlIGluIGBkYXRlLWZuc2AsXG4gKiAgICBzbyByaWdodCBub3cgdGhlc2UgdG9rZW5zIGZhbGwgYmFjayB0byBHTVQgdGltZXpvbmVzLlxuICpcbiAqIDcuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYHRgOiBzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgVGA6IG1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogOC4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIEB0eXBlUGFyYW0gRGF0ZVR5cGUgLSBUaGUgYERhdGVgIHR5cGUsIHRoZSBmdW5jdGlvbiBvcGVyYXRlcyBvbi4gR2V0cyBpbmZlcnJlZCBmcm9tIHBhc3NlZCBhcmd1bWVudHMuIEFsbG93cyB0byB1c2UgZXh0ZW5zaW9ucyBsaWtlIFtgVVRDRGF0ZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy91dGMpLlxuICpcbiAqIEBwYXJhbSBkYXRlIC0gVGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSBmb3JtYXQgLSBUaGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIG9wdGlvbnMgLSBBbiBvYmplY3Qgd2l0aCBvcHRpb25zXG4gKlxuICogQHJldHVybnMgVGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICpcbiAqIEB0aHJvd3MgYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXRMb25nYCBwcm9wZXJ0eVxuICogQHRocm93cyB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3MgdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3MgdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdChkYXRlLCBmb3JtYXRTdHIsIG9wdGlvbnMpIHtcbiAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICBjb25zdCBsb2NhbGUgPSBvcHRpb25zPy5sb2NhbGUgPz8gZGVmYXVsdE9wdGlvbnMubG9jYWxlID8/IGRlZmF1bHRMb2NhbGU7XG5cbiAgY29uc3QgZmlyc3RXZWVrQ29udGFpbnNEYXRlID1cbiAgICBvcHRpb25zPy5maXJzdFdlZWtDb250YWluc0RhdGUgPz9cbiAgICBvcHRpb25zPy5sb2NhbGU/Lm9wdGlvbnM/LmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA/P1xuICAgIGRlZmF1bHRPcHRpb25zLmxvY2FsZT8ub3B0aW9ucz8uZmlyc3RXZWVrQ29udGFpbnNEYXRlID8/XG4gICAgMTtcblxuICBjb25zdCB3ZWVrU3RhcnRzT24gPVxuICAgIG9wdGlvbnM/LndlZWtTdGFydHNPbiA/P1xuICAgIG9wdGlvbnM/LmxvY2FsZT8ub3B0aW9ucz8ud2Vla1N0YXJ0c09uID8/XG4gICAgZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uID8/XG4gICAgZGVmYXVsdE9wdGlvbnMubG9jYWxlPy5vcHRpb25zPy53ZWVrU3RhcnRzT24gPz9cbiAgICAwO1xuXG4gIGNvbnN0IG9yaWdpbmFsRGF0ZSA9IHRvRGF0ZShkYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCB0aW1lIHZhbHVlXCIpO1xuICB9XG5cbiAgbGV0IHBhcnRzID0gZm9ybWF0U3RyXG4gICAgLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKVxuICAgIC5tYXAoKHN1YnN0cmluZykgPT4ge1xuICAgICAgY29uc3QgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG4gICAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwicFwiIHx8IGZpcnN0Q2hhcmFjdGVyID09PSBcIlBcIikge1xuICAgICAgICBjb25zdCBsb25nRm9ybWF0dGVyID0gbG9uZ0Zvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdWJzdHJpbmc7XG4gICAgfSlcbiAgICAuam9pbihcIlwiKVxuICAgIC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKVxuICAgIC5tYXAoKHN1YnN0cmluZykgPT4ge1xuICAgICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICAgIHJldHVybiB7IGlzVG9rZW46IGZhbHNlLCB2YWx1ZTogXCInXCIgfTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG4gICAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICAgIHJldHVybiB7IGlzVG9rZW46IGZhbHNlLCB2YWx1ZTogY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZykgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdKSB7XG4gICAgICAgIHJldHVybiB7IGlzVG9rZW46IHRydWUsIHZhbHVlOiBzdWJzdHJpbmcgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgICBcIkZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgXCIgK1xuICAgICAgICAgICAgZmlyc3RDaGFyYWN0ZXIgK1xuICAgICAgICAgICAgXCJgXCIsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IGlzVG9rZW46IGZhbHNlLCB2YWx1ZTogc3Vic3RyaW5nIH07XG4gICAgfSk7XG5cbiAgLy8gaW52b2tlIGxvY2FsaXplIHByZXByb2Nlc3NvciAob25seSBmb3IgZnJlbmNoIGxvY2FsZXMgYXQgdGhlIG1vbWVudClcbiAgaWYgKGxvY2FsZS5sb2NhbGl6ZS5wcmVwcm9jZXNzb3IpIHtcbiAgICBwYXJ0cyA9IGxvY2FsZS5sb2NhbGl6ZS5wcmVwcm9jZXNzb3Iob3JpZ2luYWxEYXRlLCBwYXJ0cyk7XG4gIH1cblxuICBjb25zdCBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlLFxuICB9O1xuXG4gIHJldHVybiBwYXJ0c1xuICAgIC5tYXAoKHBhcnQpID0+IHtcbiAgICAgIGlmICghcGFydC5pc1Rva2VuKSByZXR1cm4gcGFydC52YWx1ZTtcblxuICAgICAgY29uc3QgdG9rZW4gPSBwYXJ0LnZhbHVlO1xuXG4gICAgICBpZiAoXG4gICAgICAgICghb3B0aW9ucz8udXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zICYmXG4gICAgICAgICAgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSkgfHxcbiAgICAgICAgKCFvcHRpb25zPy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmXG4gICAgICAgICAgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikpXG4gICAgICApIHtcbiAgICAgICAgd2Fybk9yVGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0U3RyLCBTdHJpbmcoZGF0ZSkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW3Rva2VuWzBdXTtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXIob3JpZ2luYWxEYXRlLCB0b2tlbiwgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9KVxuICAgIC5qb2luKFwiXCIpO1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgY29uc3QgbWF0Y2hlZCA9IGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApO1xuXG4gIGlmICghbWF0Y2hlZCkge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIHJldHVybiBtYXRjaGVkWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn1cblxuLy8gRmFsbGJhY2sgZm9yIG1vZHVsYXJpemVkIGltcG9ydHM6XG5leHBvcnQgZGVmYXVsdCBmb3JtYXQ7XG4iLCJpbXBvcnQgeyBkaWZmZXJlbmNlSW5EYXlzLCBpc1RoaXNZZWFyLCBmb3JtYXQgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlbGF0aXZlRGF0ZShkYXRlVG9Db21wYXJlLCBvbmx5RGF0ZSA9IGZhbHNlKSB7XG5cdGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKS50b0RhdGVTdHJpbmcoKTtcblx0Y29uc3QgdGFyZ2V0RGF0ZSA9IG5ldyBEYXRlKGRhdGVUb0NvbXBhcmUpLnRvRGF0ZVN0cmluZygpO1xuXHRjb25zdCBkYXlzRGlmZiA9IGRpZmZlcmVuY2VJbkRheXModGFyZ2V0RGF0ZSwgdG9kYXkpO1xuXHRsZXQgcmVsYXRpdmVEYXRlRGVzY3JpcHRpb247XG5cblx0aWYgKGRheXNEaWZmID09PSAwKSB7XG5cdFx0cmVsYXRpdmVEYXRlRGVzY3JpcHRpb24gPSBcIlRvZGF5XCI7XG5cdH0gZWxzZSBpZiAoZGF5c0RpZmYgPT09IDEgJiYgIW9ubHlEYXRlKSB7XG5cdFx0cmVsYXRpdmVEYXRlRGVzY3JpcHRpb24gPSBcIlRvbW9ycm93XCI7XG5cdH0gZWxzZSBpZiAoZGF5c0RpZmYgPiAxICYmIGRheXNEaWZmIDwgMTUgJiYgIW9ubHlEYXRlKSB7XG5cdFx0cmVsYXRpdmVEYXRlRGVzY3JpcHRpb24gPSBgJHtkYXlzRGlmZn0gZGF5cyBsZWZ0YDtcblx0fSBlbHNlIGlmIChkYXlzRGlmZiA9PT0gLTEgJiYgIW9ubHlEYXRlKSB7XG5cdFx0cmVsYXRpdmVEYXRlRGVzY3JpcHRpb24gPSBcIlllc3RlcmRheVwiO1xuXHR9IGVsc2UgaWYgKGRheXNEaWZmIDwgLTEgJiYgZGF5c0RpZmYgPiAtMTUgJiYgIW9ubHlEYXRlKSB7XG5cdFx0cmVsYXRpdmVEYXRlRGVzY3JpcHRpb24gPSBgJHtNYXRoLmFicyhkYXlzRGlmZil9IGRheXMgYWdvYDtcblx0fSBlbHNlIGlmIChpc1RoaXNZZWFyKGRhdGVUb0NvbXBhcmUpKSB7XG5cdFx0cmVsYXRpdmVEYXRlRGVzY3JpcHRpb24gPSBmb3JtYXQoZGF0ZVRvQ29tcGFyZSwgXCJNTU0gZFwiKTtcblx0fSBlbHNlIHtcblx0XHRyZWxhdGl2ZURhdGVEZXNjcmlwdGlvbiA9IGZvcm1hdChkYXRlVG9Db21wYXJlLCBcIk1NTSB5XCIpO1xuXHR9XG5cblx0cmV0dXJuIHsgZGF5c0RpZmYsIHJlbGF0aXZlRGF0ZURlc2NyaXB0aW9uIH07XG59XG4iLCJpbXBvcnQgeyBzaG93VG9kb0Zvcm0sIHN1Ym1pdEhhbmRsZXIgfSBmcm9tIFwiLi90b2RvLWNvbnRlbnRcIjtcbmltcG9ydCB7IGZvcm0sIGNyZWF0ZUljb24gfSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgeyBnZXRSZWxhdGl2ZURhdGUgfSBmcm9tIFwiLi4vdXRpbHMvZGF0ZVwiO1xuaW1wb3J0IHsgY3JlYXRlRHJvcGRvd25NZW51IH0gZnJvbSBcIi4vZHJvcGRvd24tbWVudVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVG9kb0VsZW1lbnQoXG5cdHRvZG8sXG5cdGhhbmRsZXIsXG5cdHsgc2hvd1Byb2plY3QgPSBmYWxzZSwgc2hvd1ByaW9yaXR5ID0gdHJ1ZSwgc2hvd0R1ZURhdGUgPSB0cnVlIH0gPSB7fSxcbikge1xuXHRjb25zdCB0b2RvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcblx0dG9kb0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRvZG8taXRlbVwiKTtcblx0dG9kb0VsZW1lbnQuZGF0YXNldC5pZCA9IHRvZG8uaWQ7XG5cblx0Y29uc3QgaGVhZGVyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0aGVhZGVyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ0b2RvLWhlYWRlclwiKTtcblxuXHRjb25zdCB0b2RvVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG5cdHRvZG9UaXRsZS5jbGFzc0xpc3QuYWRkKFwidGl0bGVcIik7XG5cdHRvZG9UaXRsZS50ZXh0Q29udGVudCA9IHRvZG8udGl0bGU7XG5cblx0Y29uc3QgdG9kb0NvbXBsZXRlQnV0dG9uID0gY3JlYXRlQ2hlY2tib3goXG5cdFx0dG9kby5pc0NvbXBsZXRlLFxuXHRcdHRvZG8uaWQsXG5cdFx0aGFuZGxlci5vblRvZG9Db21wbGV0ZSxcblx0KTtcblxuXHRoZWFkZXJDb250YWluZXIuYXBwZW5kKHRvZG9Db21wbGV0ZUJ1dHRvbiwgdG9kb1RpdGxlKTtcblx0aWYgKHNob3dQcmlvcml0eSkge1xuXHRcdGNvbnN0IHByaW9yaXR5RWxlbWVudCA9IGNyZWF0ZVByaW9yaXR5RWxlbWVudCh0b2RvLnByaW9yaXR5KTtcblx0XHRoZWFkZXJDb250YWluZXIuYXBwZW5kKHByaW9yaXR5RWxlbWVudCk7XG5cdH1cblxuXHRjb25zdCBkZXNjcmlwdGlvblRleHQgPSBjcmVhdGVEZXNjcmlwdGlvbkVsZW1lbnQodG9kby5kZXNjcmlwdGlvbik7XG5cdGNvbnN0IGluZm9Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRpbmZvQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJpbmZvLWNvbnRhaW5lclwiKTtcblx0aW5mb0NvbnRhaW5lci5hcHBlbmQoaGVhZGVyQ29udGFpbmVyLCBkZXNjcmlwdGlvblRleHQpO1xuXG5cdGNvbnN0IHJpZ2h0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0cmlnaHRDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInJpZ2h0LWNvbnRhaW5lclwiKTtcblxuXHRpZiAoc2hvd1Byb2plY3QpIHtcblx0XHRjb25zdCBwcm9qZWN0RWxlbWVudCA9IGNyZWF0ZVByb2plY3RFbGVtZW50KHRvZG8ucHJvamVjdCk7XG5cdFx0cmlnaHRDb250YWluZXIuYXBwZW5kKHByb2plY3RFbGVtZW50KTtcblx0fVxuXHRpZiAoc2hvd0R1ZURhdGUpIHtcblx0XHRjb25zdCBkdWVEYXRlRWxlbWVudCA9IGNyZWF0ZURhdGVFbGVtZW50KHRvZG8uZHVlRGF0ZSk7XG5cdFx0cmlnaHRDb250YWluZXIuYXBwZW5kKGR1ZURhdGVFbGVtZW50KTtcblx0fVxuXG5cdGNvbnN0IGVkaXRDbGlja0hhbmRsZXIgPSAoKSA9PiB7XG5cdFx0c2hvd1RvZG9Gb3JtKHRvZG9FbGVtZW50LCB0b2RvKTtcblx0XHRmb3JtLnRvZG8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBzdWJtaXRIYW5kbGVyLmFkZFRvZG8pO1xuXHRcdGZvcm0udG9kby5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHN1Ym1pdEhhbmRsZXIuZWRpdFRvZG8pO1xuXHR9O1xuXG5cdGNvbnN0IGRyb3Bkb3duTWVudSA9IGNyZWF0ZURyb3Bkb3duTWVudShbXG5cdFx0e1xuXHRcdFx0dGV4dDogXCJFZGl0XCIsXG5cdFx0XHRpY29uOiBcImVkaXRcIixcblx0XHRcdGhhbmRsZXI6IGVkaXRDbGlja0hhbmRsZXIsXG5cdFx0fSxcblx0XHR7XG5cdFx0XHR0ZXh0OiBcIkRlbGV0ZVwiLFxuXHRcdFx0aWNvbjogXCJkZWxldGVcIixcblx0XHRcdGhhbmRsZXIoKSB7XG5cdFx0XHRcdGhhbmRsZXIub25Ub2RvRGVsZXRlKHRvZG8uaWQpO1xuXHRcdFx0fSxcblx0XHR9LFxuXHRdKTtcblxuXHR0b2RvRWxlbWVudC5hcHBlbmQoXG5cdFx0aW5mb0NvbnRhaW5lcixcblx0XHRyaWdodENvbnRhaW5lcixcblx0XHRkcm9wZG93bk1lbnUuYnV0dG9uLFxuXHRcdGRyb3Bkb3duTWVudS5tZW51LFxuXHQpO1xuXG5cdHRvZG9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcblx0XHRpZiAoXG5cdFx0XHRldmVudC50YXJnZXQuY2xvc2VzdChcImJ1dHRvblwiKSB8fFxuXHRcdFx0ZHJvcGRvd25NZW51Lm1lbnUuY29udGFpbnMoZXZlbnQudGFyZ2V0KVxuXHRcdClcblx0XHRcdHJldHVybjtcblx0XHRlZGl0Q2xpY2tIYW5kbGVyKGV2ZW50KTtcblx0fSk7XG5cblx0cmV0dXJuIHRvZG9FbGVtZW50O1xufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlQ2hlY2tib3ggPSAoaXNDb21wbGV0ZSwgdG9kb0lELCBvbkNsaWNrID0gbnVsbCkgPT4ge1xuXHRjb25zdCB0b2RvQ29tcGxldGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuXHRjb25zdCB0b2RvQ29tcGxldGVJY29uID0gY3JlYXRlSWNvbigpO1xuXHRjb25zdCB0b2dnbGVCdXR0b24gPSAoaXNDb21wbGV0ZSkgPT4ge1xuXHRcdHRvZG9Db21wbGV0ZUljb24udGV4dENvbnRlbnQgPSBpc0NvbXBsZXRlXG5cdFx0XHQ/IFwiY2hlY2tfYm94XCJcblx0XHRcdDogXCJjaGVja19ib3hfb3V0bGluZV9ibGFua1wiO1xuXHR9O1xuXHR0b2dnbGVCdXR0b24oaXNDb21wbGV0ZSk7XG5cdHRvZG9Db21wbGV0ZUJ1dHRvbi5yZXBsYWNlQ2hpbGRyZW4odG9kb0NvbXBsZXRlSWNvbik7XG5cblx0dG9kb0NvbXBsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cdFx0b25DbGljayh0b2RvSUQsIHRvZ2dsZUJ1dHRvbik7XG5cdH0pO1xuXG5cdHJldHVybiB0b2RvQ29tcGxldGVCdXR0b247XG59O1xuXG5jb25zdCBjcmVhdGVQcmlvcml0eUVsZW1lbnQgPSAocHJpb3JpdHkpID0+IHtcblx0Y29uc3QgdmFsdWUgPSArcHJpb3JpdHk7XG5cdGlmICghdmFsdWUpIHJldHVybiBcIlwiO1xuXG5cdGNvbnN0IHByaW9yaXR5RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcblx0cHJpb3JpdHlFbC5jbGFzc0xpc3QuYWRkKFwicHJpb3JpdHlcIiwgYHByaW9yaXR5LSR7cHJpb3JpdHl9YCk7XG5cblx0Y29uc3QgcHJpb3JpdHlJY29uID0gY3JlYXRlSWNvbihcImZsYWdcIik7XG5cblx0Y29uc3QgcHJpb3JpdHlUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdHByaW9yaXR5VGV4dC5jbGFzc0xpc3QuYWRkKFwidGV4dFwiKTtcblx0cHJpb3JpdHlUZXh0LnRleHRDb250ZW50ID0gZ2V0UHJpb3JpdHlUZXh0KHZhbHVlKTtcblxuXHRwcmlvcml0eUVsLmFwcGVuZChwcmlvcml0eUljb24sIHByaW9yaXR5VGV4dCk7XG5cdHJldHVybiBwcmlvcml0eUVsO1xufTtcblxuY29uc3QgZ2V0UHJpb3JpdHlUZXh0ID0gKHZhbHVlKSA9PiB7XG5cdHN3aXRjaCAodmFsdWUpIHtcblx0XHRjYXNlIDE6XG5cdFx0XHRyZXR1cm4gXCJMb3dcIjtcblx0XHRjYXNlIDI6XG5cdFx0XHRyZXR1cm4gXCJOb3JtYWxcIjtcblx0XHRjYXNlIDM6XG5cdFx0XHRyZXR1cm4gXCJIaWdoXCI7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBcIlwiO1xuXHR9XG59O1xuXG5jb25zdCBjcmVhdGVEZXNjcmlwdGlvbkVsZW1lbnQgPSAoZGVzY3JpcHRpb24pID0+IHtcblx0aWYgKCFkZXNjcmlwdGlvbikgcmV0dXJuIFwiXCI7XG5cdGNvbnN0IGRlc2NyaXB0aW9uVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuXHRkZXNjcmlwdGlvblRleHQuY2xhc3NMaXN0LmFkZChcImRlc2NyaXB0aW9uXCIpO1xuXHRkZXNjcmlwdGlvblRleHQudGV4dENvbnRlbnQgPSBkZXNjcmlwdGlvbjtcblx0cmV0dXJuIGRlc2NyaXB0aW9uVGV4dDtcbn07XG5cbmNvbnN0IGNyZWF0ZURhdGVFbGVtZW50ID0gKGR1ZURhdGUpID0+IHtcblx0aWYgKCFkdWVEYXRlKSByZXR1cm4gXCJcIjtcblxuXHRjb25zdCB7IGRheXNEaWZmLCByZWxhdGl2ZURhdGVEZXNjcmlwdGlvbiB9ID0gZ2V0UmVsYXRpdmVEYXRlKGR1ZURhdGUpO1xuXG5cdGNvbnN0IGRhdGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblx0ZGF0ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRhdGVcIik7XG5cdGRhdGVFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXCJkdWVcIiwgZGF5c0RpZmYgPCAxKTtcblxuXHRjb25zdCBkYXRlSWNvbiA9IGNyZWF0ZUljb24oYGhvdXJnbGFzc18ke2RheXNEaWZmIDwgMCA/IFwiYm90dG9tXCIgOiBcInRvcFwifWApO1xuXG5cdGNvbnN0IGRhdGVUZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG5cdGRhdGVUZXh0LmNsYXNzTGlzdC5hZGQoXCJ0ZXh0XCIpO1xuXHRkYXRlVGV4dC50ZXh0Q29udGVudCA9IHJlbGF0aXZlRGF0ZURlc2NyaXB0aW9uO1xuXG5cdGRhdGVFbGVtZW50LmFwcGVuZChkYXRlSWNvbiwgZGF0ZVRleHQpO1xuXG5cdHJldHVybiBkYXRlRWxlbWVudDtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVByb2plY3RFbGVtZW50KHByb2plY3QpIHtcblx0Y29uc3QgcHJvamVjdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXHRwcm9qZWN0RWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdFwiKTtcblxuXHRjb25zdCBwcm9qZWN0SWNvbiA9IGNyZWF0ZUljb24ocHJvamVjdD8ubmFtZSA/IFwidGFnXCIgOiBcImluYm94XCIpO1xuXHRjb25zdCBwcm9qZWN0VGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRwcm9qZWN0VGV4dC5jbGFzc0xpc3QuYWRkKFwidGV4dFwiKTtcblx0cHJvamVjdFRleHQudGV4dENvbnRlbnQgPSBwcm9qZWN0Py5uYW1lID8/IFwiSW5ib3hcIjtcblxuXHRwcm9qZWN0RWxlbWVudC5hcHBlbmQocHJvamVjdEljb24sIHByb2plY3RUZXh0KTtcblxuXHRyZXR1cm4gcHJvamVjdEVsZW1lbnQ7XG59XG4iLCJpbXBvcnQgeyBlbGVtZW50LCBmb3JtLCByZW5kZXJMaXN0IH0gZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0IHsgY3JlYXRlVG9kb0VsZW1lbnQgfSBmcm9tIFwiLi90b2RvLWVsZW1lbnRcIjtcblxubGV0IGN1cnJlbnRUb2RvRWxlbWVudCA9IG51bGw7XG5leHBvcnQgY29uc3QgZ2V0Q3VycmVudFRvZG9FbGVtZW50ID0gKCkgPT4gY3VycmVudFRvZG9FbGVtZW50O1xuXG5leHBvcnQgZnVuY3Rpb24gc2hvd1RvZG9Gb3JtKGVsZW1lbnRUb1JlcGxhY2UgPSBudWxsLCB0b2RvID0gbnVsbCkge1xuXHRjdXJyZW50VG9kb0VsZW1lbnQ/LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG5cdGZvcm0udG9kby5yZXNldCgpO1xuXG5cdGlmIChlbGVtZW50VG9SZXBsYWNlID09PSBudWxsKSB7XG5cdFx0ZWxlbWVudC50b2RvTGlzdC5hcHBlbmQoZm9ybS50b2RvKTtcblx0fSBlbHNlIHtcblx0XHRjdXJyZW50VG9kb0VsZW1lbnQgPSBlbGVtZW50VG9SZXBsYWNlO1xuXHRcdGVsZW1lbnRUb1JlcGxhY2UuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcblx0XHRlbGVtZW50VG9SZXBsYWNlLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyZW5kXCIsIGZvcm0udG9kbyk7XG5cdH1cblxuXHRmb3JtLnRvZG8uaGlkZGVuID0gZmFsc2U7XG5cdGlmIChlbGVtZW50VG9SZXBsYWNlICE9PSBlbGVtZW50LmFkZFRvZG9CdXR0b24pIHtcblx0XHRmaWxsRm9ybSh0b2RvKTtcblx0fVxuXG5cdGZvcm0udG9kby5xdWVyeVNlbGVjdG9yKFwiaW5wdXRcIikuZm9jdXMoKTtcblx0Zm9ybS50b2RvLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUVzY2FwZVByZXNzKTtcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUNsaWNrT3V0c2lkZUZvcm0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGlkZVRvZG9Gb3JtKCkge1xuXHRmb3JtLnRvZG8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlRXNjYXBlUHJlc3MpO1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlQ2xpY2tPdXRzaWRlRm9ybSk7XG5cdGZvcm0udG9kby5oaWRkZW4gPSB0cnVlO1xuXHRjdXJyZW50VG9kb0VsZW1lbnQ/LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG59XG5cbmZ1bmN0aW9uIGZpbGxGb3JtKHRvZG8pIHtcblx0Y29uc3QgaW5wdXQgPSB7XG5cdFx0dGl0bGU6IGZvcm0udG9kby5xdWVyeVNlbGVjdG9yKFwiI3RvZG8tdGl0bGVcIiksXG5cdFx0ZGVzY3JpcHRpb246IGZvcm0udG9kby5xdWVyeVNlbGVjdG9yKFwiI3RvZG8tZGVzY3JpcHRpb25cIiksXG5cdFx0ZHVlRGF0ZTogZm9ybS50b2RvLnF1ZXJ5U2VsZWN0b3IoXCIjdG9kby1kdWUtZGF0ZVwiKSxcblx0XHRwcmlvcml0eTogZm9ybS50b2RvLnF1ZXJ5U2VsZWN0b3IoXCIjdG9kby1wcmlvcml0eVwiKSxcblx0fTtcblxuXHRmb3IgKGNvbnN0IGtleSBpbiBpbnB1dCkge1xuXHRcdGlmIChcblx0XHRcdHRvZG9ba2V5XSAhPT0gbnVsbCB8fFxuXHRcdFx0dG9kb1trZXldICE9PSB1bmRlZmluZWQgfHxcblx0XHRcdHRvZG9ba2V5XSAhPT0gXCJcIiB8fFxuXHRcdFx0a2V5IGluIHRvZG9cblx0XHQpXG5cdFx0XHRpbnB1dFtrZXldLnZhbHVlID0gdG9kb1trZXldO1xuXHR9XG59XG5cbmV4cG9ydCBjb25zdCBzdWJtaXRIYW5kbGVyID0ge1xuXHRhZGRUb2RvOiBudWxsLFxuXHRlZGl0VG9kbzogbnVsbCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlclN1Ym1pdExpc3RlbmVyKGFjdGlvbiwgY2FsbGJhY2spIHtcblx0c3VibWl0SGFuZGxlclthY3Rpb25dID0gKGV2ZW50KSA9PiB7XG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGV2ZW50LnRhcmdldCk7XG5cdFx0Y29uc3QgdG9kb0Zvcm1EYXRhID0gT2JqZWN0LmZyb21FbnRyaWVzKGZvcm1EYXRhKTtcblx0XHRjb25zdCBzZWxlY3RlZEVsZW1lbnQgPSBnZXRDdXJyZW50VG9kb0VsZW1lbnQoKTtcblx0XHRjb25zdCBlbGVtZW50ID0gZWxlbWVudFVwZGF0ZXIoc2VsZWN0ZWRFbGVtZW50KTtcblx0XHRjYWxsYmFjayh0b2RvRm9ybURhdGEsIGVsZW1lbnQpO1xuXG5cdFx0aGlkZVRvZG9Gb3JtKCk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRVcGRhdGVyKGVsZW1lbnQpIHtcblx0aWYgKCFlbGVtZW50IHx8IGVsZW1lbnQgPT09IGVsZW1lbnQuYWRkVG9kb0J1dHRvbikgcmV0dXJuIG51bGw7XG5cdHJldHVybiB7XG5cdFx0aWQ6IGVsZW1lbnQuZGF0YXNldC5pZCxcblx0XHR1cGRhdGVDb250ZW50OiB1cGRhdGVUb2RvRWxlbWVudCxcblx0fTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlVG9kb0VsZW1lbnQodG9kbywgaGFuZGxlcikge1xuXHRjb25zdCB1cGRhdGVkVG9kb0VsZW1lbnQgPSBjcmVhdGVUb2RvRWxlbWVudCh0b2RvLCBoYW5kbGVyKTtcblx0Y3VycmVudFRvZG9FbGVtZW50LnJlcGxhY2VDaGlsZHJlbiguLi51cGRhdGVkVG9kb0VsZW1lbnQuY2hpbGRyZW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVG9kb0VsZW1lbnQodG9kbywgaGFuZGxlcikge1xuXHRjb25zdCB0b2RvRWxlbWVudCA9IGNyZWF0ZVRvZG9FbGVtZW50KHRvZG8sIGhhbmRsZXIpO1xuXHRlbGVtZW50LnRvZG9MaXN0LmFwcGVuZCh0b2RvRWxlbWVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVUb2RvRWxlbWVudCh0b2RvSUQpIHtcblx0Y29uc3QgdG9kb0VsZW1lbnQgPSBlbGVtZW50LnRvZG9MaXN0Py5xdWVyeVNlbGVjdG9yKGBbZGF0YS1pZD1cIiR7dG9kb0lEfVwiXWApO1xuXHRpZiAodG9kb0VsZW1lbnQpIGVsZW1lbnQudG9kb0xpc3QucmVtb3ZlQ2hpbGQodG9kb0VsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVFc2NhcGVQcmVzcyhldmVudCkge1xuXHRpZiAoZXZlbnQua2V5ID09PSBcIkVzY2FwZVwiKSBoaWRlVG9kb0Zvcm0oKTtcbn1cblxuY29uc3QgaGFuZGxlQ2xpY2tPdXRzaWRlRm9ybSA9IChldmVudCkgPT4ge1xuXHRjb25zdCByZWN0ID0gZm9ybS50b2RvLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRpZiAoXG5cdFx0ZXZlbnQuY2xpZW50WSA8IHJlY3QudG9wIHx8XG5cdFx0ZXZlbnQuY2xpZW50WSA+IHJlY3QuYm90dG9tIHx8XG5cdFx0ZXZlbnQuY2xpZW50WCA8IHJlY3QubGVmdCB8fFxuXHRcdGV2ZW50LmNsaWVudFggPiByZWN0LnJpZ2h0XG5cdCkge1xuXHRcdGhpZGVUb2RvRm9ybSgpO1xuXHR9XG59O1xuXG5leHBvcnQgY29uc3QgcmVuZGVyVG9kb3MgPSByZW5kZXJMaXN0KGVsZW1lbnQudG9kb0xpc3QsIGNyZWF0ZVRvZG9FbGVtZW50KTtcblxuZWxlbWVudC5hZGRUb2RvQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cdHNob3dUb2RvRm9ybShlbGVtZW50LmFkZFRvZG9CdXR0b24pO1xuXHRmb3JtLnRvZG8ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBzdWJtaXRIYW5kbGVyLmVkaXRUb2RvKTtcblx0Zm9ybS50b2RvLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgc3VibWl0SGFuZGxlci5hZGRUb2RvKTtcbn0pO1xuXG5leHBvcnQgY29uc3QgdXBkYXRlUHJvamVjdE5hbWUgPSAobmFtZSwgaGFuZGxlciA9IG51bGwpID0+IHtcblx0aWYgKCFoYW5kbGVyKSB7XG5cdFx0ZWxlbWVudC5wcm9qZWN0SGVhZGluZy5yZXBsYWNlQ2hpbGRyZW4obmFtZSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgcHJvamVjdE5hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblx0ZWxlbWVudC5wcm9qZWN0SGVhZGluZy5yZXBsYWNlQ2hpbGRyZW4ocHJvamVjdE5hbWVJbnB1dCk7XG5cdHByb2plY3ROYW1lSW5wdXQudmFsdWUgPSBuYW1lO1xuXHRwcm9qZWN0TmFtZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGhhbmRsZXIpO1xuXHRwcm9qZWN0TmFtZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChldmVudCkgPT4ge1xuXHRcdGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIiB8fCBldmVudC5rZXkgPT09IFwiRXNjYXBlXCIpXG5cdFx0XHRwcm9qZWN0TmFtZUlucHV0LmJsdXIoKTtcblx0fSk7XG59O1xuIiwiaW1wb3J0IHsgZWxlbWVudCB9IGZyb20gXCIuL2Jhc2VcIjtcblxuY29uc3QgeyBjb25maXJtRGlhbG9nIH0gPSBlbGVtZW50O1xuY29uc3QgZGlhbG9nVGV4dCA9IGNvbmZpcm1EaWFsb2cucXVlcnlTZWxlY3RvcihcIi5kaWFsb2ctdGV4dFwiKTtcbmNvbnN0IGNvbmZpcm1CdXR0b24gPSBjb25maXJtRGlhbG9nLnF1ZXJ5U2VsZWN0b3IoXCIjY29uZmlybS1idG5cIik7XG5jb25zdCBjYW5jZWxCdXR0b24gPSBjb25maXJtRGlhbG9nLnF1ZXJ5U2VsZWN0b3IoXCIjY2FuY2VsLWJ0blwiKTtcblxuY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cdGNvbmZpcm1EaWFsb2cuY2xvc2UoKTtcbn0pO1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkQ29uZmlybWF0aW9uKFxuXHRjYWxsYmFjayxcblx0dGV4dCA9IHtcblx0XHRjb25maXJtOiBcIlllc1wiLFxuXHRcdG1lc3NhZ2U6IFwiQ29uZmlybT9cIixcblx0fSxcbikge1xuXHRkaWFsb2dUZXh0LnRleHRDb250ZW50ID0gdGV4dC5tZXNzYWdlO1xuXHRjb25maXJtQnV0dG9uLnRleHRDb250ZW50ID0gdGV4dC5jb25maXJtO1xuXG5cdHJldHVybiAoYXJncykgPT4ge1xuXHRcdGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge1xuXHRcdFx0Y2FsbGJhY2soYXJncyk7XG5cdFx0XHRjb25maXJtRGlhbG9nLmNsb3NlKCk7XG5cdFx0fTtcblxuXHRcdGNvbmZpcm1EaWFsb2cuc2hvd01vZGFsKCk7XG5cdFx0Y29uZmlybUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgbGlzdGVuZXIsIHsgb25jZTogdHJ1ZSB9KTtcblx0XHRjb25maXJtRGlhbG9nLmFkZEV2ZW50TGlzdGVuZXIoXCJjbG9zZVwiLCAoKSA9PiB7XG5cdFx0XHRjb25maXJtQnV0dG9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBsaXN0ZW5lcik7XG5cdFx0fSk7XG5cdH07XG59XG4iLCJpbXBvcnQgeyBlbGVtZW50LCByZW5kZXJMaXN0IH0gZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0IHsgY3JlYXRlQ2hlY2tib3ggfSBmcm9tIFwiLi90b2RvLWVsZW1lbnRcIjtcbmltcG9ydCB7IGdldFJlbGF0aXZlRGF0ZSB9IGZyb20gXCIuLi91dGlscy9kYXRlXCI7XG5cbmNvbnN0IHsgY29tcGxldGVkQ29udGFpbmVyLCBjb21wbGV0ZWRMaXN0IH0gPSBlbGVtZW50O1xuY29uc3QgY29tcGxldGVkRm9sZEJ1dHRvbiA9IGNvbXBsZXRlZENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLmZvbGQtYnRuXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcGxldGVkSXRlbSh0b2RvLCBvblVuY2hlY2spIHtcblx0Y29uc3QgY29tcGxldGVkSXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcblx0Y29tcGxldGVkSXRlbS5jbGFzc0xpc3QuYWRkKFwiY29tcGxldGVkLWl0ZW1cIik7XG5cdGNvbXBsZXRlZEl0ZW0uZGF0YXNldC5pZCA9IHRvZG8uaWQ7XG5cblx0Y29uc3QgY2hlY2tib3ggPSBjcmVhdGVDaGVja2JveCh0b2RvLmlzQ29tcGxldGUsIHRvZG8uaWQsIG9uVW5jaGVjayk7XG5cdGNoZWNrYm94LmNsYXNzTGlzdC5hZGQoXCJjb21wbGV0ZWQtYnRuXCIpO1xuXG5cdGNvbnN0IHsgcmVsYXRpdmVEYXRlRGVzY3JpcHRpb24gfSA9IGdldFJlbGF0aXZlRGF0ZSh0b2RvLmNvbXBsZXRlZERhdGUsIHRydWUpO1xuXHRjb25zdCBjb21wbGV0ZWREYXRlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuXHRjb21wbGV0ZWREYXRlU3Bhbi5jbGFzc0xpc3QuYWRkKFwiY29tcGxldGVkLWRhdGVcIik7XG5cdGNvbXBsZXRlZERhdGVTcGFuLnRleHRDb250ZW50ID0gcmVsYXRpdmVEYXRlRGVzY3JpcHRpb247XG5cblx0Y29uc3QgdG9kb1RpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG5cdHRvZG9UaXRsZS5jbGFzc0xpc3QuYWRkKFwidGl0bGVcIik7XG5cdHRvZG9UaXRsZS50ZXh0Q29udGVudCA9IHRvZG8udGl0bGU7XG5cblx0Y29tcGxldGVkSXRlbS5hcHBlbmQoY2hlY2tib3gsIGNvbXBsZXRlZERhdGVTcGFuLCB0b2RvVGl0bGUpO1xuXHRyZXR1cm4gY29tcGxldGVkSXRlbTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEl0ZW0odG9kbywgb25VbmNoZWNrKSB7XG5cdGNvbnN0IGNvbXBsZXRlZEl0ZW0gPSBjcmVhdGVDb21wbGV0ZWRJdGVtKHRvZG8sIG9uVW5jaGVjayk7XG5cdGNvbXBsZXRlZExpc3QucHJlcGVuZChjb21wbGV0ZWRJdGVtKTtcblx0dG9nZ2xlQ29udGFpbmVyVmlzaWJpbGl0eSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSXRlbSh0b2RvSUQpIHtcblx0Y29uc3QgaXRlbVRvUmVtb3ZlID0gY29tcGxldGVkTGlzdC5xdWVyeVNlbGVjdG9yKFxuXHRcdGAuY29tcGxldGVkLWl0ZW1bZGF0YS1pZD1cIiR7dG9kb0lEfVwiXWAsXG5cdCk7XG5cdGl0ZW1Ub1JlbW92ZT8ucmVtb3ZlKCk7XG5cdHRvZ2dsZUNvbnRhaW5lclZpc2liaWxpdHkoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZUNvbnRhaW5lclZpc2liaWxpdHkoKSB7XG5cdGNvbXBsZXRlZENvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKFxuXHRcdFwiaGlkZGVuXCIsXG5cdFx0Y29tcGxldGVkTGlzdC5jaGlsZHJlbi5sZW5ndGggPT09IDAsXG5cdCk7XG59XG5cbmV4cG9ydCBjb25zdCByZW5kZXJJdGVtcyA9IChjb21wbGV0ZWRUb2Rvcywgb25VbmNoZWNrKSA9PiB7XG5cdGlmIChjb21wbGV0ZWRUb2Rvcy5sZW5ndGggPT09IDApIHtcblx0XHRjb21wbGV0ZWRMaXN0LnJlcGxhY2VDaGlsZHJlbigpO1xuXHRcdGNvbXBsZXRlZENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuXHRcdHJldHVybjtcblx0fVxuXHRjb21wbGV0ZWRDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcblx0Y29uc3QgcmVuZGVyID0gcmVuZGVyTGlzdChjb21wbGV0ZWRMaXN0LCBjcmVhdGVDb21wbGV0ZWRJdGVtKTtcblx0cmVuZGVyKGNvbXBsZXRlZFRvZG9zLCBvblVuY2hlY2spO1xufTtcblxuY29tcGxldGVkRm9sZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuXHRjb21wbGV0ZWRMaXN0LmNsYXNzTGlzdC50b2dnbGUoXCJoaWRkZW5cIik7XG5cdGNvbnN0IGZvbGRJY29uID0gY29tcGxldGVkRm9sZEJ1dHRvbi5xdWVyeVNlbGVjdG9yKFwic3Bhbi5pY29uXCIpO1xuXHRmb2xkSWNvbi50ZXh0Q29udGVudCA9IGNvbXBsZXRlZExpc3QuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaGlkZGVuXCIpXG5cdFx0PyBcInVuZm9sZF9tb3JlXCJcblx0XHQ6IFwidW5mb2xkX2xlc3NcIjtcbn0pO1xuIiwiaW1wb3J0IHsgZWxlbWVudCB9IGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCB7IGNyZWF0ZURyb3Bkb3duTWVudSB9IGZyb20gXCIuL2Ryb3Bkb3duLW1lbnVcIjtcblxuY29uc3QgdGhlbWVJY29uID0gZWxlbWVudC50aGVtZVNlbGVjdG9yLnF1ZXJ5U2VsZWN0b3IoXCIuaWNvblwiKTtcbmNvbnN0IGRhcmtNb2RlTWVkaWFRdWVyeSA9IHdpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKVwiKTtcblxuY29uc3QgaXNEYXJrTW9kZSA9ICgpID0+IHtcblx0Y29uc3QgdGhlbWUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGF0YXNldC50aGVtZTtcblx0cmV0dXJuIHRoZW1lID8gdGhlbWUgPT09IFwiZGFya1wiIDogZGFya01vZGVNZWRpYVF1ZXJ5Lm1hdGNoZXM7XG59O1xuXG5jb25zdCBzZXRUaGVtZSA9ICh0aGVtZSkgPT4ge1xuXHRkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGF0YXNldC50aGVtZSA9IHRoZW1lO1xuXHR0aGVtZUljb24udGV4dENvbnRlbnQgPSB0aGVtZSA9PT0gXCJkYXJrXCIgPyBcImRhcmtfbW9kZVwiIDogXCJsaWdodF9tb2RlXCI7XG59O1xuXG5jb25zdCB0b2dnbGVUaGVtZSA9ICgpID0+IHtcblx0c2V0VGhlbWUoaXNEYXJrTW9kZSgpID8gXCJsaWdodFwiIDogXCJkYXJrXCIpO1xufTtcblxuY29uc3QgaGFuZGxlVGhlbWVDaGFuZ2UgPSAoZXZlbnQpID0+IHtcblx0c2V0VGhlbWUoZXZlbnQubWF0Y2hlcyA/IFwiZGFya1wiIDogXCJsaWdodFwiKTtcblx0dXBkYXRlVGhlbWVNZW51KCk7XG59O1xuXG5jb25zdCBtYXRjaFN5c3RlbVRoZW1lID0gKCkgPT4ge1xuXHRzZXRUaGVtZShkYXJrTW9kZU1lZGlhUXVlcnkubWF0Y2hlcyA/IFwiZGFya1wiIDogXCJsaWdodFwiKTtcblx0dXBkYXRlVGhlbWVNZW51KCk7XG59O1xuXG5sZXQgdGhlbWVNZW51VG9nZ2xlciA9IG51bGw7XG5cbmNvbnN0IHVwZGF0ZVRoZW1lTWVudSA9IChtZW51SXRlbSA9IHRoZW1lTWVudVRvZ2dsZXIpID0+IHtcblx0aWYgKCFtZW51SXRlbSkgcmV0dXJuO1xuXG5cdGNvbnN0IGljb24gPSBtZW51SXRlbS5xdWVyeVNlbGVjdG9yKFwiLmljb25cIik7XG5cdGNvbnN0IHRleHQgPSBtZW51SXRlbS5xdWVyeVNlbGVjdG9yKFwiLnRleHRcIik7XG5cdGNvbnN0IGRhcmtNb2RlID0gaXNEYXJrTW9kZSgpO1xuXG5cdGljb24udGV4dENvbnRlbnQgPSBkYXJrTW9kZSA/IFwibGlnaHRfbW9kZVwiIDogXCJkYXJrX21vZGVcIjtcblx0dGV4dC50ZXh0Q29udGVudCA9IGRhcmtNb2RlID8gXCJMaWdodCBNb2RlXCIgOiBcIkRhcmsgTW9kZVwiO1xufTtcblxuY29uc3QgY3JlYXRlVGhlbWVEcm9wZG93biA9ICgpID0+IHtcblx0cmV0dXJuIGNyZWF0ZURyb3Bkb3duTWVudShcblx0XHRbXG5cdFx0XHR7XG5cdFx0XHRcdHRleHQ6IGlzRGFya01vZGUoKSA/IFwiTGlnaHQgTW9kZVwiIDogXCJEYXJrIE1vZGVcIixcblx0XHRcdFx0aWNvbjogaXNEYXJrTW9kZSgpID8gXCJsaWdodF9tb2RlXCIgOiBcImRhcmtfbW9kZVwiLFxuXHRcdFx0XHRoYW5kbGVyKCkge1xuXHRcdFx0XHRcdHRvZ2dsZVRoZW1lKCk7XG5cdFx0XHRcdFx0dXBkYXRlVGhlbWVNZW51KCk7XG5cdFx0XHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjb2xvci10aGVtZVwiLCBpc0RhcmtNb2RlKCkgPyBcImRhcmtcIiA6IFwibGlnaHRcIik7XG5cdFx0XHRcdFx0ZGFya01vZGVNZWRpYVF1ZXJ5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgaGFuZGxlVGhlbWVDaGFuZ2UpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0dGV4dDogXCJTeXN0ZW0gVGhlbWVcIixcblx0XHRcdFx0aWNvbjogXCJkZXNrdG9wX3dpbmRvd3NcIixcblx0XHRcdFx0aGFuZGxlcigpIHtcblx0XHRcdFx0XHRsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcImNvbG9yLXRoZW1lXCIpO1xuXHRcdFx0XHRcdG1hdGNoU3lzdGVtVGhlbWUoKTtcblx0XHRcdFx0XHRkYXJrTW9kZU1lZGlhUXVlcnkuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBoYW5kbGVUaGVtZUNoYW5nZSk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZWxlbWVudC50aGVtZVNlbGVjdG9yLFxuXHQpO1xufTtcblxuY29uc3Qgc2V0dXBEcm9wZG93bk1lbnUgPSAoKSA9PiB7XG5cdGNvbnN0IHRoZW1lRHJvcGRvd25NZW51ID0gY3JlYXRlVGhlbWVEcm9wZG93bigpO1xuXHR0aGVtZU1lbnVUb2dnbGVyID0gdGhlbWVEcm9wZG93bk1lbnUubWVudS5maXJzdEVsZW1lbnRDaGlsZDtcblx0ZWxlbWVudC50aGVtZVNlbGVjdG9yLmluc2VydEFkamFjZW50RWxlbWVudChcblx0XHRcImFmdGVyZW5kXCIsXG5cdFx0dGhlbWVEcm9wZG93bk1lbnUubWVudSxcblx0KTtcbn07XG5cbmNvbnN0IGluaXRpYWxpemVUaGVtZSA9ICgpID0+IHtcblx0Y29uc3Qgc2F2ZWRUaGVtZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY29sb3ItdGhlbWVcIik7XG5cdGlmIChzYXZlZFRoZW1lKSB7XG5cdFx0c2V0VGhlbWUoc2F2ZWRUaGVtZSk7XG5cdH0gZWxzZSB7XG5cdFx0bWF0Y2hTeXN0ZW1UaGVtZSgpO1xuXHRcdGRhcmtNb2RlTWVkaWFRdWVyeS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGhhbmRsZVRoZW1lQ2hhbmdlKTtcblx0fVxufTtcblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcblx0aW5pdGlhbGl6ZVRoZW1lKCk7XG5cdHNldHVwRHJvcGRvd25NZW51KCk7XG59KTtcbiIsImltcG9ydCBcIi4vc3R5bGUuY3NzXCI7XG5pbXBvcnQgeyBUb2RvSXRlbSwgUHJvamVjdExpc3QsIHRvZG9NYW5hZ2VyIH0gZnJvbSBcIi4vdG9kby1tYW5hZ2VyL21hbmFnZXJcIjtcbmltcG9ydCB7XG5cdGZvcm0sXG5cdGVsZW1lbnQsXG5cdHRvZG9Db250ZW50LFxuXHRzaWRlYmFyLFxuXHRjb25maXJtRGlhbG9nLFxuXHRjb21wbGV0ZWRMaXN0LFxufSBmcm9tIFwiLi91aS91aVwiO1xuXG5jb25zdCBpbmJveCA9IHtcblx0bmFtZTogXCJJbmJveFwiLFxuXHRpZDogbnVsbCxcbn07XG5sZXQgY3VycmVudFByb2plY3QgPSBpbmJveDtcbmVsZW1lbnQuaW5ib3hJdGVtLmRhdGFzZXQuaWQgPSBpbmJveC5pZDtcblxuY29uc3QgdG9kb0l0ZW1IYW5kbGVyID0geyBvblRvZG9Db21wbGV0ZTogY29tcGxldGVUb2RvKCksIG9uVG9kb0RlbGV0ZSB9O1xuY29uc3QgcHJvamVjdEl0ZW1IYW5kbGVyID0ge1xuXHRvbkNsaWNrOiBzd2l0Y2hQcm9qZWN0LFxuXHRvbkRlbGV0ZTogY29uZmlybURpYWxvZy5hZGRDb25maXJtYXRpb24ob25Qcm9qZWN0RGVsZXRlLCB7XG5cdFx0bWVzc2FnZTogXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcHJvY2VlZD9cIixcblx0XHRjb25maXJtOiBcIkRlbGV0ZVwiLFxuXHR9KSxcbn07XG5cbmZ1bmN0aW9uIHN3aXRjaFByb2plY3QocHJvamVjdCkge1xuXHRpZiAoY3VycmVudFByb2plY3QgPT09IHByb2plY3QpIHJldHVybjtcblx0Y3VycmVudFByb2plY3QgPSBwcm9qZWN0IHx8IGluYm94O1xuXG5cdHRvZG9Db250ZW50LnVwZGF0ZVByb2plY3ROYW1lKFxuXHRcdGN1cnJlbnRQcm9qZWN0Lm5hbWUsXG5cdFx0Y3VycmVudFByb2plY3QuaWQgJiYgcHJvamVjdE5hbWVDaGFuZ2VIYW5kbGVyLFxuXHQpO1xuXHR0b2RvQ29udGVudC5yZW5kZXJUb2Rvcyhcblx0XHRUb2RvSXRlbS5nZXRJbmNvbXBsZXRlVG9kb3NGb3JQcm9qZWN0KGN1cnJlbnRQcm9qZWN0LmlkKSxcblx0XHR0b2RvSXRlbUhhbmRsZXIsXG5cdCk7XG5cdGNvbXBsZXRlZExpc3QucmVuZGVySXRlbXMoXG5cdFx0VG9kb0l0ZW0uZ2V0Q29tcGxldGVkVG9kb3NGb3JQcm9qZWN0KGN1cnJlbnRQcm9qZWN0LmlkKSxcblx0XHRvblVuY2hlY2ssXG5cdCk7XG5cdHNpZGViYXIudG9nZ2xlQWN0aXZlTmF2SXRlbShjdXJyZW50UHJvamVjdC5pZCk7XG5cdHRvZG9Db250ZW50LmhpZGVUb2RvRm9ybSgpO1xuXHRlbGVtZW50LmFkZFRvZG9CdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbn1cblxuZnVuY3Rpb24gcHJvamVjdFN1Ym1pdEhhbmRsZXIoZXZlbnQpIHtcblx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRjb25zdCBwcm9qZWN0RGF0YSA9IG5ldyBGb3JtRGF0YShldmVudC50YXJnZXQpO1xuXHRjb25zdCBwcm9qZWN0TmFtZSA9IHByb2plY3REYXRhLmdldChcIm5hbWVcIik7XG5cdGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgUHJvamVjdExpc3QocHJvamVjdE5hbWUpO1xuXG5cdGV2ZW50LnRhcmdldC5yZXNldCgpO1xuXHRldmVudC50YXJnZXQucXVlcnlTZWxlY3RvcihcImlucHV0XCIpLmJsdXIoKTtcblx0aWYgKCFuZXdQcm9qZWN0KSByZXR1cm47XG5cblx0c2lkZWJhci5yZW5kZXJQcm9qZWN0cyhQcm9qZWN0TGlzdC5wcm9qZWN0cywgcHJvamVjdEl0ZW1IYW5kbGVyKTtcblx0c3dpdGNoUHJvamVjdChuZXdQcm9qZWN0KTtcbn1cblxuZnVuY3Rpb24gb25TdWJtaXRUb2RvQWRkKGZvcm1EYXRhKSB7XG5cdGNvbnN0IG5ld1RvZG8gPSBuZXcgVG9kb0l0ZW0oZm9ybURhdGEsIGN1cnJlbnRQcm9qZWN0KTtcblx0dG9kb0NvbnRlbnQuYWRkVG9kb0VsZW1lbnQobmV3VG9kbywgdG9kb0l0ZW1IYW5kbGVyKTtcbn1cblxuZnVuY3Rpb24gb25TdWJtaXRUb2RvRWRpdChmb3JtRGF0YSwgdGFyZ2V0RWxlbWVudCkge1xuXHRjb25zdCBzZWxlY3RlZFRvZG8gPSBUb2RvSXRlbS5nZXRUb2RvQnlJRCh0YXJnZXRFbGVtZW50LmlkKTtcblx0Zm9yIChjb25zdCBrZXkgaW4gZm9ybURhdGEpIHtcblx0XHRzZWxlY3RlZFRvZG8udXBkYXRlUHJvcGVydHkoa2V5LCBmb3JtRGF0YVtrZXldKTtcblx0fVxuXHR0YXJnZXRFbGVtZW50LnVwZGF0ZUNvbnRlbnQoc2VsZWN0ZWRUb2RvLCB0b2RvSXRlbUhhbmRsZXIpO1xufVxuXG5mdW5jdGlvbiBjb21wbGV0ZVRvZG8oc2hvd0NvbXBsZXRlID0gdHJ1ZSkge1xuXHRyZXR1cm4gKHRvZG9JRCkgPT4ge1xuXHRcdGNvbnN0IHNlbGVjdGVkVG9kbyA9IFRvZG9JdGVtLmdldFRvZG9CeUlEKHRvZG9JRCk7XG5cdFx0c2VsZWN0ZWRUb2RvLm1hcmtDb21wbGV0ZSgpO1xuXHRcdHRvZG9Db250ZW50LnJlbW92ZVRvZG9FbGVtZW50KHRvZG9JRCk7XG5cdFx0aWYgKHNob3dDb21wbGV0ZSkgY29tcGxldGVkTGlzdC5hZGRJdGVtKHNlbGVjdGVkVG9kbywgb25VbmNoZWNrKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gb25Ub2RvRGVsZXRlKHRvZG9JRCkge1xuXHRUb2RvSXRlbS5yZW1vdmVUb2RvKHRvZG9JRCk7XG5cdHRvZG9Db250ZW50LnJlbW92ZVRvZG9FbGVtZW50KHRvZG9JRCk7XG59XG5cbmZ1bmN0aW9uIG9uUHJvamVjdERlbGV0ZShwcm9qZWN0SUQpIHtcblx0UHJvamVjdExpc3QucmVtb3ZlUHJvamVjdChwcm9qZWN0SUQpO1xuXHRzaWRlYmFyLnJlbW92ZVByb2plY3RJdGVtKHByb2plY3RJRCk7XG5cblx0aWYgKHByb2plY3RJRCA9PT0gY3VycmVudFByb2plY3QuaWQpIHtcblx0XHRzd2l0Y2hQcm9qZWN0KCk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvamVjdE5hbWVDaGFuZ2VIYW5kbGVyKGV2ZW50KSB7XG5cdGNvbnN0IHVwZGF0ZWROYW1lID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuXHRjdXJyZW50UHJvamVjdC5uYW1lID0gdXBkYXRlZE5hbWU7XG5cdHNpZGViYXIudXBkYXRlUHJvamVjdE5hbWUoY3VycmVudFByb2plY3QuaWQsIGN1cnJlbnRQcm9qZWN0Lm5hbWUpO1xufVxuXG5mdW5jdGlvbiBvblVuY2hlY2sodG9kb0lEKSB7XG5cdGNvbnN0IHNlbGVjdGVkVG9kbyA9IFRvZG9JdGVtLmdldFRvZG9CeUlEKHRvZG9JRCk7XG5cdHNlbGVjdGVkVG9kby5tYXJrSW5jb21wbGV0ZSgpO1xuXHRjb21wbGV0ZWRMaXN0LnJlbW92ZUl0ZW0odG9kb0lEKTtcblx0dG9kb0NvbnRlbnQucmVuZGVyVG9kb3MoXG5cdFx0VG9kb0l0ZW0uZ2V0SW5jb21wbGV0ZVRvZG9zRm9yUHJvamVjdChjdXJyZW50UHJvamVjdC5pZCksXG5cdFx0dG9kb0l0ZW1IYW5kbGVyLFxuXHQpO1xufVxuXG5mdW5jdGlvbiBzaG93T3RoZXJMaXN0KGxpc3QsIHByb3BzLCBvcHRpb25zKSB7XG5cdGN1cnJlbnRQcm9qZWN0ID0geyBpZDogcHJvcHMuaWQgfTtcblx0dG9kb0NvbnRlbnQudXBkYXRlUHJvamVjdE5hbWUocHJvcHMubmFtZSk7XG5cdHRvZG9Db250ZW50LnJlbmRlclRvZG9zKFxuXHRcdGxpc3QsXG5cdFx0e1xuXHRcdFx0b25Ub2RvQ29tcGxldGU6IGNvbXBsZXRlVG9kbyhmYWxzZSksXG5cdFx0XHRvblRvZG9EZWxldGUsXG5cdFx0fSxcblx0XHRvcHRpb25zLFxuXHQpO1xuXHRzaWRlYmFyLnRvZ2dsZUFjdGl2ZU5hdkl0ZW0oY3VycmVudFByb2plY3QuaWQpO1xuXHR0b2RvQ29udGVudC5oaWRlVG9kb0Zvcm0oKTtcblx0ZWxlbWVudC5hZGRUb2RvQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG5cdGVsZW1lbnQuY29tcGxldGVkQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG59XG5cbmZvcm0ucHJvamVjdC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHByb2plY3RTdWJtaXRIYW5kbGVyKTtcbnRvZG9Db250ZW50LnJlZ2lzdGVyU3VibWl0TGlzdGVuZXIoXCJhZGRUb2RvXCIsIG9uU3VibWl0VG9kb0FkZCk7XG50b2RvQ29udGVudC5yZWdpc3RlclN1Ym1pdExpc3RlbmVyKFwiZWRpdFRvZG9cIiwgb25TdWJtaXRUb2RvRWRpdCk7XG5cbmVsZW1lbnQuaW5ib3hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcblx0c3dpdGNoUHJvamVjdCgpO1xufSk7XG5lbGVtZW50LnRvZGF5TmF2QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG5cdHNob3dPdGhlckxpc3QoXG5cdFx0VG9kb0l0ZW0uaW5jb21wbGV0ZVRvZG9zVG9kYXksXG5cdFx0eyBuYW1lOiBcIlRvZGF5XCIsIGlkOiBcInRvZGF5XCIgfSxcblx0XHR7IHNob3dQcm9qZWN0OiB0cnVlLCBzaG93RHVlRGF0ZTogZmFsc2UgfSxcblx0KTtcbn0pO1xuZWxlbWVudC5wcmlvcml0eU5hdkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuXHRzaG93T3RoZXJMaXN0KFxuXHRcdFRvZG9JdGVtLmluY29tcGxldGVIaWdoUHJpb3JpdHlUb2Rvcyxcblx0XHR7IG5hbWU6IFwiSGlnaCBQcmlvcml0eVwiLCBpZDogXCJwcmlvcml0eVwiIH0sXG5cdFx0eyBzaG93UHJvamVjdDogdHJ1ZSwgc2hvd1ByaW9yaXR5OiBmYWxzZSB9LFxuXHQpO1xufSk7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsICgpID0+IHtcblx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ0b2Rvc1wiLCB0b2RvTWFuYWdlci5nZXRKc29uRGF0YSgpKTtcblx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzZXNzaW9uXCIsIGN1cnJlbnRQcm9qZWN0LmlkKTtcbn0pO1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuXHRjb25zdCB0b2Rvc0RhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInRvZG9zXCIpO1xuXHRpZiAodG9kb3NEYXRhKSB0b2RvTWFuYWdlci5sb2FkVG9kb3ModG9kb3NEYXRhKTtcblxuXHRzaWRlYmFyLnJlbmRlclByb2plY3RzKFByb2plY3RMaXN0LnByb2plY3RzLCBwcm9qZWN0SXRlbUhhbmRsZXIpO1xuXG5cdGNvbnN0IHNlc3Npb25JRCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic2Vzc2lvblwiKTtcblx0Y29uc3Qgc2Vzc2lvbk5hdkl0ZW1CdXR0b24gPSBlbGVtZW50LnNpZGViYXIucXVlcnlTZWxlY3Rvcihcblx0XHRgLm5hdi1pdGVtW2RhdGEtaWQ9XCIke3Nlc3Npb25JRH1cIl0gLnByb2plY3QtYnRuYCxcblx0KTtcblx0c2Vzc2lvbk5hdkl0ZW1CdXR0b24uY2xpY2soKTtcbn0pO1xuIl0sIm5hbWVzIjpbIm5hbm9pZCIsInNpemUiLCJpZCIsImJ5dGVzIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDhBcnJheSIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJnU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiRGF0ZSIsImNvbnN0cnVjdG9yIiwiTmFOIiwiaXNWYWxpZCIsImRhdGUiLCJ2YWx1ZSIsIl9kYXRlIiwiaXNOYU4iLCJOdW1iZXIiLCJjb25zdHJ1Y3RGcm9tIiwiY29uc3RydWN0Tm93Iiwibm93Iiwic3RhcnRPZkRheSIsInNldEhvdXJzIiwiaXNUb2RheSIsImRhdGVMZWZ0IiwiZGF0ZVJpZ2h0IiwiVG9kb0l0ZW0iLCJzdGF0aWMiLCJNYXAiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZHVlRGF0ZSIsInByaW9yaXR5IiwiaXNDb21wbGV0ZSIsImNvbXBsZXRlZERhdGUiLCJwcm9qZWN0IiwidGhpcyIsInNldCIsIm1hcmtDb21wbGV0ZSIsInRvRGF0ZVN0cmluZyIsIm1hcmtJbmNvbXBsZXRlIiwidG9nZ2xlQ29tcGxldGlvbiIsInVwZGF0ZVByb3BlcnR5IiwicHJvcGVydHkiLCJwcmlvcml0eVZhbHVlIiwiTUlOX1BSSU9SSVRZIiwiTUFYX1BSSU9SSVRZIiwiZGF0ZVN0ciIsInBhcnNlRGF0ZSIsInRvZG9zIiwiQXJyYXkiLCJmcm9tIiwidmFsdWVzIiwiZ2V0VG9kb0J5SUQiLCJnZXQiLCJyZW1vdmVUb2RvIiwiZGVsZXRlIiwiZ2V0VG9kb3NGb3JQcm9qZWN0IiwicHJvamVjdElEIiwiZmlsdGVyIiwidG9kbyIsImdldENvbXBsZXRlZFRvZG9zRm9yUHJvamVjdCIsImdldEluY29tcGxldGVUb2Rvc0ZvclByb2plY3QiLCJpbmNvbXBsZXRlVG9kb3NUb2RheSIsImluY29tcGxldGVIaWdoUHJpb3JpdHlUb2RvcyIsIlByb2plY3RMaXN0IiwibmFtZSIsInByb2plY3RzIiwicHJvamVjdE5hbWVzIiwibWFwIiwiZ2V0UHJvamVjdEJ5SUQiLCJyZW1vdmVQcm9qZWN0IiwidG9kb3NUb1JlbW92ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNpZGViYXIiLCJ0b2RvTGlzdCIsInByb2plY3RMaXN0IiwicHJvamVjdEhlYWRpbmciLCJpbmJveEl0ZW0iLCJpbmJveEJ1dHRvbiIsInRvZGF5TmF2QnV0dG9uIiwicHJpb3JpdHlOYXZCdXR0b24iLCJwcm9qZWN0SW5wdXQiLCJhZGRUb2RvQnV0dG9uIiwiY29uZmlybURpYWxvZyIsImNvbXBsZXRlZENvbnRhaW5lciIsImNvbXBsZXRlZExpc3QiLCJ0aGVtZVNlbGVjdG9yIiwicmVuZGVyTGlzdCIsImNvbnRhaW5lciIsImNyZWF0ZUl0ZW0iLCJsaXN0IiwiaGFuZGxlciIsIm9wdGlvbnMiLCJyZXBsYWNlQ2hpbGRyZW4iLCJpdGVtIiwiaXRlbUVsZW1lbnQiLCJhcHBlbmQiLCJjcmVhdGVJY29uIiwic3ltYm9sIiwiaWNvbiIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZURyb3Bkb3duTWVudSIsInRhcmdldEJ1dHRvbiIsIm1lbnVCdXR0b24iLCJtZW51QnV0dG9uSWNvbiIsImNyZWF0ZURyb3Bkb3duTWVudUJ1dHRvbiIsIm1lbnVMaXN0Iiwib3B0aW9uIiwibWVudUl0ZW0iLCJ0ZXh0U3BhbiIsInRleHQiLCJhZGRFdmVudExpc3RlbmVyIiwidG9nZ2xlTWVudSIsImhpZGVNZW51T25PdXRzaWRlQ2xpY2siLCJldmVudCIsImNvbnRhaW5zIiwidGFyZ2V0IiwidG9nZ2xlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJ1dHRvbiIsIm1lbnUiLCJyZW5kZXJQcm9qZWN0cyIsIm5hdkl0ZW0iLCJkYXRhc2V0IiwibmFtZVNwYW4iLCJuYXZCdXR0b24iLCJvbkNsaWNrIiwiZHJvcGRvd25NZW51IiwiZm9jdXMiLCJvbkRlbGV0ZSIsInRvZ2dsZUFjdGl2ZU5hdkl0ZW0iLCJpdGVtSUQiLCJhY3RpdmVOYXZJdGVtIiwicmVtb3ZlIiwic2VsZWN0ZWROYXZJdGVtIiwiYmx1ck9uRXNjYXBlUHJlc3MiLCJrZXkiLCJibHVyIiwiTWF0aCIsInBvdyIsIm1pbGxpc2Vjb25kc0luV2VlayIsIm1pbGxpc2Vjb25kc0luRGF5IiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsInV0Y0RhdGUiLCJVVEMiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJzZXRVVENGdWxsWWVhciIsImRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyIsInN0YXJ0T2ZEYXlMZWZ0Iiwic3RhcnRPZkRheVJpZ2h0IiwidGltZXN0YW1wTGVmdCIsInRpbWVzdGFtcFJpZ2h0Iiwicm91bmQiLCJjb21wYXJlTG9jYWxBc2MiLCJkaWZmIiwiaXNUaGlzWWVhciIsIl9kYXRlTGVmdCIsIl9kYXRlUmlnaHQiLCJpc1NhbWVZZWFyIiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiYXJncyIsIndpZHRoIiwiU3RyaW5nIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0cyIsImZvcm1hdExvbmciLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsInZhbHVlc0FycmF5IiwiY29udGV4dCIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiYXJndW1lbnRDYWxsYmFjayIsImJ1aWxkTWF0Y2hGbiIsInN0cmluZyIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwiaXNBcnJheSIsImFycmF5IiwicHJlZGljYXRlIiwibGVuZ3RoIiwidGVzdCIsImZpbmRJbmRleCIsIm9iamVjdCIsImhhc093blByb3BlcnR5IiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0Iiwic2xpY2UiLCJlblVTIiwiY29kZSIsImZvcm1hdERpc3RhbmNlIiwidG9rZW4iLCJjb3VudCIsInJlc3VsdCIsInRva2VuVmFsdWUiLCJyZXBsYWNlIiwiYWRkU3VmZml4IiwiY29tcGFyaXNvbiIsImZvcm1hdFJlbGF0aXZlIiwiX2Jhc2VEYXRlIiwiX29wdGlvbnMiLCJsb2NhbGl6ZSIsIm9yZGluYWxOdW1iZXIiLCJkaXJ0eU51bWJlciIsIm51bWJlciIsInJlbTEwMCIsImVyYSIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsInF1YXJ0ZXIiLCJtb250aCIsImRheSIsImRheVBlcmlvZCIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwicGFyc2VQYXR0ZXJuIiwicGFyc2VJbnQiLCJwYXJzZVJlc3VsdCIsImFueSIsImluZGV4Iiwid2Vla1N0YXJ0c09uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZGVmYXVsdE9wdGlvbnMiLCJnZXREZWZhdWx0T3B0aW9ucyIsImdldERheU9mWWVhciIsImNsZWFuRGF0ZSIsInNldEZ1bGxZZWFyIiwic3RhcnRPZlllYXIiLCJzdGFydE9mV2VlayIsImxvY2FsZSIsImdldERheSIsInNldERhdGUiLCJzdGFydE9mSVNPV2VlayIsImdldElTT1dlZWtZZWFyIiwieWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwiZ2V0VGltZSIsImdldElTT1dlZWsiLCJmb3VydGhPZkphbnVhcnkiLCJzdGFydE9mSVNPV2Vla1llYXIiLCJnZXRXZWVrWWVhciIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwiZ2V0V2VlayIsImZpcnN0V2VlayIsInN0YXJ0T2ZXZWVrWWVhciIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsImFicyIsInBhZFN0YXJ0IiwibGlnaHRGb3JtYXR0ZXJzIiwieSIsInNpZ25lZFllYXIiLCJNIiwiZCIsImEiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJ0b1VwcGVyQ2FzZSIsImgiLCJIIiwibSIsInMiLCJTIiwibnVtYmVyT2ZEaWdpdHMiLCJtaWxsaXNlY29uZHMiLCJ0cnVuYyIsImZvcm1hdHRlcnMiLCJHIiwidW5pdCIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwiY2VpbCIsInEiLCJMIiwidyIsIndlZWsiLCJJIiwiaXNvV2VlayIsIkQiLCJkYXlPZlllYXIiLCJFIiwiZGF5T2ZXZWVrIiwiZSIsImxvY2FsRGF5T2ZXZWVrIiwiYyIsImkiLCJpc29EYXlPZldlZWsiLCJ0b0xvd2VyQ2FzZSIsImIiLCJob3VycyIsIkIiLCJLIiwiayIsIlgiLCJfbG9jYWxpemUiLCJ0aW1lem9uZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJ4IiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIlQiLCJvZmZzZXQiLCJkZWxpbWl0ZXIiLCJzaWduIiwiYWJzT2Zmc2V0IiwibWludXRlcyIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsInRpbWVMb25nRm9ybWF0dGVyIiwibG9uZ0Zvcm1hdHRlcnMiLCJwIiwiUCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJkYXRlVGltZUZvcm1hdCIsImRheU9mWWVhclRva2VuUkUiLCJ3ZWVrWWVhclRva2VuUkUiLCJ0aHJvd1Rva2VucyIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZm9ybWF0IiwiZm9ybWF0U3RyIiwib3JpZ2luYWxEYXRlIiwiUmFuZ2VFcnJvciIsInBhcnRzIiwic3Vic3RyaW5nIiwiZmlyc3RDaGFyYWN0ZXIiLCJsb25nRm9ybWF0dGVyIiwiam9pbiIsImlzVG9rZW4iLCJjbGVhbkVzY2FwZWRTdHJpbmciLCJwcmVwcm9jZXNzb3IiLCJmb3JtYXR0ZXJPcHRpb25zIiwicGFydCIsInVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaW5wdXQiLCJfbWVzc2FnZSIsInN1YmplY3QiLCJtZXNzYWdlIiwiY29uc29sZSIsIndhcm4iLCJpbmNsdWRlcyIsIndhcm5PclRocm93UHJvdGVjdGVkRXJyb3IiLCJmb3JtYXR0ZXIiLCJtYXRjaGVkIiwiZ2V0UmVsYXRpdmVEYXRlIiwiZGF0ZVRvQ29tcGFyZSIsIm9ubHlEYXRlIiwiZGF5c0RpZmYiLCJkaWZmZXJlbmNlIiwiZGlmZmVyZW5jZUluRGF5cyIsInJlbGF0aXZlRGF0ZURlc2NyaXB0aW9uIiwiY3JlYXRlVG9kb0VsZW1lbnQiLCJzaG93UHJvamVjdCIsInNob3dQcmlvcml0eSIsInNob3dEdWVEYXRlIiwidG9kb0VsZW1lbnQiLCJoZWFkZXJDb250YWluZXIiLCJ0b2RvVGl0bGUiLCJ0b2RvQ29tcGxldGVCdXR0b24iLCJjcmVhdGVDaGVja2JveCIsIm9uVG9kb0NvbXBsZXRlIiwicHJpb3JpdHlFbGVtZW50IiwiY3JlYXRlUHJpb3JpdHlFbGVtZW50IiwiZGVzY3JpcHRpb25UZXh0IiwiY3JlYXRlRGVzY3JpcHRpb25FbGVtZW50IiwiaW5mb0NvbnRhaW5lciIsInJpZ2h0Q29udGFpbmVyIiwicHJvamVjdEVsZW1lbnQiLCJwcm9qZWN0SWNvbiIsInByb2plY3RUZXh0IiwiY3JlYXRlUHJvamVjdEVsZW1lbnQiLCJkdWVEYXRlRWxlbWVudCIsImNyZWF0ZURhdGVFbGVtZW50IiwiZWRpdENsaWNrSGFuZGxlciIsInNob3dUb2RvRm9ybSIsInN1Ym1pdEhhbmRsZXIiLCJhZGRUb2RvIiwiZWRpdFRvZG8iLCJvblRvZG9EZWxldGUiLCJjbG9zZXN0IiwidG9kb0lEIiwidG9kb0NvbXBsZXRlSWNvbiIsInRvZ2dsZUJ1dHRvbiIsInByaW9yaXR5RWwiLCJwcmlvcml0eUljb24iLCJwcmlvcml0eVRleHQiLCJnZXRQcmlvcml0eVRleHQiLCJkYXRlRWxlbWVudCIsImRhdGVJY29uIiwiZGF0ZVRleHQiLCJjdXJyZW50VG9kb0VsZW1lbnQiLCJlbGVtZW50VG9SZXBsYWNlIiwicmVzZXQiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJoaWRkZW4iLCJ1bmRlZmluZWQiLCJmaWxsRm9ybSIsImhhbmRsZUVzY2FwZVByZXNzIiwiaGFuZGxlQ2xpY2tPdXRzaWRlRm9ybSIsImhpZGVUb2RvRm9ybSIsInJlZ2lzdGVyU3VibWl0TGlzdGVuZXIiLCJhY3Rpb24iLCJjYWxsYmFjayIsInByZXZlbnREZWZhdWx0IiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsInRvZG9Gb3JtRGF0YSIsImZyb21FbnRyaWVzIiwiZWxlbWVudCIsInVwZGF0ZUNvbnRlbnQiLCJ1cGRhdGVUb2RvRWxlbWVudCIsImVsZW1lbnRVcGRhdGVyIiwidXBkYXRlZFRvZG9FbGVtZW50IiwiY2hpbGRyZW4iLCJyZW1vdmVUb2RvRWxlbWVudCIsInJlbW92ZUNoaWxkIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFkiLCJ0b3AiLCJib3R0b20iLCJjbGllbnRYIiwibGVmdCIsInJpZ2h0IiwicmVuZGVyVG9kb3MiLCJwcm9qZWN0TmFtZUlucHV0IiwiZGlhbG9nVGV4dCIsImNvbmZpcm1CdXR0b24iLCJjbG9zZSIsImNvbXBsZXRlZEZvbGRCdXR0b24iLCJjcmVhdGVDb21wbGV0ZWRJdGVtIiwib25VbmNoZWNrIiwiY29tcGxldGVkSXRlbSIsImNoZWNrYm94IiwiY29tcGxldGVkRGF0ZVNwYW4iLCJ0b2dnbGVDb250YWluZXJWaXNpYmlsaXR5IiwidGhlbWVJY29uIiwiZGFya01vZGVNZWRpYVF1ZXJ5Iiwid2luZG93IiwibWF0Y2hNZWRpYSIsImlzRGFya01vZGUiLCJ0aGVtZSIsImRvY3VtZW50RWxlbWVudCIsIm1hdGNoZXMiLCJzZXRUaGVtZSIsImhhbmRsZVRoZW1lQ2hhbmdlIiwidXBkYXRlVGhlbWVNZW51IiwibWF0Y2hTeXN0ZW1UaGVtZSIsInRoZW1lTWVudVRvZ2dsZXIiLCJkYXJrTW9kZSIsInNhdmVkVGhlbWUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiaW5pdGlhbGl6ZVRoZW1lIiwidGhlbWVEcm9wZG93bk1lbnUiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImZpcnN0RWxlbWVudENoaWxkIiwic2V0dXBEcm9wZG93bk1lbnUiLCJpbmJveCIsImN1cnJlbnRQcm9qZWN0IiwidG9kb0l0ZW1IYW5kbGVyIiwiY29tcGxldGVUb2RvIiwicHJvamVjdEl0ZW1IYW5kbGVyIiwic3dpdGNoUHJvamVjdCIsImNvbmZpcm0iLCJsaXN0ZW5lciIsInNob3dNb2RhbCIsIm9uY2UiLCJuYXZJdGVtVG9SZW1vdmUiLCJwcm9qZWN0TmFtZUNoYW5nZUhhbmRsZXIiLCJjb21wbGV0ZWRUb2RvcyIsInJlbmRlciIsInNob3dDb21wbGV0ZSIsInNlbGVjdGVkVG9kbyIsInByZXBlbmQiLCJ1cGRhdGVkTmFtZSIsIm5ld1Byb2plY3ROYW1lIiwiaXRlbVRvUmVtb3ZlIiwic2hvd090aGVyTGlzdCIsInByb3BzIiwicHJvamVjdE5hbWUiLCJuZXdQcm9qZWN0IiwidGFyZ2V0RWxlbWVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b2RvTWFuYWdlciIsInRvZG9zRGF0YSIsImpzb25EYXRhIiwicGFyc2UiLCJ0b2RvRGF0YSIsInNlc3Npb25JRCIsImNsaWNrIl0sInNvdXJjZVJvb3QiOiIifQ==